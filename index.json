[{"body":"","link":"https://emtech.cc/","section":"","tags":null,"title":""},{"body":"","link":"https://emtech.cc/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://emtech.cc/tags/dns/","section":"tags","tags":null,"title":"DNS"},{"body":"","link":"https://emtech.cc/post/","section":"post","tags":["index"],"title":"Posts"},{"body":"","link":"https://emtech.cc/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"當你的 Certbot SSL 過期時，更新過程可能會出現各種問題，尤其是在使用手動插件時。這篇文章將介紹如何解決 Certbot 手動插件更新失敗的問題，並提供一個完整的解決方案，幫助你順利更新 SSL 憑證。\n還沒有使用過 Certbot 建立 SSL 憑證嗎? 如果你還沒有使用過 Certbot 建立 SSL 憑證，可以參考我之前的文章：如何使用 Certbot 申請免費的 SSL 憑證，並使用 DNS 驗證?。\n問題描述 當你嘗試更新 Certbot SSL 憑證時，可能會遇到以下錯誤訊息：\n1Failed to renew certificate example.com with error: The manual plugin is not working; there may be problems with your existing configuration. The error was: PluginError(\u0026#39;An authentication script must be provided with --manual-auth-hook when using the manual plugin non-interactively.\u0026#39;) 這表示 Certbot 無法使用手動插件進行非交互式更新，需要提供身份驗證腳本。\n解決方案 有兩種方法可以解決這個問題：\n切換到自動化的網頁伺服器插件 提供手動身份驗證腳本 方法一：切換到自動化的網頁伺服器插件 使用自動化的網頁伺服器插件（如 certbot-apache 或 certbot-nginx）可以簡化更新過程。\n1. 安裝插件 對於 Apache 伺服器：\n1sudo apt-get install python3-certbot-apache 對於 Nginx 伺服器：\n1sudo apt-get install python3-certbot-nginx 2. 重新簽發憑證 根據你的伺服器類型，運行以下命令：\n對於 Apache：\n1sudo certbot --apache 對於 Nginx：\n1sudo certbot --nginx 這樣，Certbot 會自動處理 SSL 憑證的更新。以我的樹梅派為例，我使用 Nginx 伺服器，所以我會選擇 --nginx 選項。輸入指令後，Certbot 會問我要為哪個域名啟用 HTTPS，我選擇了 pi.elvismao.com。更新成功後，會顯示以下訊息：\n1em@raspberrypi:~ $ sudo certbot --nginx 2Saving debug log to /var/log/letsencrypt/letsencrypt.log 3 4Which names would you like to activate HTTPS for? 5We recommend selecting either all domains, or all domains in a VirtualHost/server block. 6- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 71: pc.elvismao.com 82: pi.elvismao.com 9- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 10Select the appropriate numbers separated by commas and/or spaces, or leave input 11blank to select all options shown (Enter \u0026#39;c\u0026#39; to cancel): 2 12Requesting a certificate for pi.elvismao.com 13 14Successfully received certificate. 15Certificate is saved at: /etc/letsencrypt/live/pi.elvismao.com/fullchain.pem 16Key is saved at: /etc/letsencrypt/live/pi.elvismao.com/privkey.pem 17This certificate expires on 2024-09-28. 18These files will be updated when the certificate renews. 19Certbot has set up a scheduled task to automatically renew this certificate in the background. 20 21Deploying certificate 22Successfully deployed certificate for pi.elvismao.com to /etc/nginx/sites-enabled/pi.elvismao.com.conf 23Congratulations! You have successfully enabled HTTPS on https://pi.elvismao.com 方法二：提供手動身份驗證腳本 如果你需要繼續使用手動方法，則必須提供身份驗證腳本。基本上它就是模擬你手動輸入驗證碼的過程。首先，創建一個腳本來執行 DNS 或 HTTP 驗證步驟，然後使用 --manual-auth-hook 選項。\n1. 範例身份驗證腳本 以下是一個簡單的 DNS 驗證腳本範例：\n1#!/bin/bash 2# 這是一個用於 DNS 驗證的簡單範例 3 4# 定義你的 DNS API 憑證並更新 DNS 記錄 5API_KEY=\u0026#34;你的API密鑰\u0026#34; 6DOMAIN=\u0026#34;_acme-challenge.yourdomain.com\u0026#34; 7TXT_VALUE=$CERTBOT_VALIDATION 8 9# 調用你的 DNS 提供商 API 來更新 TXT 記錄 10curl -X POST \u0026#34;https://api.dnsprovider.com/update\u0026#34; \\ 11 -H \u0026#34;Authorization: Bearer $API_KEY\u0026#34; \\ 12 -d \u0026#34;domain=$DOMAIN\u0026#34; \\ 13 -d \u0026#34;txt=$TXT_VALUE\u0026#34; 14 15# 等待 DNS 更改生效 16sleep 60 確保根據你的 DNS 提供商的 API 要求調整腳本。\n2. 使用手動身份驗證腳本更新憑證 運行以下命令來更新憑證：\n1sudo certbot renew --manual --manual-auth-hook /path/to/auth-script.sh 驗證更新結果 更新完成後，通常不需要重啟網頁伺服器，但有時可能需要。對於 Apache 伺服器：\n1sudo systemctl restart apache2 對於 Nginx 伺服器：\n1sudo systemctl restart nginx 檢查憑證狀態以確保更新成功：\n1sudo certbot certificates 結論 透過這篇文章，我們介紹了如何解決 Certbot SSL 手動插件更新失敗的問題，包括使用自動化插件和提供手動身份驗證腳本的詳細步驟。希望這些方法能幫助你順利更新 SSL 憑證，確保網站的安全性。如果你有任何問題都可以在 IG 留言，也歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技。\n","link":"https://emtech.cc/post/certbot-renew/","section":"post","tags":["DNS"],"title":"解決 Certbot SSL 更新失敗 - The manual plugin is not working"},{"body":"","link":"https://emtech.cc/categories/%E8%A3%BD%E4%BD%9C%E6%95%99%E5%AD%B8/","section":"categories","tags":null,"title":"製作教學"},{"body":"","link":"https://emtech.cc/tags/linux/","section":"tags","tags":null,"title":"Linux"},{"body":"","link":"https://emtech.cc/tags/ssh/","section":"tags","tags":null,"title":"SSH"},{"body":"在某些情況下，例如學校或公司網路封鎖了 SSH 預設的 22 端口，你可能需要更改 SSH 服務器的端口號來確保連接。更改端口號還可以增加一層安全性，因為攻擊者通常會針對常見的 22 端口進行掃描和攻擊。\n很明顯我寫這篇文章是因為西苑高中把我封的... 因此請你先透過網頁版的 SSH 連線到你的伺服器，或著是先開手機的個人熱點再進行以下步驟。\n步驟一：編輯 SSH 配置文件 首先，我們需要編輯 SSH 的配置文件。你可以使用任何文本編輯器，這裡我們使用 Vim 編輯器。打開 SSH 配置文件 sshd_config：\n1sudo vim /etc/ssh/sshd_config Vim 基本操作 打開文件：輸入 vim 文件名。 進入編輯模式：按 i 鍵進入插入模式。 保存退出：按 Esc 鍵退出編輯模式，然後輸入 :wq 並按 Enter 保存並退出。 退出不保存：按 Esc 鍵退出編輯模式，然後輸入 :q! 並按 Enter。 步驟二：修改端口設置 在打開的 sshd_config 文件中，找到以下這一行：\n1#Port 22 將其修改為：\n1Port 2222 這樣，我們就將 SSH 服務器的端口從 22 改為 2222。如果你想使用其他端口，可以自行修改。請注意，端口號必須在 0 到 65535 之間，並且不能與系統中已經使用的端口衝突。\n步驟三：保存並退出 在 Vim 編輯器中，按 Esc 鍵退出插入模式，然後輸入 :wq 並按 Enter 保存並退出文件。\n步驟四：重啟 SSH 服務 更改完成後，需要重啟 SSH 服務以使更改生效：\n1sudo systemctl restart sshd 步驟五：確認防火牆設置 確保防火牆允許新的端口。如果你使用的是 ufw，可以這樣設置：\n1sudo ufw allow 2222/tcp 步驟六：測試新的 SSH 端口 使用新的端口號進行 SSH 連接測試：\n1ssh -p 2222 username@hostname 結論 通過更改 SSH 端口號，你可以繞過一些網路限制並增強系統的安全性。使用 Vim 編輯器可以方便地進行配置文件的修改。希望這篇文章對你有幫助，如果你有任何問題都可以在 IG 留言，也歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技。\n","link":"https://emtech.cc/post/ssh-port/","section":"post","tags":["Linux","SSH"],"title":"如何更改 SSH 預設端口"},{"body":"","link":"https://emtech.cc/categories/%E8%BB%9F%E9%AB%94%E5%88%86%E4%BA%AB/","section":"categories","tags":null,"title":"軟體分享"},{"body":"","link":"https://emtech.cc/tags/git/","section":"tags","tags":null,"title":"git"},{"body":"","link":"https://emtech.cc/tags/github/","section":"tags","tags":null,"title":"Github"},{"body":"在使用 Git 管理項目的過程中難免會腦霧， push 完了之後才發現有錯誤，或是不小心推送了不應該存在的分支。\n今天我要來和你分享幾種常見的做法，包括如何使用 git revert 撤銷提交，git reset 重設分支，以及刪除新推送的分支。\n1. 使用 git revert 撤銷提交 這是最常見的情況。當你 (或你的雷隊友) push 上去了一坨狗屎後，你會希望撤銷這次提交，但是又可以留下他的犯罪紀錄 (為了不想影響到其他人的工作造成 conflict)。這時候 git revert 就是你的好朋友。它會創建一個新的提交，將你指定的提交的更改撤銷。\n找到提交的哈希值：首先使用 git log 命令查找你需要撤銷的提交的哈希值。如果你的雷隊友沒有寫好 commit message 沒有的話...那你加油。找到之後複製起來就可以點擊 q 退出 git log。 以我的範例來說，我要撤銷的是最後一次提交，就直接把最上面那串綠綠的 id ctrl+c 複製起來就好了。\n撤銷提交：輸入 git revert 那串ID 命令。如果需要一次撤銷多個提交，可以一次列出所有哈希值，然後一起提交。 1git revert xxxxx xxxxx xxxxx 提交更改：當你輸入完 git revert 命令後，Git 會自動打開你的編輯器請你寫提交信息。如果你想使用默認的提交信息，直接保存退出即可。 推送更改：最後，使用 git push 命令將更改推送到遠程倉庫。 1git push 2. 使用 git reset 重設分支 如果需要徹底去除錯誤的提交，你可以使用 git reset 命令。這會將分支重設到你指定的狀態，但比較不建議，請小心使用，因為這會改變歷史記錄，很可能會使其他人產生 git 衝突，演變成肢體衝突。通常使用在你做了一些真的很蠢的事情，比如說不小心把 token 公開。\n軟重設（保留工作目錄中的更改）：\n1git reset --soft HEAD~1 此命令將回退最後一次提交，但不會更改你的工作目錄。\n硬重設（放棄所有更改）：\n1git reset --hard HEAD~1 此命令會回退最後一次提交並放棄所有更改，使用時需極其小心。\n強制推送：重設後，使用以下命令強制推送到遠程倉庫：\n1git push origin [branch-name] --force 3. 刪除新推送的分支 如果不小心推送了一個不應該存在的分支，你可以使用下面的命令來刪除它：\n1git push origin --delete [branch-name] 結論 選擇合適的方法根據你的具體情況來決定。如果你在團隊中工作，通常使用 git revert 來避免改變共享的歷史記錄是更安全的選擇。希望這篇文章能幫助你更好地掌握 Git 的使用，有效地管理你的項目版本。\n如果你有任何問題都可以在 IG 留言，也歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技。\n","link":"https://emtech.cc/post/git-revert/","section":"post","tags":["git","GitHub"],"title":"啊我剛才 push 錯了! 如何在 Git 中撤銷提交"},{"body":"","link":"https://emtech.cc/tags/7z/","section":"tags","tags":null,"title":"7z"},{"body":"在傳輸大量檔案時，壓縮和解壓縮檔案簡直是必備的救命技能。而其中我最喜歡的軟體就是 7z（7-Zip），因為使用起來非常簡單，且壓縮出來的檔案真的是有夠小。今天我要來和你分享如何在 Linux 終端機使用 7z 壓縮和解壓縮檔案。\n壓縮比比較 1. 安裝7-Zip 在Linux上使用7z之前，首先需要安裝 7-Zip 程序。大多數 Linux 發行版都可以透過套件管理器輕鬆安裝。以下是在幾種常見的 Linux 發行版上安裝7-Zip的命令：\nUbuntu/Debian 系統:\n1sudo apt-get install p7zip-full Fedora/RHEL 系統:\n1sudo dnf install p7zip p7zip-plugins Arch Linux:\n1sudo pacman -S p7zip 安裝完成後，你可以透過在終端機輸入 7z 來檢查 7-Zip 是否安裝成功。\n2. 使用7z壓縮檔案 使用7z壓縮檔案非常簡單。以下是一個基本的命令，用於壓縮資料夾或檔案：\n17z a 壓縮檔案名.7z 要壓縮的資料夾或檔案 a 代表添加檔案到壓縮檔中。 壓縮檔案名.7z 是你想要創建的壓縮檔案名。 要壓縮的資料夾或檔案 是你想要壓縮的對象。 例如，要壓縮名為 Documents 的資料夾，你可以使用：\n17z a documents.7z Documents 3. 使用7z解壓縮檔案 解壓縮檔案同樣簡單。使用以下命令可以解壓縮 7z 檔案：\n17z x 壓縮檔案名.7z x 代表解壓縮檔案。 壓縮檔案名.7z 是你想要解壓的壓縮檔。 例如如果你的壓縮檔是 documents.7z，則命令如下：\n17z x documents.7z 4. 進階選項和技巧 7-Zip提供了許多進階選項，讓你可以更精確地控制壓縮和解壓縮過程。例如：\n設置壓縮等級：\n17z a -mx=9 壓縮檔案名.7z 要壓縮的資料夾或檔案 mx 參數可以設置壓縮等級，範圍是0（無壓縮）到9（最大壓縮）。\n加密壓縮檔案：\n17z a -p 你的密碼 壓縮檔案名.7z 要壓縮的資料夾或檔案 加-p選項可以為壓縮檔加密。\n查看壓縮檔案內容：\n17z l 壓縮檔案名.7z l 參數用於列出壓縮檔內的檔案。\n透過這篇文章，你應該已經學會了如何在 Linux 系統中使用 7z 進行壓縮和解壓縮。如果你有任何問題都可以在 IG 留言，也歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技。\n","link":"https://emtech.cc/post/7zip/","section":"post","tags":["Linux","7z"],"title":"如何在 Linux 中使用 7z 壓縮和解壓縮檔案：完整簡單的教學"},{"body":"","link":"https://emtech.cc/tags/api/","section":"tags","tags":null,"title":"API"},{"body":"","link":"https://emtech.cc/tags/gas/","section":"tags","tags":null,"title":"GAS"},{"body":"","link":"https://emtech.cc/tags/javascript/","section":"tags","tags":null,"title":"JavaScript"},{"body":"","link":"https://emtech.cc/tags/line/","section":"tags","tags":null,"title":"line"},{"body":"Line 在 2024/04/17 推出了新的 Messaging API，其中一個功能是可以顯示思考中動畫。讓使用者知道機器人正在思考中，並不是已讀不回。對於現在許多機器人會串接 LLM API 的應用來說，這個功能非常實用。為了讓大家更好理解，今天我們先不要急著串接生成式 AI，我們來使用 Google App Script 做一個簡單的 Demo 吧!\n其實這個功能在發布當天我就收到通知了，今天終於抽出時間來玩玩看這個新功能。\n介紹 在用戶和 LINE 官方帳戶之間的一對一聊天中顯示載入動畫。\n經過指定的秒數（5 至 60 秒）後或當您的 LINE 官方帳戶收到新訊息時，載入動畫將自動消失。\n只有當使用者查看與您的 LINE 官方帳戶的聊天畫面時，才會顯示載入動畫。 如果您要求在使用者未查看聊天畫面時顯示載入動畫，則不會顯示任何通知。 即使用戶稍後打開聊天螢幕，也不會顯示動畫。\n如果您要求在載入動畫仍然可見時再次顯示該動畫，則該動畫將繼續顯示，並且動畫消失之前的時間將被第二個請求中指定的秒數覆蓋。\n適用於 iOS 或 Android 的 LINE：13.16.0 或更高版本\n以下是一個範例的呼叫方式\n1curl -v -X POST https://api.line.me/v2/bot/chat/loading/start \\ 2-H \u0026#39;Content-Type: application/json\u0026#39; \\ 3-H \u0026#39;Authorization: Bearer {channel access token}\u0026#39; \\ 4-d \u0026#39;{ 5 \u0026#34;chatId\u0026#34;: \u0026#34;U4af4980629...\u0026#34;, 6 \u0026#34;loadingSeconds\u0026#34;: 5 7}\u0026#39; 使用 1. 建立 Line Bot 首先請你先建立一個 Line Bot，並取得 Channel Access Token。接著我們就可以開始實作了。\n請到 Line Developers =\u0026gt; 新增或選取Provider =\u0026gt; Create a new channel =\u0026gt; Message API。\n2. 建立 Google App Script 打開 Google App Script，並貼上以下程式碼。\n我們希望在使用 doPost 接收到訊息時，回覆使用者一個思考中的動畫。等待 5 秒後，回應說「好喔」。記得將 token 替換成你的 Channel Access Token。\n1const token = \u0026#34;XXXXXXXXXXXXXXXXXXXXXXXXXXXx=\u0026#34; 2 3function doPost(e) { 4 var contents = JSON.parse(e.postData.contents); 5 var chatId = contents.events[0].source.userId; 6 var replyToken = contents.events[0].replyToken; 7 8 // Start the loading animation 9 sendLoading(chatId, 5); 10 11 // Set a timer to end the loading animation and send a reply after 5 seconds 12 Utilities.sleep(5000); 13 sendReply(replyToken, \u0026#39;好喔\u0026#39;); 14} 15 16function sendLoading(chatId, seconds) { 17 var url = \u0026#39;https://api.line.me/v2/bot/chat/loading/start\u0026#39;; 18 var payload = { 19 \u0026#34;chatId\u0026#34;: chatId, 20 \u0026#34;loadingSeconds\u0026#34;: seconds 21 }; 22 var options = { 23 \u0026#39;method\u0026#39;: \u0026#39;post\u0026#39;, 24 \u0026#39;contentType\u0026#39;: \u0026#39;application/json\u0026#39;, 25 \u0026#39;headers\u0026#39;: { 26 \u0026#39;Authorization\u0026#39;: \u0026#39;Bearer \u0026#39; + token, 27 }, 28 \u0026#39;payload\u0026#39;: JSON.stringify(payload) 29 }; 30 UrlFetchApp.fetch(url, options); 31} 32 33function sendReply(replyToken, message) { 34 var url = \u0026#39;https://api.line.me/v2/bot/message/reply\u0026#39;; 35 var payload = { 36 \u0026#34;replyToken\u0026#34;: replyToken, 37 \u0026#34;messages\u0026#34;: [{ 38 \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, 39 \u0026#34;text\u0026#34;: message 40 }] 41 }; 42 var options = { 43 \u0026#39;method\u0026#39;: \u0026#39;post\u0026#39;, 44 \u0026#39;contentType\u0026#39;: \u0026#39;application/json\u0026#39;, 45 \u0026#39;headers\u0026#39;: { 46 \u0026#39;Authorization\u0026#39;: \u0026#39;Bearer \u0026#39; + token, 47 }, 48 \u0026#39;payload\u0026#39;: JSON.stringify(payload) 49 }; 50 UrlFetchApp.fetch(url, options); 51} 好了之後點擊執行▶️，你會需要授予你的程式 call API 的權限。因為你寫的程式沒有被Google驗證過所以會顯示不安全，但我相信你不會把你的帳號搞爆，對吧。執行後會看到錯誤，這是正常的，因為我們直接執行沒有給他訊息。\n3. 設定 Webhook 部屬好了之後，你會看到一個網址，請將這個部屬的網址貼到 Line Bot 的 Webhook 的地方就完成了。\n4. 測試 現在你可以在 Line 上傳送訊息給你的 Line Bot，你會看到 Line Bot 會回覆你一個思考中的動畫，等待 5 秒後，回應說「好喔」。\n結語 以上就是使用 Line Messaging API 顯示思考中動畫的方法，希望能夠對你有幫助。如果你有任何建議或問題都可以在 IG 留言，也歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技。\n參考資料: https://developers.line.biz/en/docs/messaging-api/use-loading-indicator/\n","link":"https://emtech.cc/post/line-loading/","section":"post","tags":["JavaScript","GAS","API","line"],"title":"Line bot 新 API! Messaging API 顯示思考中動畫"},{"body":"","link":"https://emtech.cc/tags/gemini/","section":"tags","tags":null,"title":"Gemini"},{"body":"Google 的 Gemini 推出了幾個月，雖然我個人覺得能力不及 GPT-4 但是每分鐘免費 60 次呼叫也太大方了吧! 還不趕快來玩一波。今天我們就來使用純 HTML 和 JavaScript 製作一個簡單的線上對話網站來與 Gemini 聊天吧!\n1. 申請金鑰 首先請你到 Google AI Studio 申請金鑰。\n你可以選擇你已經有的專案或是新建一個專案，然後點選 Create API Key。生成後請記得複製下來。\n2. 呼叫 Gemini API Gemini 很貼心有預設做好一些 SDK，但是其實我們只需要一個簡單的 HTTP 請求就可以了。完整的 cookbook 可以在 GitHub 查看。\n在我們實際開始製作之前，請讓我先簡單介紹一下 Gemini API 的使用方式。\n2.1. 問問題 以下是一個簡單的範例。\n1curl \u0026#34;https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=$GOOGLE_API_KEY\u0026#34; \\ 2 -H \u0026#39;Content-Type: application/json\u0026#39; \\ 3 -X POST \\ 4 -d \u0026#39;{ 5 \u0026#34;contents\u0026#34;: [{ 6 \u0026#34;parts\u0026#34;:[{\u0026#34;text\u0026#34;: \u0026#34;Give me python code to sort a list.\u0026#34;}] 7 }] 8 }\u0026#39; 可以看到我們只需要將問題放在 text 中，然後就可以得到回答了。\n1{ 2 \u0026#34;candidates\u0026#34;: [ 3 { 4 \u0026#34;content\u0026#34;: { 5 \u0026#34;parts\u0026#34;: [ 6 { 7 \u0026#34;text\u0026#34;: \u0026#34;```python\\n# Example list to be sorted\\nlist1 = [5, 3, 1, 2, 4]\\n\\n# Sort the list in ascending order\\nlist1.sort()\\n\\n# Print the sorted list\\nprint(list1)\\n```\u0026#34; 8 } 9 ], 10 \u0026#34;role\u0026#34;: \u0026#34;model\u0026#34; 11 }, 12 \u0026#34;finishReason\u0026#34;: \u0026#34;STOP\u0026#34;, 13 \u0026#34;index\u0026#34;: 0, 14 \u0026#34;safetyRatings\u0026#34;: [ 15 { 16 \u0026#34;category\u0026#34;: \u0026#34;HARM_CATEGORY_SEXUALLY_EXPLICIT\u0026#34;, 17 \u0026#34;probability\u0026#34;: \u0026#34;NEGLIGIBLE\u0026#34; 18 }, 19 { 20 \u0026#34;category\u0026#34;: \u0026#34;HARM_CATEGORY_HATE_SPEECH\u0026#34;, 21 \u0026#34;probability\u0026#34;: \u0026#34;NEGLIGIBLE\u0026#34; 22 }, 23 { 24 \u0026#34;category\u0026#34;: \u0026#34;HARM_CATEGORY_HARASSMENT\u0026#34;, 25 \u0026#34;probability\u0026#34;: \u0026#34;NEGLIGIBLE\u0026#34; 26 }, 27 { 28 \u0026#34;category\u0026#34;: \u0026#34;HARM_CATEGORY_DANGEROUS_CONTENT\u0026#34;, 29 \u0026#34;probability\u0026#34;: \u0026#34;NEGLIGIBLE\u0026#34; 30 } 31 ] 32 } 33 ], 34 \u0026#34;promptFeedback\u0026#34;: { 35 \u0026#34;safetyRatings\u0026#34;: [ 36 { 37 \u0026#34;category\u0026#34;: \u0026#34;HARM_CATEGORY_SEXUALLY_EXPLICIT\u0026#34;, 38 \u0026#34;probability\u0026#34;: \u0026#34;NEGLIGIBLE\u0026#34; 39 }, 40 { 41 \u0026#34;category\u0026#34;: \u0026#34;HARM_CATEGORY_HATE_SPEECH\u0026#34;, 42 \u0026#34;probability\u0026#34;: \u0026#34;NEGLIGIBLE\u0026#34; 43 }, 44 { 45 \u0026#34;category\u0026#34;: \u0026#34;HARM_CATEGORY_HARASSMENT\u0026#34;, 46 \u0026#34;probability\u0026#34;: \u0026#34;NEGLIGIBLE\u0026#34; 47 }, 48 { 49 \u0026#34;category\u0026#34;: \u0026#34;HARM_CATEGORY_DANGEROUS_CONTENT\u0026#34;, 50 \u0026#34;probability\u0026#34;: \u0026#34;NEGLIGIBLE\u0026#34; 51 } 52 ] 53 } 54} 雖然很長看起來很可怕，但你只需要記得 data.candidates[0].content.parts[0].text 就是回答了。\n2.2 發送圖片 如果你想要發送圖片，只需要稍微修改 body 裡的 Json 就可以了。把圖片轉成 base64 放入即可。以下是一個 body 的範例。\n1{ 2 \u0026#34;contents\u0026#34;:[ 3 { 4 \u0026#34;parts\u0026#34;:[ 5 {\u0026#34;text\u0026#34;: \u0026#34;This image contains a sketch of a potential product along with some notes. \\ 6 Given the product sketch, describe the product as thoroughly as possible based on what you \\ 7 see in the image, making sure to note all of the product features. Return output in json format: \\ 8 {description: description, features: [feature1, feature2, feature3, etc]}\u0026#34;}, 9 { 10 \u0026#34;inline_data\u0026#34;: { 11 \u0026#34;mime_type\u0026#34;:\u0026#34;image/jpeg\u0026#34;, 12 \u0026#34;data\u0026#34;: \u0026#34;\u0026#39;$(base64 -w0 image.jpg)\u0026#39;\u0026#34; 13 } 14 } 15 ] 16 } 17 ] 18} 記得如果你要發送圖片，請記得將模型改成 gemini-pro-vision。\n1curl \u0026#34;https://generativelanguage.googleapis.com/v1beta/models/gemini-pro-vision:generateContent?key=${GOOGLE_API_KEY}\u0026#34; \\ 2 -H \u0026#39;Content-Type: application/json\u0026#39; \\ 3 -d @request.json 2.3. 討論串 聊一句不夠過癮嗎？你可以把整個對話過程發給 Gemini\n1curl \u0026#34;https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=$GOOGLE_API_KEY\u0026#34; \\ 2 -H \u0026#39;Content-Type: application/json\u0026#39; \\ 3 -X POST \\ 4 -d \u0026#39;{ 5 \u0026#34;contents\u0026#34;: [ 6 {\u0026#34;role\u0026#34;:\u0026#34;user\u0026#34;, 7 \u0026#34;parts\u0026#34;:[{ 8 \u0026#34;text\u0026#34;: \u0026#34;In one sentence, explain how a computer works to a young child.\u0026#34;}]}, 9 {\u0026#34;role\u0026#34;: \u0026#34;model\u0026#34;, 10 \u0026#34;parts\u0026#34;:[{ 11 \u0026#34;text\u0026#34;: \u0026#34;A computer is like a smart helper that can store information, do math problems, and follow our instructions to make things happen.\u0026#34;}]}, 12 {\u0026#34;role\u0026#34;: \u0026#34;user\u0026#34;, 13 \u0026#34;parts\u0026#34;:[{ 14 \u0026#34;text\u0026#34;: \u0026#34;Okay, how about a more detailed explanation to a high schooler?\u0026#34;}]}, 15 ] 16 } 2.4. 其他設定 Gemini 還有很多其他的設定，例如 max_tokens 用來設定最大回應字數，temperature 用來設定回應的多樣性等等。你甚至可以使用一些符號來啟動不同的模式。詳細的設定可以參考 Gemini API\n3. 製作線上對話網站 我們使用剛才學到的知識來製作一個簡單的線上對話網站，裡面運用了剛才所提到的連續對話功能。直接上完成程式碼，你也可以在這裡貼上你的 API 來直接體驗。\nDemo: https://elvismao.com/code/gemini/\n1\u0026lt;!-- @format --\u0026gt; 2 3\u0026lt;!DOCTYPE html\u0026gt; 4\u0026lt;html lang=\u0026#34;zh-Hant\u0026#34;\u0026gt; 5 \u0026lt;head\u0026gt; 6 \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; 7 \u0026lt;title\u0026gt;Gemini API 聊天 Demo\u0026lt;/title\u0026gt; 8 \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/showdown@2.1.0/dist/showdown.min.js 9\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 10 \u0026lt;style\u0026gt; 11 * { 12 padding: 0; 13 margin: 0; 14 box-sizing: border-box; 15 } 16 body { 17 font-family: system-ui, -apple-system, BlinkMacSystemFont, 18 \u0026#34;Segoe UI\u0026#34;, Roboto, Oxygen, Ubuntu, Cantarell, \u0026#34;Open Sans\u0026#34;, 19 \u0026#34;Helvetica Neue\u0026#34;, sans-serif; 20 padding: 2rem; 21 display: flex; 22 flex-direction: column; 23 height: 100dvh; 24 } 25 #chatHistory { 26 flex-grow: 1; 27 } 28 .inputs { 29 display: flex; 30 } 31 #messageInput { 32 flex-grow: 1; 33 } 34 .inputs \u0026gt; * { 35 height: 2rem; 36 padding: 0.5rem; 37 } 38 #chatHistory \u0026gt; div { 39 margin-top: 1rem; 40 } 41 \u0026lt;/style\u0026gt; 42 \u0026lt;/head\u0026gt; 43 \u0026lt;body\u0026gt; 44 \u0026lt;h1\u0026gt;Gemini API 聊天 Demo\u0026lt;/h1\u0026gt; 45\u0026lt;p\u0026gt;毛哥EM製作 \u0026lt;a href=\u0026#34;https://emtech.cc/post/gemini-html\u0026#34;\u0026gt;教學文章\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; 46 \u0026lt;div id=\u0026#34;chatHistory\u0026#34;\u0026gt; 47 \u0026lt;!-- Chat history will appear here --\u0026gt; 48 \u0026lt;/div\u0026gt; 49 \u0026lt;div class=\u0026#34;inputs\u0026#34;\u0026gt; 50 \u0026lt;input type=\u0026#34;password\u0026#34; id=\u0026#34;apiKey\u0026#34; placeholder=\u0026#34;API Key\u0026#34; /\u0026gt; 51 \u0026lt;input 52 type=\u0026#34;text\u0026#34; 53 id=\u0026#34;messageInput\u0026#34; 54 placeholder=\u0026#34;Type your message here...\u0026#34; 55 /\u0026gt; 56 \u0026lt;button onclick=\u0026#34;sendMessage()\u0026#34;\u0026gt;Send\u0026lt;/button\u0026gt; 57 \u0026lt;/div\u0026gt; 58 \u0026lt;script\u0026gt; 59 const converter = new showdown.Converter(); 60 let thread = []; 61 function sendMessage() { 62 var apiKey = document.getElementById(\u0026#34;apiKey\u0026#34;).value; 63 const message = document.getElementById(\u0026#34;messageInput\u0026#34;).value; 64 document.getElementById(\u0026#34;chatHistory\u0026#34;).innerHTML += 65 \u0026#34;\u0026lt;div\u0026gt;\u0026lt;div class=\u0026#39;author\u0026#39;\u0026gt;You:\u0026lt;/div\u0026gt;\u0026#34; + message + \u0026#34;\u0026lt;/div\u0026gt;\u0026#34;; 66 thread.push({ 67 role: \u0026#34;user\u0026#34;, 68 parts: [{ text: message }], 69 }); 70 console.log(apiKey); 71 fetch( 72 \u0026#34;https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=\u0026#34; + 73 apiKey, 74 { 75 method: \u0026#34;POST\u0026#34;, 76 headers: { 77 \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json\u0026#34;, 78 }, 79 body: JSON.stringify({ 80 contents: thread, 81 }), 82 } 83 ) 84 .then(response =\u0026gt; response.json()) 85 .then(data =\u0026gt; { 86 const msg = data.candidates[0].content.parts[0].text; 87 document.getElementById(\u0026#34;chatHistory\u0026#34;).innerHTML += 88 \u0026#34;\u0026lt;div\u0026gt;\u0026lt;div class=\u0026#39;author\u0026#39;\u0026gt;Bot:\u0026lt;/div\u0026gt;\u0026#34; + 89 converter.makeHtml(msg) + 90 \u0026#34;\u0026lt;/div\u0026gt;\u0026#34;; 91 thread.push({ 92 role: \u0026#34;model\u0026#34;, 93 parts: [ 94 { 95 text: msg, 96 }, 97 ], 98 }); 99 }) 100 .catch(error =\u0026gt; { 101 console.error(\u0026#34;Error:\u0026#34;, error); 102 document.getElementById(\u0026#34;chatHistory\u0026#34;).innerHTML += 103 \u0026#34;\u0026lt;div\u0026gt;\u0026lt;div class=\u0026#39;author\u0026#39;\u0026gt;Bot:\u0026lt;/div\u0026gt;Error: \u0026#34; + 104 error + 105 \u0026#34;\u0026lt;/div\u0026gt;\u0026#34;; 106 }); 107 } 108 \u0026lt;/script\u0026gt; 109 \u0026lt;/body\u0026gt; 110\u0026lt;/html\u0026gt; 你可以看到我們使用了 fetch 來發送請求，然後將回應顯示在網頁上。其中設定了變數 thread 來保存對話內容，這樣我們就可以連續對話了。由於 Gemini 回覆的格式是 Markdown，所以我們使用了 showdown 來將 Markdown 轉換成 HTML。加上一些簡單的 CSS，我們就完成了一個簡單的線上對話網站。\n從這一段冷到發寒的對話中，我們可以看到 Gemini 的回答是有根據前面的對話繼續的。下一步我們來把它跟 Line 聊天機器人串再一起吧!\n結語 以上就是使用 Gemini API 製作線上對話網站的方法，希望你能從中學到一些東西。如果你有任何建議或問題都可以在 IG 留言，也歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技。\n","link":"https://emtech.cc/post/gemini-api/","section":"post","tags":["JavaScript","API","Gemini"],"title":"Gemini API 快速入門: 來用 Js 做一個線上聊天吧"},{"body":"","link":"https://emtech.cc/tags/tampermonkey/","section":"tags","tags":null,"title":"Tampermonkey"},{"body":"這個腳本能在 GitHub 頁面上添加一個按鈕，點擊後即可複製倉庫名（owner/repo）\n背景 有的時候想要複製 GitHub 倉庫名，所以每次都要手動選取，然後複製。如果是這樣還可以接受，但是...\n每次複製都會複製到一堆換行和空白，久而久之真的很躁。因次我寫了這個腳本，可以在 GitHub 頁面上倉庫名旁邊添加一個按鈕，點擊後即可複製倉庫名（owner/repo）。\n安裝 1. 安裝 Tampermonkey 如果你的瀏覽器還沒有安裝 Tampermonkey，可以到 Tampermonkey 官網下載並安裝。\n2. 安裝腳本 點擊 這裡 進入 Greasy Fork 安裝頁面，點擊安裝即可。\n使用 安裝完成後，打開 GitHub 頁面，你會看到倉庫名旁邊多了一個複製按鈕，點擊即可複製倉庫名（owner/repo）。\n結語 這個腳本是我自己寫的，如果你有任何建議或問題都可以在 IG 留言，也歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技。\n","link":"https://emtech.cc/post/greasy-copy-github-repo-name/","section":"post","tags":["Tampermonkey","JavaScript"],"title":"Tampermonkey 腳本 - 一鍵複製 GitHub 倉庫名"},{"body":"","link":"https://emtech.cc/tags/ios/","section":"tags","tags":null,"title":"ios"},{"body":"","link":"https://emtech.cc/categories/%E7%A7%91%E6%8A%80%E6%96%B0%E8%81%9E/","section":"categories","tags":null,"title":"科技新聞"},{"body":"在今天 2024 年 5 月 7 日的蘋果發布會 Apple Events 上，他們帶來全新的 iPad Pro、更大的 iPad Air，以及全新的 Apple Pencil Pro。讓我們來看看這次的發布會有哪些亮點，以及沒有在影片中提到的重點。\n全新 iPad Pro：超薄、超強 今年的 iPad Pro 不僅在外觀上出奇地輕薄易攜，搭載了全新的 Apple M4 晶片(直接跳過 M3)，使其性能達到了新的高度。讓我們來看看這款iPad Pro的亮點：\n外觀設計： 13 吋 iPad Pro 的厚度為 5.1 公釐，目前蘋果歷史以來最薄的產品，比 iPod 還薄。不過 11 吋 iPad Pro 的厚度為 5.3 公釐，稍微厚一點。 Ultra Retina XDR 顯示器： OLED 一層不夠亮，所以蘋果疊了兩層 OLED。最高 1600 尼特亮度。1TB和2TB版可升至奈米玻璃，減少眩光。 支援 eSIM、Wi-Fi 6E、5G、藍牙 5.3。 USB： Thunderbolt 4 接口可以傳輸解析度最高可達 6K，還能連結各種儲存裝置。理論最高可達 40Gb/s。 *** Apple M4 晶片：** 3 奈米公藝，CPU 提升 50%，GPU 提升四倍，AI 加速器提升 70%。蘋果還有特別強調它專門處理 AI 的 NPU，強調他們在 A11 就已經有了，性能也是所有 AI 筆電中最強的。 材質： 100% 再生鋁金屬。 後鏡頭： 1200 萬像素廣角相機，4K 的 ProRes 錄影。 前鏡頭： 橫向 1200 萬像素超廣角前置相機，原深感測相機系統。 容量： 256GB ~ 2TB 的儲存空間。 支援 Apple Pencil Pro、Apple Pencil (USB-C)。 顏色： 灰色、黑色。 iPad Air：變大了 有 11 吋與全新 13 吋 iPad Air。 M2 晶片，與上一代相比，速度提升近 50%。 支援 eSIM、Wi-Fi 6E、5G、藍牙 5.3。 支援 Apple Pencil Pro、Apple Pencil (USB-C)。 顏色： 藍色、灰色、金色、粉色。 容量： 128GB ~ 1TB 的儲存空間。 Apple Pencil Pro：可以捏，可以轉，會震動 捏它：隨即打開新的面板，方便你快速切換工具、線條粗細與顏色。 轉它： 全新陀螺儀讓你轉動 Apple Pencil Pro，就可精準控制各式硬筆和筆刷工具。 震動： 當你按它捏它時給你點感覺。 懸浮功能： 以前覺得這個功能很雞肋，但是如果搭配陀螺儀會非常方便。想像你使用螢光筆或是水彩這種比較粗的筆刷，旋轉不同角度粗細和方向都不同，這時候懸浮功能就非常好用了。 尋找我的 Pencil： 這麼貴又這麼容易掉，必須的。 Apple Pencil Pro定價為4390元，Apple Pencil 2價格相同，不過Apple Pencil Pro只限定M4版本iPad Pro和M2版本iPad Air使用。\n巧控鍵盤 還是一樣很貴 全新 14 鍵功能鍵 觸控板加大，會震動 軟體 新的 iOS 並沒有被發布，但是蘋果在發布會上展示了一些新的軟體功能。包括 Apple Pencil Pro 與 Procreate 的結合，Final Cut Pro 可以即時查看四台 iPhone 鏡頭畫面並進行焦距及光線調整等。且這次發布會蘋果開始會使用 AI 這個詞了。雖然蘋果在人工智慧或深度學習我認為一直都是不差的，但是大多是整合到功能和你的生活裡面讓你無法察覺，因此沒有那麼高調，不管是客製化聲音模型 (設定內建)、影片去背 (Final Cut Pro)、音樂分出不同樂器 (Logic Pro) 等等，搭配強大的 Apple silicon 晶片，其實都是 AI 的應用。\n這次的發布會只有 41 分鐘，手語老師一樣很熱情。以上就是我整理出來的重點，iPad Pro 技術上雖然的確是很有創意且突破，但我的 iPad Pro 第三代目前還堪用。而一直使用副廠筆的我確實有被 Apple Pencil Pro 驚艷到，可以轉還會震動，期待看到第三方 App 的使用，以及這些產品在市場上的表現。最後歡迎在 Instagram 和 Google 新聞追蹤毛哥 EM 資訊密技。\n資料及圖片來源：蘋果官網\n","link":"https://emtech.cc/post/apple-event-2024-may/","section":"post","tags":["ios"],"title":"蘋果 2024 5月發布會懶人包 - Apple Pencil Pro 有陀螺儀還會震動，iPad Pro 減掉瀏海"},{"body":"","link":"https://emtech.cc/tags/python/","section":"tags","tags":null,"title":"Python"},{"body":"","link":"https://emtech.cc/tags/raspberry-pi/","section":"tags","tags":null,"title":"Raspberry Pi"},{"body":"","link":"https://emtech.cc/tags/tensorflow/","section":"tags","tags":null,"title":"Tensorflow"},{"body":"本文將教你如何在 Raspberry Pi (樹莓派) 上安裝 Tensorflow 以及 Jupyter Notebook。\n背景 最近在做動作識別的專案，原本都是在 Google Colab 跑，想說可以在最近買的 Raspberry Pi 5 上跑看看。最後成果意外的不錯，識別和訓練速度雖然比不上 Google Colab，但對於小模型來說上傳上去再下載還不如在本地直接跑快。\n當時安裝時我就天真的打入 pip install tensorflow...\n好吧看來沒有那麼簡單。過程中踩到了一些坑，今天就來整理一下安裝的過程。\n教學 1. 建立虛擬環境 回看一下剛才的錯誤，其實他是在提醒你因為有些套件可以用 apt 安裝，也可以用 pip 安裝。因此建議你安裝虛擬環境。\n首先我們要建立一個虛擬環境，請先建立並進入一個資料夾。\n1mkdir tensorflow 2cd tensorflow 接著建立虛擬環境。\n1python3 -m venv venv 之後每次要啟動虛擬環境只要輸入以下指令即可。\n1source venv/bin/activate 2. 安裝 Tensorflow 直接使用 pip 安裝 Tensorflow 會遇到問題，因此我們要手動安裝。請你先到這個 GitHub 頁面查看版本對照表：\nhttps://github.com/PINTO0309/Tensorflow-bin/#usage\n這裡節錄一小段，你可以看到不同的版本對應的 Python 版本和 Raspberry Pi 版本。\nDevice OS Distribution Architecture Python ver Note RaspberryPi3/4,PiZero Ubuntu 21.04/Debian/RaspberryPiOS Hirsute/Bullseye aarch64 / armv8 3.9.x 64bit, glibc2.33/glibc2.31 RaspberryPi3/4 Ubuntu 22.04 Jammy aarch64 / armv8 3.10.x 64bit, glibc2.35 RaspberryPi4/5,PiZero Debian/RaspberryPiOS Bookworm aarch64 / armv8 3.11.x 64bit, glibc2.36 可以看到我們的 Raspberry Pi 5 要的是 Python 3.11.x，因此我們到 release 下載最新發布的 tensorflow-X.X.0.post1-cp311-none-linux_aarch64.whl 檔案就可以了。\n如果你是使用瀏覽器開啟你可以直接點擊連結下載，如果是在終端機上可以使用 wget 下載。\n1wget https://github.com/PINTO0309/Tensorflow-bin/releases/download/v2.15.0.post1/tensorflow-2.15.0.post1-cp311-none-linux_aarch64.whl 接著安裝。(請注意版本號可能會有所不同，請以你下載的檔案為主)\n1pip install tensorflow-2.15.0.post1-cp311-none-linux_aarch64.whl 2pip install tensorflow 接下來如果你需要的話可以安裝 keras。在安裝 keras 時你可能會遇到 Scipy 安裝失敗的問題，因此你一樣可以先手動安裝。\n1wget https://www.piwheels.org/simple/scipy/scipy-1.2.1-cp35-cp35m-linux_armv7l.whl 2pip install scipy-1.2.1-cp35-cp35m-linux_armv7l.whl 3pip install scipy 接著安裝 keras。\n1pip install keras 這樣就完成了 Tensorflow 的安裝。你可以使用以下指令測試是否安裝成功。\n1python -c \u0026#39;import tensorflow as tf; print(tf.__version__)\u0026#39; 2python -c \u0026#39;import keras; print(keras.__version__)\u0026#39; 如果你看到版本號就代表安裝成功。\n3. 安裝 Jupyter Notebook 接下來我們要安裝 Jupyter Notebook，主要氏為了方便 Demo 和預覽圖表。\n首先建議你先刪除使用 apt 安裝的 Jupyter Notebook。\n1sudo apt remove jupyter-notebook 接著安裝 Jupyter Notebook。\n1pip install jupyter 安裝完成後你可以使用以下指令啟動 Jupyter Notebook。\n1jupyter notebook 這樣就完成了啦! 你的瀏覽器應該會自動開啟 Jupyter Notebook，以下是我運行我的模型並繪製圖表的結果。可以看到整個過程只花費了 4 毫秒。\n之後每次要啟動 Tensorflow 和 Jupyter Notebook 只要輸入以下指令即可。\n1cd 資料夾/ 2source .venv/bin/activate 3jupyter notebook 希望這篇文章能夠幫助到你。如果你有任何問題都可以在 IG 留言，也歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技。\n","link":"https://emtech.cc/post/rp-tensorflow/","section":"post","tags":["Raspberry Pi","Tensorflow","Python","機器學習"],"title":"如何在 Raspberry Pi 上安裝 Tensorflow?"},{"body":"","link":"https://emtech.cc/tags/%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92/","section":"tags","tags":null,"title":"機器學習"},{"body":"","link":"https://emtech.cc/tags/node.js/","section":"tags","tags":null,"title":"Node.js"},{"body":"GitHub Action 是 GitHub 提供的一個 CI/CD 服務，可以讓你在 GitHub 上自動化你的工作流程，幫你生成文件、測試安全性、部署應用程式等等。而 GitHub Marketplace 則是一個集成了 GitHub Action 的地方，你可以在這裡找到各種各樣的 Action 來幫助你的專案。在這篇文章中，我將教你如何自製 GitHub Action 並上架至 Marketplace。\n今天我的範例是要使用 Node.js 製作一個可以將 GitHub Repository 中的 issue 同步到 Notion 的 Action。\n成果倉庫: GitHub-issue-2-Notion\n溫馨提醒 我們今天因為目標是要上架至 Marketplace，所以步驟相對於製作一般的 Action 比較不一樣一點。\n步驟一：創建一個 Repository 首先，你需要在 GitHub 上創建一個 Repository (點我)。這個 Repository 將用來存放你的 Action 代碼，以及一些必要的文件。我們會使用 Node.js 來實現這個 Action。\n.gitignore 建議不要選擇 Node，因為這樣會忽略 node_modules 資料夾。\n步驟二：撰寫 Action 創建 Action 設置文件 在你的 Repository 中，創建一個 action.yml 文件，這個文件是用來描述你的 Action 的。這裡是一個簡單的例子：\n1name: Sync GitHub Issues to Notion 2author: Elvis Mao 3description: A simple tool to sync GitHub issues to Notion beautifully. 4branding: 5 color: gray-dark 6 icon: activity 7inputs: 8 repo: 9 description: \u0026#39;The GitHub repository name.\u0026#39; 10 required: true 11 NOTION_API_KEY: 12 description: \u0026#39;The Notion API key.\u0026#39; 13 required: true 14 NOTION_DATABASE_ID: 15 description: \u0026#39;The ID of the Notion database.\u0026#39; 16 required: true 17runs: 18 using: \u0026#39;node20\u0026#39; 19 main: \u0026#39;index.js\u0026#39; 這個文件中包含了 Action 的名稱、作者、描述、輸入參數、運行環境等等。你可以根據你的需求修改這個文件。branding 中的 color 和 icon 是用來設置 Action 在 Marketplace 上的顏色和圖標的。你可以在 GitHub Actions Branding Cheat Sheet 這個實用的工具中找到更多的顏色和圖標。\n創建 Action 代碼 在你的 Repository 中，創建一個 index.js 文件，這個文件是用來實現你的 Action 的。這裡是我節錄的一部分代碼：\n1const core = require(\u0026#34;@actions/core\u0026#34;); 2// const request = require(\u0026#34;request\u0026#34;); 3// const { markdownToBlocks } = require(\u0026#34;@tryfabric/martian\u0026#34;); 4 5async function main() { 6 const repo = core.getInput(\u0026#34;repo\u0026#34;); 7 const notionToken = core.getInput(\u0026#34;NOTION_API_KEY\u0026#34;); 8 const notionDatabaseId = core.getInput(\u0026#34;NOTION_DATABASE_ID\u0026#34;); 9 10 // ... 11} 12 13main().catch(error =\u0026gt; { 14 console.error(error); 15 process.exit(1); 16}); 這個文件中最上面引入了 @actions/core 這個庫，這樣就可以安全的讀取使用者設定的 GitHub Action Secrets 了。裡面可能是你的 API Key 或者其他敏感信息。這裡我們使用了 core.getInput 來讀取使用者設定的參數。底下我因為程式需要呼叫 API 所以引用了 request 以及 @tryfabric/martian 這兩個庫。你可以根據你的需求修改，因為不是必要的所以我註解掉了。\n底下我們主要的程式放在 main 函數，裡面我們讀取了使用者設定的參數，然後進行一些操作。最後我們使用 main().catch 來捕獲異常，並且退出程序。\n創建 Readme 文件 建議在 Repository 中，創建一個 README.md 文件，這個文件是用來描述你的 Action 的。讓其他人在使用你的 Action 的時候可以知道該如何使用。以下是我的範例\n1# GitHub-issue-2-Notion 2 3A simple tool to sync GitHub issues to Notion beautifully 4 5一個簡單的工具，將 GitHub 的 issue 優雅的同步到 Notion 6 7![screenshot](image.png) 8 9## Features 10 11- [x] Sync issue to Notion 12- [x] Sync State to Notion 13- [x] Sync labels to Notion 14- [x] Sync URL to Notion 15- [x] Sync content to Notion with full markdown support 16- [x] Won\u0026#39;t repeat recreating the same issue 17- [x] Update status if exists 這樣我們的 Action 就完成了。請將整個 Repository 推送到 GitHub 上 (當然，你的權杖和測試文件記得 ignore)。\n部屬到 Marketplace 創建 Release 在你的 Repository 中，點擊 Releases，然後點擊 Create a new release。\n在這裡，你可以填寫 Release 的標題和描述，然後點擊 Publish release。\n創建 Release 請勾選 Publish this Action to the GitHub Marketplace 這個選項。你會需要同意一些條款，然後 GitHub 會確認你的文件有設置正確，最後填入 tag 版本號以及標題，然後點擊 Publish release 就完成上架囉。\n這樣你的 Action 就上架到 Marketplace 了。\n使用 在你的 Repository 中，創建一個 .github/workflows 文件夾，然後創建一個 .yml 文件。檔案名稱可以隨意，比如說我取叫 sync.yml。這個文件是用來描述你的工作流程的。這裡是一個簡單的例子：\n1name: Sync issues to Notion 2 3on: 4 issues: 5 types: [opened, edited, deleted, closed, reopened] 6 workflow_dispatch: 7jobs: 8 sync: 9 runs-on: ubuntu-latest 10 steps: 11 - name: Notion GitHub Issues Automation 12 uses: Edit-Mr/GitHub-issue-2-Notion@main 13 with: 14 repo: ${{ github.repository }} 15 NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }} 16 NOTION_DATABASE: ${{ secrets.NOTION_DATABASE_ID }} 這個文件中包含了工作流程的名稱、觸發條件、工作、步驟等等。這裡我們使用了 Edit-Mr/GitHub-issue-2-Notion@main 來引入我們的 Action。\n觸發條件中包含了 issues 和 workflow_dispatch，這樣當有 issue 被打開、編輯、刪除、關閉、重新打開的時候，或者手動觸發的時候，這個工作流程就會被觸發。常見的觸發條件還有 push、pull_request、schedule 等等，你可以在 GitHub Actions Documentation 中找到更多的觸發條件。\nwith 中包含了我們的參數。我們讀取了 repo 名稱並帶入使用者設定的 Secrets 來保護我們的敏感信息。你可以根據你的需求修改這個文件。\n這樣我們的 Action 就完成了。你可以在你的 Repository 中的 Actions 頁面中看到這個工作流程的運行情況。\n希望這篇文章能夠幫助到你。如果你有任何問題都可以在 IG 留言，也歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技。\n","link":"https://emtech.cc/post/create-github-action/","section":"post","tags":["GitHub","Node.js"],"title":"自製 GitHub Action 並上架至 Marketplace"},{"body":"","link":"https://emtech.cc/categories/%E7%89%B9%E5%88%A5%E4%BC%81%E5%8A%83/","section":"categories","tags":null,"title":"特別企劃"},{"body":" 毛哥EM資訊密技自 2020 開始於網路上分享資訊，至今已經有 4 年的時間。在這段時間裡，我嘗試利用身為學生有限的時間和精力，分享近期的專案與我認為實用的技巧。然而，由於個人原因，我決定停更一段時間。\n非常感謝各位長期的支持，但由於中電會的事務繁忙，中電喵機器人還在 beta 階段，官網從上一屆拖到這一屆，到現在 RWD 還沒弄好。\n導火線 毛哥EM資訊密技的內容以技術類文章為主，不像主流媒體能夠靠著聳動標題與八卦內容獲得大量流量，因此廣告收入近乎於 0。導致雖然 jf 金萱七分糖字體超級好看，但是我還是買不下手。因此讓我陷入了極度的憂鬱...\n好了不鬧了，愚人節快樂！為了慶祝這個特別的日子，我把整個部落格除了這篇文章以外的所有字體都換成了 justfont 今天推出的諧靈附體。而具體情況就是:\n嗯。對。這就是我支持開源專案的方式。\n而我的確也會停更一段時間，希望大概是一兩個禮拜吧。我看這個部落格主題不爽很久了，但當年會被我看上眼也就代表他沒有那麼糟糕。為了督促我自己趕快做完主題，我在完成更新之前都不會把這個字型改回來，希望能讓我在 SEO 被 Google 與網友列入黑名單之前趕快把新的主題做好。\n感覺不到痛苦嗎? 回到首頁看看吧。\n最後感謝 justfont 推出這麼多優質的字體，祝大家愚人節快樂！\n","link":"https://emtech.cc/post/2024-stop-updating/","section":"post","tags":["ios"],"title":"停更通知"},{"body":"你是否常常煩惱每次更換頭像每個社群平台都需要一個個更換？或著是你是一位程式發者想要自動獲的頭像不用一個個抓？今天我要來和你分享 Gravatar（全球通用頭像），以及介紹他的使用方式。\nGravatar 簡介 每個 Gravatar 個人檔案都和一個電子郵件地址連結。在網路上各個平台使用該電子郵件登入後，就會自動帶入你的完整個人檔案。Gravatar 的支援網站範圍非常廣泛，平常使用的 WordPress、GitHub、Slack、甚至是 OpenAI 都支援。今天這篇文章最後會以 Jitsi Meet 的手機 App 做示範。\n如何註冊和使用Gravatar 註冊 Gravatar 帳號：首先，你需要在 Gravatar 官方網站（https://en.gravatar.com/）上註冊一個帳號。這個過程非常簡單，只需要提供你的電子郵件地址。 驗證電子郵件地址：Gravatar 不需要設定密碼，只會向你的電子郵件地址發送一封驗證郵件來登入。\n上傳頭像：一旦你註冊了 Gravatar 帳號，接下來你需要上傳你的頭像。在 Gravatar 帳號頁面中，你會看到一個選項可以上傳你的頭像。\n關聯電子郵件地址：其實這樣就完成了。但接下來，你可以將你在不同網站上使用的電子郵件地址與 Gravatar 帳號關聯起來並添加更多自我介紹來製作電子名片，也可以拿來證明你的真實社群媒體帳號。\n如何在 Jitsi 設定 Gravatar？ 在大多數需要等入 Email 的網站 Gravatar 都不需要額外做設定，但像是 Jitsi Meet 這種不需要登入就可以使用的程式就需要額外輸入一下 Email了。\n在 Jitsi 中你只需點擊設定並進入簡介分頁就可以輸入 Gravatar 電子郵件。\n手機版也一樣。\n希望這篇文章能夠幫助到你。如果你有任何問題都可以在 IG 留言，也歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技。\n","link":"https://emtech.cc/post/gravatar/","section":"post","tags":["iOS"],"title":"如何設定全球通用頭像 Gravatar？以 Jitsi 為例"},{"body":"","link":"https://emtech.cc/categories/%E7%B6%B2%E7%AB%99%E5%88%86%E4%BA%AB/","section":"categories","tags":null,"title":"網站分享"},{"body":"最近我一直在玩我的樹莓派，想要在上面架設一個檔案下載網站。但是沒有 SSL 憑證每次都會被瀏覽器警告說網站不安全，所以我決定使用 Certbot 申請一個免費的 SSL 憑證。在這篇文章中，我將分享如何使用 Certbot 申請免費的 SSL 憑證，並使用 DNS 驗證。\n什麼是 Certbot？ Certbot 是一個由 Electronic Frontier Foundation (EFF) 開發的免費、開源的工具，它可以幫助你在網站上安裝 SSL 憑證。Certbot 支援的憑證類型有 Let's Encrypt 和 ACME (Automatic Certificate Management Environment)。\n為什麼要使用 SSL 憑證？ **簡單來說就是讓你的網址從 http:// 變成 https://。**使用SSL 憑證可以幫助你的網站加密數據，保護用戶的隱私。此外，Google 也將使用 SSL 憑證作為搜索排名的一個指標，所以使用 SSL 憑證也有助於提高你的網站在搜索引擎上的排名。\n如何使用 Certbot 申請免費的 SSL 憑證？ 安裝 Certbot Certbot 可以在大多數的 Linux 發行版上安裝，今天就都用我的樹莓派來示範，但是你也可以在 Ubuntu、Debian、CentOS、Fedora、Arch Linux 上安裝。\n1sudo apt-get update 2sudo apt-get install certbot 申請 SSL 憑證 Certbot 支援多種驗證方式，包括 HTTP 驗證、DNS 驗證、TLS-ALPN-01 驗證等。在這裡我們使用 DNS 驗證，這是一種通過 DNS 記錄驗證你對域名的控制權的方式。這條命令中的 --manual 表示我們要手動驗證，--preferred-challenges dns 表示我們要使用 DNS 驗證，-d example.com -d *.example.com 表示我們要申請的域名。\n1sudo certbot certonly --manual --preferred-challenges dns -d example.com -d *.example.com 這時的輸出如下:\n1em@raspberrypi:/ssl $ sudo certbot certonly --manual --preferred-challenges dns -d \u0026#39;*.elvismao.com\u0026#39; 2Saving debug log to /var/log/letsencrypt/letsencrypt.log 3Enter email address (used for urgent renewal and security notices) 4 (Enter \u0026#39;c\u0026#39; to cancel): 輸入你的郵箱地址，然後按下 Enter 鍵。\n1- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 2Please read the Terms of Service at 3https://letsencrypt.org/documents/LE-SA-v1.3-September-21-2022.pdf. You must 4agree in order to register with the ACME server. Do you agree? 5- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 6(Y)es/(N)o: Y Certbot 會提示你閱讀 Let's Encrypt 的服務條款，輸入 Y 表示你同意這些條款。(相信你一定有認真讀過對吧？)\n1- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 2Would you be willing, once your first certificate is successfully issued, to 3share your email address with the Electronic Frontier Foundation, a founding 4partner of the Let\u0026#39;s Encrypt project and the non-profit organization that 5develops Certbot? We\u0026#39;d like to send you email about our work encrypting the web, 6EFF news, campaigns, and ways to support digital freedom. 7- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 8(Y)es/(N)o: N Certbot 會問你是否願意與 EFF 分享你的郵箱地址並訂閱電子報，這裡我是輸入 N 表示你不願意。\n1Account registered. 2Requesting a certificate for *.elvismao.com 3 4- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 5Please deploy a DNS TXT record under the name: 6 7_acme-challenge.elvismao.com. 8 9with the following value: 10 118rcxNKH2aeNdcghnnweypQ6lEYWSxVhEmrHKpetOT74 12 13Before continuing, verify the TXT record has been deployed. Depending on the DNS 14provider, this may take some time, from a few seconds to multiple minutes. You can 15check if it has finished deploying with aid of online tools, such as the Google 16Admin Toolbox: https://toolbox.googleapps.com/apps/dig/#TXT/_acme-challenge.elvismao.com. 17Look for one or more bolded line(s) below the line \u0026#39;;ANSWER\u0026#39;. It should show the 18value(s) you\u0026#39;ve just added. 19 20- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 21Press Enter to Continue Certbot 會提示你在 DNS 記錄中添加一條 TXT 記錄，這條記錄的名稱是 _acme-challenge.elvismao.com，值是 8rcxNKH2aeNdcghnnweypQ6lEYWSxVhEmrHKpetOT74。你需要在你的 DNS 服務商的控制面板中添加這條記錄，然後按下 Enter 鍵。\n這裡我使用 Cloudflare 作為我的 DNS 服務商，所以我在 Cloudflare 的控制面板中添加了一條 TXT 記錄。\n1Successfully received certificate. 2Certificate is saved at: /etc/letsencrypt/live/elvismao.com/fullchain.pem 3Key is saved at: /etc/letsencrypt/live/elvismao.com/privkey.pem 4This certificate expires on 2024-06-08. 5These files will be updated when the certificate renews. 當你在 DNS 服務商的控制面板中添加了 TXT 記錄後，按下 Enter 鍵，Certbot 會提示你成功接收到了 SSL 憑證，並告訴你憑證的保存位置。\n檔案介紹 fullchain.pem：這是你的 SSL 憑證，它包含了你的域名和中間證書。 chain.pem：這是中間證書。 cert.pem：這是你的域名憑證。 privkey.pem：這是你的私鑰，它用來加密和解密數據。 通常只會需要用到 fullchain.pem 和 privkey.pem 這兩個檔案。\n自動更新 SSL 憑證 Let's Encrypt 的 SSL 憑證有效期只有 90 天，所以你需要定期更新你的 SSL 憑證。你可以使用 Certbot 的 renew 命令來更新你的 SSL 憑證。\n1sudo certbot renew 你可以使用 crontab 來設置定時任務，定期更新你的 SSL 憑證。\n1sudo crontab -e 如果你是第一次開啟 crontab，它會提示你選擇一個編輯器，我選擇了 vim，你可以選擇你熟悉的編輯器。\n然後添加一條定時任務。只需要在文件的最後添加一條定時任務即可。\n10 0 1 * * certbot renew 這條定時任務表示每個月的 1 號 0 點 0 分更新 SSL 憑證。\n下一步 當你成功申請到了 SSL 憑證後，你就可以在你的網站上使用這個憑證了。你可以在你的網站配置文件中添加 SSL 憑證的路徑，然後重啟你的網站服務。\n希望這篇文章能夠幫助到你。如果你有任何問題都可以在 IG 留言，也歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技。\n","link":"https://emtech.cc/post/certbot/","section":"post","tags":["DNS"],"title":"如何使用 Certbot 申請免費的 SSL 憑證，並使用 DNS 驗證?"},{"body":"","link":"https://emtech.cc/tags/notion/","section":"tags","tags":null,"title":"Notion"},{"body":" Notion 是一個出色的筆記軟體，但是有一個問題是它的資料庫即使是教育方案依舊無法批量輸出 PDF。這對於我來說非常不方便，因為每次打辯論都需要輸出六七十份頁面，每頁都要花個 15 秒才能下載，還要解壓縮，合併 PDF，實在有夠麻煩! 因此我花了幾天的時間使用 python 寫了一簡單的小工具。只需要給連結就能一次輸出整個資料庫的所有文件，並合併成一份 PDF。過程中使用 Google Colab 的雲端計算，因此不會消耗你的電腦資源及網路。\n程式原理 由於 Notion 並沒有提供資料庫輸出 API 的文檔，因此我透過監聽封包以及不斷的測試找到了每次點擊輸出看它轉個幾十秒時背後到底發生了甚麼事。以下是我們的程式流程：\n使用官方 API 獲得資料庫分頁列表 使用 Space ID, 頁面 ID, 及 cookie 提出匯出請求，並記錄回應 token 每五秒呼叫 API 確認下載狀態。 完成匯出時，搭配 Cookie 下載 PDF 合併 PDF (可選) 刪除所有 PDF (可選) 使用方法 首先請你開啟此 Google Colab 專案。執行 Google Colab 專案會需要登入 Google 帳號。\n設定環境變數 在開始下載之前，請取得以下資料並複製到左邊的 Secret 分頁。標題括號內為環境變數名稱，接下來我們要複製的網址與金鑰們請放到「值」裡面。儲存在這裡的值都不會公開，只有你看得到，不用擔心。\n1. 取得資料庫 (database) 開啟資料庫連結並複製網址。記得要點擊 view database 進入整個畫面都是資料庫的頁面喔。\n請你複製網址連結，並填入 Google Colab 的 Secret。\n2. 取得 Space ID 請你對頭像點擊右鍵複製圖片連結，並填入 Google Colab 的 Secret。\n3. 取得 API Token 請至 Notion Developers 取得 API，輸入基本資料並選擇要應用的 Workspace。\n請你複製這一串 Integration Token，並填入 Google Colab 的 Secret。\n生成完 API 之後，記得要邀請你剛才創建的機器人。點擊右上角的三個點，Connect to，並選擇剛才創建的機器人。\n4. 取得 Cookie 點擊 F12 (Cmd + Opt + I) 開啟開發者工具，進入開發者工具。選擇儲存空間，並複製 cookie token_v2 的值，以及 file_token 的值，並填入下方。\nNotion! 啟動! 接下來你可以一步步點擊執行，並等待程式完成。程式完成後會在左邊的檔案區域看到一個 combined_pdf.pdf，這就是你的資料庫的所有文件合併成的 PDF。並且會有一個 PDF 資料夾。裡面都是你輸出的頁面，且按照檔案名稱命名。\n如果你不想要一步步執行，你也可以點擊 \u0026gt; 縮小一鍵全部執行。再打開 console 察看進度。\n由於 Notion 生成 PDF 需要時間，因此你可能需要等待一段時間。不過不用擔心，如果程式執行時還沒下載好會自動等待 5 秒後再試一次，直到所有文件都下載完成。\n最後的合併 PDF 是可選的，程式可以幫你按照下載時間順序合併成 combined_pdf.pdf。如果你不需要合併，可以不用執行最後底下的程式。\n下載 對檔案點兩下或點擊右鍵，並選擇下載即可保存到本地。\n以上就是我今天的分享，希望能夠幫助正在努力的你。歡迎在 Instagram 和 Google 新聞追蹤毛哥 EM 資訊密技，若有任何問題歡迎在在 Instagram 私訊我。\n我是毛哥 EM，讓我們下次再見。\n","link":"https://emtech.cc/post/notion-database/","section":"post","tags":["Notion","Python"],"title":"Notion 資料庫如何免費批量輸出 PDF，並且合併?"},{"body":"","link":"https://emtech.cc/series/","section":"series","tags":null,"title":"Series"},{"body":"","link":"https://emtech.cc/series/%E5%88%A5%E8%AA%AA%E6%88%91%E6%95%99%E7%9A%84%E7%B3%BB%E5%88%97/","section":"series","tags":null,"title":"別說我教的系列"},{"body":"","link":"https://emtech.cc/tags/%E8%87%AA%E8%A3%BD/","section":"tags","tags":null,"title":"自製"},{"body":"在這篇文章中，我要教你如何將 Google 行事曆輕鬆加入你的Apple日曆中，方便你隨時掌握校園或者活動動態。讓我們開始吧！\n步驟一：找到行事曆 首先請你找到學校或其他組織的行事曆，通常會放在首頁，且絕大部分是使用Google日曆。\n步驟二：複製網址 你會看到右下角有一個添加行事曆的按鈕，不過點擊之後會添加到你的Google行事曆而不是iPhone的，因此我們只需要複製這個連結。你可以直接右鍵複製或是點開連結馬上複製網址。\n以西苑高中為例：複製到的網址如下\n1https://calendar.google.com/calendar/render?cid=sysh.tc.edu.tw_iq8pt1qet88ps9ifm6l3cabl6s%40group.calendar.google.com 步驟三：修改網址 不過這個網址沒辦法被加入 Apple 行事曆，我們需要稍微修改一下。請你先複製剛才網址 cid= 後面的 ID，然後貼在這一串裡面\n1https://calendar.google.com/calendar/ical/剛才的ID/public/basic.ics 比如說西苑高中就是:\n1https://calendar.google.com/calendar/ical/sysh.tc.edu.tw_iq8pt1qet88ps9ifm6l3cabl6s%40group.calendar.google.com/public/basic.ics 步驟四：新增訂閱行事曆 在你的iPhone或iPad上，打開Apple日曆應用程式。這是預設安裝在iOS裝置上的應用程式。點擊畫面下方的「行事曆」標籤，接著點擊右上角的「新增行事曆」。在這裡，選擇「訂閱行事曆」。\n步驟五：貼上網址 在這一步，將剛才修改玩的網址貼上。確認後，你可以選擇你喜歡的標示顏色。\n完成！ 恭喜你，現在你已經成功將學校行事曆加入你的Apple日曆中了！你可以透過日曆應用程式隨時查看活動和行事。你可以使用搜尋來塞選活動。\n希望這篇文章能夠幫助到你。如果你有任何問題都可以在 IG 留言，也歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技。\n","link":"https://emtech.cc/post/subscribe-alendar/","section":"post","tags":["iOS","自製"],"title":"教學：將學校行事曆輕鬆加入 Apple 日曆"},{"body":"","link":"https://emtech.cc/tags/arduino/","section":"tags","tags":null,"title":"Arduino"},{"body":"","link":"https://emtech.cc/tags/esp32/","section":"tags","tags":null,"title":"ESP32"},{"body":"你有沒有在遠端想要控制電腦，但是電腦沒有開機? 或著是享受一回到家電腦已經開好了的爽快。於是你研究如何使用 Wake On Lan，但是發現一定要用有線網路不能用 Wi-Fi? 看不到狀態就算了有時候還會失效?\n今天，我就要來和你分享如何使用 ESP32 加入 Homekit，讓你可以透過 iPhone 開機電腦和查看狀態。\nAndroid 能使用嗎? 我們要使用的函式庫是 Homespan，它支援的是 Homekit 而不是 Matter 協議，因此可能無法在安卓裝置使用。你可以尋找其他函式庫或著替代解決方案。\n原理 讓電腦開機的原理很簡單，就是把按鈕按下就可以了。(廢話) 我們只要讓開機的 pin 腳短路就會傳送開機訊號，所以不管是按鈕、開關、甚至是用螺絲起子碰一下都可以讓他開機。而我們要用一個電晶體來控制它的開關。而讀取狀態也很簡單，只需要讓原本的指示 LED 與 Esp-32 並聯即可。\n當然，Homekit 並沒有「開機按鈕」這種裝置，也沒有「電腦狀態感測器」。所以我們要騙和 Homekit 解釋這兩個分別是「燈泡開關」以及「室內溫度」。\n友善提醒 如果你不是一位創客不想要 DIY 的話，在網路上面可以找到直接類似功能的產品。或著是使用智慧開關，並在 BIOS 設定「通電時開機」即可。\n需要的材料 ESP32 杜邦線 電晶體 麵包板 當然，你可以使用任意你手邊可連接 Wi-Fi 的開發板，不過需要自行修改程式喔。\n組裝 首先，請你確認主機板上面的腳位。可以查詢主機板的說明書，或者是直接看上面的文字標示。以我的老電腦 ASUS B150 pro 為例。PWR_LED 就是電源的指示燈 (Power LED)，PWR_SW 和 RESET 分邊是開關機鍵 (Power Switch) 與重新開機鍵。\n拔下原本杜邦線 我們會用到開機按鈕、重新啟動按鈕、和電源指示燈。確認好之後因為我們希望原本的開機鍵和按鈕指示燈都還是可以用，所以在拔下來這些母頭的杜邦線之後我們用公對公的杜邦線連起來讓它等一下可以插上麵包板上。建議可以用標籤或麥克筆標示一下等一下比較不會搞混。\n連結電腦接口至麵包板 拔下來之後我們用公對公的杜邦線依序把電腦上的接口連接到麵包板上，接下來比較好操作。\n連接 LED 指示燈 我們先插電源指示燈，因為比較簡單。只需與原本的 led 並排接到 esp32 上面即可。\n連接開機與重開機按鍵 首先請確認你的電晶體腳位，不同的型號方向不太一樣。接著按照圖片的方式完成接線即可。當 ESP-32 輸出高電壓時按鈕就會通路，相當於按下按鈕。\n實際接線不會用到這麼多的杜邦線，我有盡量都用直角和不要重疊壤他看起來比較清楚。綠色板子左到右分別代表開機按鈕、GND、重開機按鈕、GND、電源指示燈、指示燈 GND。ESP32 上到下分別是插 14、12、13、GND。\n兩顆按鈕的 GND 有可能是共用的。如果你的電腦開機後按鈕失效，理論上把兩顆按鈕的 GND 連接在一起。\n這樣硬體組裝的部分，ESP32 建議可以放在主機裡面，然後找洞讓供電的 USB 線通過即可。\n最難的部分已經完成囉。\n燒錄程式 接下來我們要來把程式燒錄至 ESP32:\n請先從官網下載並安裝 Arduino IDE，點開一直下一步即可。 在開始燒錄之前我們要先來安裝 ESP32 驅動函式庫和 Homekit 函式庫。請你開啟軟體點擊左上角的「檔案」，並選擇「偏好設置」。 在下面有一排可以讓你自行輸入函式庫網址的輸入框，請你貼上以下網址: 1https://dl.espressif.com/dl/package_esp32_index.json 4. 請你進入 BOARDS MANAGER 並搜尋 esp32。安裝 Espressif 開發的的 ESP-32 套件。 5. 請點擊左邊第三個的圖書標誌並搜尋 HomeSpan 並安裝。 6. 貼上以下程式碼:\n1#include \u0026#34;HomeSpan.h\u0026#34; 2 3struct PC : Service::LightBulb { 4 int buttonPin; 5 SpanCharacteristic *PCPower; 6 PC(int buttonPin) 7 : Service::LightBulb() { 8 PCPower = new Characteristic::On(); 9 this-\u0026gt;buttonPin = buttonPin; 10 pinMode(buttonPin, OUTPUT); 11 } 12 boolean update() { 13 digitalWrite(buttonPin, PCPower-\u0026gt;getNewVal()); 14 return (true); 15 } 16}; 17 18struct DEV_TempSensor : Service::TemperatureSensor { 19 SpanCharacteristic *temp; 20 DEV_TempSensor() 21 : Service::TemperatureSensor() { 22 temp = new Characteristic::CurrentTemperature(0); 23 temp-\u0026gt;setRange(0, 1); 24 } 25 26 void loop() { 27 if (temp-\u0026gt;timeVal() \u0026gt; 5000) { 28 temp-\u0026gt;setVal(digitalRead(14)); 29 } 30 } 31}; 32 33void setup() { 34 pinMode(14, INPUT); 35#if ESP8266 36 Serial.begin(115200, SERIAL_8N1, SERIAL_TX_ONLY); 37#else 38 Serial.begin(115200, SERIAL_8N1); 39#endif 40 homeSpan.begin(Category::Bridges, \u0026#34;HomeSpan 橋梁\u0026#34;); 41 new SpanAccessory(); 42 new Service::AccessoryInformation(); 43 new Characteristic::Identify(); 44 new SpanAccessory(); 45 new Service::AccessoryInformation(); 46 new Characteristic::Identify(); 47 new Characteristic::Name(\u0026#34;電腦狀態\u0026#34;); 48 new DEV_TempSensor(); 49 new SpanAccessory(); 50 new Service::AccessoryInformation(); 51 new Characteristic::Name(\u0026#34;電腦電源\u0026#34;); 52 new Characteristic::Manufacturer(\u0026#34;毛哥EM\u0026#34;); 53 new Characteristic::FirmwareRevision(\u0026#34;1.0\u0026#34;); 54 new Characteristic::Identify(); 55 new PC(12); 56 new SpanAccessory(); 57 new Service::AccessoryInformation(); 58 new Characteristic::Name(\u0026#34;電腦重新啟動\u0026#34;); 59 new Characteristic::Manufacturer(\u0026#34;毛哥EM\u0026#34;); 60 new Characteristic::FirmwareRevision(\u0026#34;1.0\u0026#34;); 61 new Characteristic::Identify(); 62 new PC(13); 63} 64 65void loop() { 66 homeSpan.poll(); 67} 設定 COM Port，請你點擊左上角的輸入選擇，接著選擇你的 ESP32 的 COM Port。你可以把 ESP-32 拔掉再插上來看看哪個消失再出現就是了。 最後，請你點擊左上角的「上傳」按鈕 (往右的箭頭)，並等待燒錄完成即可。如果上傳失敗請點擊 ESP32 上面的 BOOT 按鈕，拔掉重新插上電源並再次上傳。 設定 設定 Wi-Fi 還沒有完喔，先不要急著把電腦關機測試，我們還需要設定一下 Wi-Fi 才能使用。\n請你點擊右上角的放大鏡開啟 Serial Port，並確定傳輸速率是 115200。如果你有看到出現一些文字代表你已經成功了。\n接著，請你輸入 w 並按下 Enter 進入設定模式。你會看到 ESP32 開始搜尋並列出周圍的 Wi-Fi 名稱。輸入你的 Wi-Fi SSID 左邊的編號並按下 Enter，再輸入 Wi-Fi 密碼並按下 Enter。如果你有看到連接成功就代表你已經成功了。\n設定 Homekit 請你在 iPhone 或 iPad 開啟家庭 APP，接著點擊右上角的 + 號，新增裝置。選擇我沒有條碼，並輸入 8 位數的 PIN 碼。\n1466-37-726 這樣就完成囉!你可以編輯程式來添加更多功能或修改 pin 碼。\n結論 現在你可以即時看到電腦的開關機狀態。開機時會顯示 1 度，關機時會顯示 0 度。(嚴格來說是電源指示 LED 有沒有點亮)\n將電源開關開啟就會開機或關機了。記得開啟開關就是相當於按下按鈕。所以如果你一直開著就相當於長按開關，如果按太久就會強制關機。\n按電源鍵關機會傷電腦嗎? 不會。即使是按下電腦電源關機還是走正常關機流程，所以並不會傷害電腦，不過你要確定的是關機前你的文件有先存檔喔。\n當然，不建議你使用智能插座直接斷電來關機。\n希望這篇文章能夠幫助到你。如果你有任何問題都可以在 IG 留言，也歡迎在 Instagram 和 Google 新聞追蹤毛哥 EM 資訊密技。\n","link":"https://emtech.cc/post/homekit-pc/","section":"post","tags":["iOS","自製","Arduino","ESP32"],"title":"用 iPhone 開機電腦和查看狀態 - 使用 ESP32 加入 Homekit"},{"body":"","link":"https://emtech.cc/tags/firefox/","section":"tags","tags":null,"title":"Firefox"},{"body":"Firefox 有著卓越的性能及隱私保護，加上他有許多實用的開發者工具，一直是我的愛用的瀏覽器。然而，Firefox 目前還沒有內建中文翻譯功能，因此，今天我要來和你分享如何不透過擴充功能，只需要透過「書籤」就能夠在 Firefox 一鍵翻譯網站。\n翻譯網站的方法 使用以下的方法，可以在任何瀏覽器上使用。而且因為沒有使用擴充功能，所以不會有隱私問題，也不會影響你電腦的性能。\n1. 新增書籤 首先，我們要新增一個書籤，點擊右上角的「書籤」按鈕，選擇「新增書籤」。這個書籤可以是任何網站 (比如說這個網站)，因為我們接下來會修改它。建議把它放在書籤列，這樣就可以一鍵翻譯網站了。\n2. 編輯書籤 接下來，我們要編輯剛剛新增的書籤。找到剛剛新增的書籤，點擊右鍵，選擇「編輯」。\n3. 修改網址 在編輯書籤的視窗中，我們要修改網址。把網址改成以下的程式，編輯顯示的標題 (如:翻譯) 然後按下「儲存」。\n1javascript:window.location.href=`https://translate.google.com.tw/translate?sl=auto\u0026amp;tl=zh-TW\u0026amp;u=${window.location.href}` 4. 翻譯網站 現在，我們就可以使用這個書籤來翻譯網站了。你可以到任意外國語言的網站並點擊剛剛新增的書籤，就會自動翻譯網站了。\n結論 透過這個方法，我們可以在 Firefox 上一鍵翻譯網站。而且因為沒有使用擴充功能，所以不會有隱私問題，也不會影響你電腦的性能。\n希望這篇文章能夠幫助到你。如果你有任何問題都可以在 IG 留言，也歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技。\n","link":"https://emtech.cc/post/firefox-translate/","section":"post","tags":["Firefox","自製"],"title":"Firefox 如何翻譯網站?"},{"body":"","link":"https://emtech.cc/tags/windows/","section":"tags","tags":null,"title":"windows"},{"body":"Microsoft Store 是 Windows 內建的應用程式商店。理論上它應該是一個很方便的東西，能夠安全的下載應用程式。但是實際上他的 Bug 很多，很多時候會因為一些奇怪的原因無法使用。最常見的就是 Windows Update 的錯誤會導致 Microsoft Store 無法使用。因此這篇文章將會教你如何不透過 Microsoft Store 安裝 Microsoft Store 的應用程式。\n步驟 1: 找到你要的應用程式 你可以在 Microsoft Store 應用程式或著是官網搜尋你要的應用程式。找到之後複製網址。\n如果是在應用程式中找到的，請點擊分享並選擇複製連結。\n步驟 2: 找到安裝包 接著你要到 Microsoft Store 安裝包下載器。在網頁中貼上剛剛複製的網址，然後點擊Generate。\n步驟 3: 下載安裝包 你會看到底下出現很多軟體供你下載，我們需要幾個安裝檔。請記得安裝檔的附檔名可能是個 .appxbundle、.appx、.maix、或著 .msixbundle。.BlockMap 可以不用下載。\n軟體安裝檔 首先是軟體安裝檔。檔案名稱通常會有軟體的名稱，例如 Spotify 叫做 SpotifyAB.SpotifyMusic_1.225.1011.0_x64__zpdnekdrzrea0.appx。\n你會看到有很多不同的檔案適用於不同架構的電腦(如 x86、x64、ARM)。下載你的電腦架構的版本當中數字最大最新的版本即可。\n我的電腦是什麼架構? 如果你不知道你的電腦是什麼架構的，請按下Win+R並輸入msinfo32。在系統摘要說明中你可以看到系統類型。如果是x64-based PC請下載x64的版本，如果是x86-based PC請下載x86的版本。如果你的電腦是 ARM 架構的，請下載 ARM 的版本。\n要下載請按住 Ctrl 鍵並點擊軟體安裝檔的連結。或是點擊右鍵選擇在新分頁開啟。\n依賴套件 有一些軟體會需要安裝依賴套件。例如 Spotify 就需要安裝\nMicrosoft.WindowsAppRuntime.1.2_2000.802.31.0_x64__8wekyb3d8bbwe.msix Microsoft.VCLibs.140.00_14.0.32530.0_x64__8wekyb3d8bbwe.appx 建議都可以下載，在安裝時比較沒有問題。一樣你會看到有很多不同的檔案適用於不同架構的電腦(如 x86、x64、ARM)。下載你的電腦架構的版本當中數字最大最新的版本即可。\n小提示 你可以使用 Ctrl+F 搜尋你要的版本。比如說上面的範例我搜尋 x64 來找到我要的版本。\n步驟 4: 安裝 安裝的方式有兩種，一種是雙擊安裝檔，另一種是使用 PowerShell 安裝。建議先安裝安裝依賴套件，再軟體安裝檔。\n雙擊安裝檔 雙擊安裝檔，然後按照指示安裝即可。\n使用 PowerShell 安裝 有一些軟體在安裝時會被要求暫時關閉某些會衝突的軟體，而這些軟體通常都是 Windows 內建的，有時候甚至是 Microsoft Store 本身。\n因此建議使用 PowerShell 安裝。首先請以使用者管理員身分打開 PowerShell。你可以在開始選單中找到它，或是在任何地方按下Win+X並選擇Windows 終端機 (管理員)。\n使用 PowerShell 安裝。這樣可以避免安裝失敗。指令是:\n1Add-AppxPackage -Path \u0026#34;檔案路徑\u0026#34; 你可以對檔案點擊右鍵並選擇複製路徑，然後在 PowerShell 中按下右鍵貼上路徑。\n例如:\n1Add-AppxPackage -Path \u0026#34;C:\\Users\\EM\\Desktop\\SpotifyAB.SpotifyMusic_1.225.1011.0_x64__zpdnekdrzrea0.appx\u0026#34; 貼上後按下 Enter 鍵你就會看到安裝的進度。如果經過安裝完甚麼都沒有發生，沒有出現錯誤碼，那就是安裝成功了。\n小提示 你可以使用 Tab 鍵來自動補全路徑。\n批量安裝 如果你要安裝多個應用程式，你可以把安裝檔放在同一個資料夾中，然後在 PowerShell 中使用 cd 指令切換到那個資料夾。然後使用 Get-ChildItem 指令列出所有檔案，再使用 Add-AppxPackage 指令安裝。\n例如我在桌面新增一個資料夾，把所有安裝檔放進去，然後在 PowerShell 中輸入:\n1cd \u0026#34;C:\\Users\\EM\\Desktop\\新增資料夾\u0026#34; 2Get-ChildItem | Add-AppxPackage 步驟 5: 完成 安裝完成後你就可以在開始選單中找到你的應用程式了。\n結論 這篇文章教你如何不透過 Microsoft Store 安裝 Microsoft Store 的應用程式。其實在幾年前我就有遇到這個問題，但沒想到過了這麼久這個問題還是存在，且中文部落格還沒有相關教學。希望這篇文章能夠幫助到你。\n歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技。如果你有任何問題，都可以在 IG 留言或私訊我。\n","link":"https://emtech.cc/post/microsoft-store/","section":"post","tags":["終端機","Windows"],"title":"如何不透過 Microsoft Store 安裝 Microsoft Store 的應用程式"},{"body":"","link":"https://emtech.cc/tags/%E7%B5%82%E7%AB%AF%E6%A9%9F/","section":"tags","tags":null,"title":"終端機"},{"body":"","link":"https://emtech.cc/tags/css/","section":"tags","tags":null,"title":"CSS"},{"body":"不知不覺，三十天的鐵人賽就要結束了。一開始還覺得時間很漫長，但到了二十幾天之後我開始發現時間不多了，十分珍惜每一次能夠和大家分享的機會。\n這三十天我們做了什麼？ 在前面九天的文章中，我們直擊了許多人不敢去碰，但是對於要做出許多效果又是必備的技術。我們先複習 Flex 讓我們能隨心所欲切出任何我們想要的版面，用 @keyframes 與 transition 做出動畫效果，並認識開啟顏色新世界的 filter、color:color()、以及 mix-blend-mode 等等屬性。\n在接下來的十幾天，我們製作了許多令人驚豔的效果。每一天專案的背後都會放入一些實用的思維，語法的應用，以及一些小技巧。希望用效果的視覺包裝可以讓大家更容易理解與覺得有趣，並且能夠在未來的開發中運用。\n而到了第二十天的【Day20 GPU! 啟動! - 淺談 CSS3 硬體加速】 我們開始探討在技術上的選擇，以及如何讓網頁的動畫更加順暢，並帶出更多較為複雜的效果。\nDay 22 JavaScript 乱薍覼釠亂碼效果\n而到了最後五天，我們談到了一些網站最常見的效果，像是漢堡選單，滑動到特定位置時，會有動畫效果的 Animate On Scroll，以及網站最常見的輪播效果等。應用我們所學的語法讓這一些效果製作起來變得簡單但又十分獨一無二。\n而到昨天我們回到了鐵人賽的頁面，並用我們所學的語法重現了 header 的太空效果。\n身為一個高二的普通學生，平常能寫文章的時間真的有限，但是我還是盡量讓每一天的文章可以新鮮有趣，並且能夠讓新手容易閱讀，但老手又不會覺得無聊，保留一點深度。雖然這三十天裡沒有人留言或是 Like，但希望路過的你們能夠找到點你要的東西，或至少得到些快樂。\n礙於時間和篇幅，我們沒有辦法把每一天的語法都探討得很深入，如果你有任何問題都可以留言告訴我，我會盡量回答。而如果有幸這個系列出成書，我會把每一天的效果和語法都做更詳細的介紹，並且加入更多的實用技巧。\n背後的血與淚 這三十天的內容可以說是我對於我這一年來做的大小專案的回顧。有一些最後有成功發布，有一些效果在計畫在過程中就被捨棄了。每一個特效的背後都有一個故事，可能是數天燒腦的 Debug，或著是我和甲方溝通的血與淚。比如說【Day5 載入中… Animation-delay】的鍵盤特效是今年 DaptKey 團隊送我的快捷鍵盤，我回禮的使用心得文章加上這個載入特效。\n平常寫文章的流程 在開始前其實我有先備幾篇半成的文章打在 Notion，原本想說都是 Markdown 語法，直接貼到iT邦就可以了，但是後來發現 Notion 的 Markdown 語法和iT邦的不太一樣，而且圖片也是一個很大的問題，所以最後我是用 VSCode 寫完文章，上傳到我的部落格，最後再貼到iT邦上。\n因為開賽才注意到這個問題，所以重新整理文章花了我一點時間。基本上前二十天都是每天用下課、午休、和等公車的時間用學校的筆電撰寫。一天可以寫一篇左右，假日吃一點之前的庫存。但到後面基本上就是每天和12點賽跑，因為我還是希望每篇文章能夠完整的呈現，盡量把容易不懂的地方都解釋清楚。\n在這三十天我有好幾天晚上做夢夢到忘記發文章被淘汰。\n背後的朋友 在這三十天裡，有幾個朋友一直在背後幫助我。我一直都沒有機會提到他們，因此我希望在這裡能夠感謝他們。\n第一個是剛才提到的 VSCode，我在寫文章的時候都是用 VSCode。他要插入圖片還蠻方便的，只需要複製圖片，在文中間貼上就會自動複製到資料夾並用 Markdown 插入。\n截圖有的時候我會使用 Windows 內建的 Win + Shift + S，但大多數是使用 Firefox 內建的截圖工具，因為他在截圖時可以完美的擷取某個元素。\n不過還沒完，因為截圖下來都是 PNG 或著是 JPEG，而我不管是製作網頁還是寫文章都會習慣轉檔成 WebP 格式，讓你們載入更快速。因為太常轉檔了因此我用 python 寫了一個轉檔工具叫做 NiceFormat ，只需要把圖片拖進去就可以轉檔，而且還可以一次轉好幾張。如果把 WebP 圖片拖進去就會轉回 PNG。\n而 GIF 我是先使用 OBS 錄製，再用線上工具 cloudconvert 轉檔。\n最後是有好幾篇文章我有畫示意圖，大部分是使用 Adobe Illustrator 繪製，也有一些在 iPhone 上完成是使用 Procreate 以及 Curve (前 Vectornator) 繪製。\nDay9 給你五彩斑斕的黑: mix-blend-mode - 混和模式比較\nDay10 永無止境跑馬燈 - 不同螢幕 相同速度\n當然最後也要感謝這台學校借我的筆電。這台文書機真的被我操的很慘，一下跑 Blender 一下跑 Illustrator。早餐三明治放在底下畫完就差不多可以出爐了\n三十天的旅程差不多到一段落，\n還能走多遠就不在我能掌握。\n蓋上螢幕，回到現實...\n下禮拜還要段考，客戶還在等我交稿，比賽馬上就要到。\n我是毛哥EM，讓我們MWC 2023 大會再見。\n","link":"https://emtech.cc/post/2023ironman-30/","section":"post","tags":["HTML","CSS","JS"],"title":"Day30 三十天的血與淚 - 密技"},{"body":"","link":"https://emtech.cc/tags/html/","section":"tags","tags":null,"title":"HTML"},{"body":"","link":"https://emtech.cc/tags/js/","section":"tags","tags":null,"title":"JS"},{"body":"","link":"https://emtech.cc/series/%E4%B8%8D%E7%94%A8%E5%BA%AB-%E4%B9%9F%E8%83%BD%E9%85%B7-%E7%8E%A9%E8%BD%89-css-js-%E7%89%B9%E6%95%88/","section":"series","tags":null,"title":"不用庫 也能酷 - 玩轉 CSS \u0026 Js 特效"},{"body":"相信大家對於這個頁面都不陌生吧。這是我們2023 iThome 鐵人賽的首頁。我覺得他的粒子特效和地球很酷，所以我們今天就來看看怎麼做吧。\n以下是今天我們的目標。為了版面乾淨我省略了上面的文字，只留下熊俠、標題、粒子特效、和地球。且為了讓他不要太長我有稍微縮小了一點。\nHTML 架構 上面 header 我們放了兩張圖片，一個是熊俠，一個是標題。下面的 section 我們放了五個 div，它們分別是\n粒子特效 粒子特效 粒子特效 光線 地球 1\u0026lt;header\u0026gt; 2 \u0026lt;img src=\u0026#34;https://ithelp.ithome.com.tw/static/2023ironman/img/event/kv_deco_front.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; 3 \u0026lt;img src=\u0026#34;https://ithelp.ithome.com.tw/static/2023ironman/img/event/logo-ironmankv.svg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; 4\u0026lt;/header\u0026gt; 5\u0026lt;section class=\u0026#34;sec_eff\u0026#34;\u0026gt; 6 \u0026lt;div class=\u0026#34;stars\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 7 \u0026lt;div class=\u0026#34;stars2\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 8 \u0026lt;div class=\u0026#34;stars3\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 9 \u0026lt;div class=\u0026#34;horizon\u0026#34;\u0026gt; 10 \u0026lt;div class=\u0026#34;glow\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 11 \u0026lt;/div\u0026gt; 12 \u0026lt;div class=\u0026#34;earth\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 13 \u0026lt;/div\u0026gt; 14\u0026lt;/section\u0026gt; header 版面 裡面兩張圖片用 flex 置中。背景放圖片上面疊上一層漸層。大小設為 cover 確保圖片有填滿。最後再調整一下上方的 padding 讓它看起來比較好看。\n背景圖片寫前面的會疊在上面，寫後面的會疊在下面。\n官網在背景圖片設定 background-size 時因為被 background 屬性預設的 auto 值影響，所以使用了 !important，不過其實只需要打在後面就可以了。\n1header { 2 display: flex; 3 justify-content: center; 4 align-items: center; 5 flex-direction: column; 6 height: 60vh; 7 background: linear-gradient( 8 to bottom, 9 rgba(17, 55, 126, 0) 0%, 10 rgba(17, 55, 126, 0) 35%, 11 rgba(17, 55, 126, 1) 100% 12 ), 13 url(https://ithelp.ithome.com.tw/static/2023ironman/img/kv_bg.jpg) no-repeat 14 center; 15 background-size: cover; 16 padding-top: 3.5rem; 17} 18header img { 19 width: 37%; 20} 宇宙 我們先弄一個宇宙\n1 background: #11377e; 2 min-height: 40vh; 3 position: relative; 然後做一束高光，並進行定位。原理是先搞一個橢圓形\n1.horizon { 2 position: absolute; 3 width: 160%; 4 height: 70%; 5 background: #038bff; 6 left: -30%; 7 bottom: -20%; 8 border-radius: 100%/100%; 9} 然後再模糊一下\n1filter: blur(30px); 關於置中我們之前有提到，可以把 left 設為 (寬度-100)/2，這樣就不需要再用 transform 或是 margin-left 來調整位置了。\n複習: Day17 css.wav - 純 CSS 波浪進度條\n再多加幾個光點\n1.horizon:before { 2 content: \u0026#34;\u0026#34;; 3 position: absolute; 4 width: 81.25%; 5 height: 70%; 6 background: #51afff; 7 -webkit-filter: blur(30px); 8 opacity: 0.6; 9 margin-left: 9.375%; 10 border-radius: 100%/100%; 11} 12 13.horizon:after { 14 content: \u0026#34; \u0026#34;; 15 position: absolute; 16 width: 32%; 17 height: 20%; 18 border-radius: 650px/350px; 19 background: #b0daff; 20 -webkit-filter: blur(30px); 21 opacity: 0.5; 22 margin-left: 34%; 23 border-radius: 100%/100%; 24} 25 26.horizon .glow { 27 position: absolute; 28 width: 100%; 29 height: 100%; 30 background: #215496; 31 -webkit-filter: blur(200px); 32 opacity: 0.7; 33 top: -10%; 34 border-radius: 100%/100%; 35} 地球 加上一點內陰影讓他看起來更有立體感。\n1.earth { 2 position: absolute; 3 width: 200%; 4 height: 100%; 5 background: #2c4790; 6 left: -50%; 7 bottom: -50%; 8 border-radius: 100%/100%; 9 box-shadow: inset 0px 0px 62px 20px rgba(60, 105, 138, 0.85); 10} 星空 星空效果 iThome 沒有使用什麼 particles.js。我們打開 FireFox Dev Tools 的動畫分頁可以看出原來這是一個長150秒的往上移動 CSS 動畫。\n1@keyframes animStar { 2 from { 3 transform: translateY(0px); 4 } 5 6 to { 7 transform: translateY(-2000px); 8 } 9} 而裡面是使用陰影製作放入一堆星星座標，這些點點會隨著動畫往上移動。我們放三個 div 來做三層星空，而裡面再使用 ::before 和 ::after 來做更多的星星。以下是一個星星大概的樣子。\n1.stars { 2 width: 1px; 3 height: 1px; 4 background: transparent; 5 box-shadow: 1665px 905px #fff, 1973px 1300px #fff, 873px 1598px #fff, 6 1380px 1879px #fff, 1694px 73px #fff, 84px 1196px #fff, 64px 203px #fff, 7 1153px 637px #fff, 1123px 586px #fff, 1522px 1014px #fff, 585px 991px #fff... 8} 好啦結合在一起完成了，我們來看看成果吧。\nhttps://codepen.io/edit-mr/pen/OJrGmyW\n1\u0026lt;header\u0026gt; 2 \u0026lt;img src=\u0026#34;https://ithelp.ithome.com.tw/static/2023ironman/img/event/kv_deco_front.png\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; 3 \u0026lt;img src=\u0026#34;https://ithelp.ithome.com.tw/static/2023ironman/img/event/logo-ironmankv.svg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; 4\u0026lt;/header\u0026gt; 5\u0026lt;section class=\u0026#34;sec_eff\u0026#34;\u0026gt; 6 \u0026lt;div class=\u0026#34;stars\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 7 \u0026lt;div class=\u0026#34;stars2\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 8 \u0026lt;div class=\u0026#34;stars3\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 9 \u0026lt;div class=\u0026#34;horizon\u0026#34;\u0026gt; 10 \u0026lt;div class=\u0026#34;glow\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 11 \u0026lt;/div\u0026gt; 12 \u0026lt;div class=\u0026#34;earth\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 13 \u0026lt;/div\u0026gt; 14\u0026lt;/section\u0026gt; 1* { 2 padding: 0; 3 margin: 0; 4 box-sizing: border-box; 5} 6body { 7 overflow: hidden; 8} 9header { 10 display: flex; 11 justify-content: center; 12 align-items: center; 13 flex-direction: column; 14 height: 60vh; 15 background: linear-gradient( 16 to bottom, 17 rgba(17, 55, 126, 0) 0%, 18 rgba(17, 55, 126, 0) 35%, 19 rgba(17, 55, 126, 1) 100% 20 ), 21 url(https://ithelp.ithome.com.tw/static/2023ironman/img/kv_bg.jpg) no-repeat 22 center; 23 background-size: cover; 24 padding-top: 3.5rem; 25} 26header img { 27 width: 37%; 28} 29section { 30 padding: 0; 31 background: #11377e; 32 height: 40vh; 33 position: relative; 34} 35 36.stars { 37 width: 1px; 38 height: 1px; 39 background: transparent; 40 box-shadow: 1665px 905px #fff, 1973px 1300px #fff, 873px 1598px #fff, 41 1380px 1879px #fff, 1694px 73px #fff, 84px 1196px #fff, 64px 203px #fff, 42 1153px 637px #fff, 1123px 586px #fff, 1522px 1014px #fff, 585px 991px #fff, 43 919px 475px #fff, 1304px 1012px #fff, 41px 405px #fff, 413px 1035px #fff, 44 964px 1719px #fff, 1297px 1968px #fff, 921px 313px #fff, 1672px 1797px #fff, 45 1936px 1414px #fff, 1330px 1893px #fff, 137px 1968px #fff, 650px 80px #fff, 46 1010px 164px #fff, 1812px 1531px #fff, 932px 1391px #fff, 1866px 1791px #fff, 47 448px 709px #fff, 1197px 361px #fff, 598px 1716px #fff, 201px 1385px #fff, 48 619px 1008px #fff, 399px 594px #fff, 1920px 400px #fff, 1191px 1610px #fff, 49 38px 1305px #fff, 1585px 1996px #fff, 82px 1248px #fff, 1718px 1511px #fff, 50 1911px 1385px #fff, 432px 429px #fff, 877px 1753px #fff, 1942px 1041px #fff, 51 1179px 1237px #fff, 803px 873px #fff, 1349px 1953px #fff, 716px 396px #fff, 52 945px 785px #fff, 727px 1451px #fff, 1609px 1074px #fff, 729px 1982px #fff, 53 1600px 263px #fff, 1759px 1512px #fff, 1647px 1963px #fff, 476px 567px #fff, 54 1233px 1450px #fff, 409px 289px #fff, 868px 635px #fff, 1742px 961px #fff, 55 1667px 530px #fff, 219px 1025px #fff, 441px 380px #fff, 418px 154px #fff, 56 1481px 1171px #fff, 1356px 1389px #fff, 1542px 1527px #fff, 820px 562px #fff, 57 1550px 1619px #fff, 1844px 862px #fff, 1251px 274px #fff, 1813px 1213px #fff, 58 188px 1861px #fff, 374px 680px #fff, 9px 1554px #fff, 241px 77px #fff, 59 759px 1856px #fff, 763px 968px #fff, 1430px 304px #fff, 265px 559px #fff, 60 1780px 1729px #fff, 1818px 78px #fff, 1332px 1435px #fff, 1949px 1900px #fff, 61 521px 21px #fff, 1552px 106px #fff, 756px 764px #fff, 783px 1985px #fff, 62 1431px 776px #fff, 1320px 211px #fff, 784px 461px #fff, 1012px 1314px #fff, 63 1632px 1042px #fff, 813px 1963px #fff, 1391px 1922px #fff, 64 1929px 1748px #fff, 777px 1088px #fff, 1462px 1982px #fff, 210px 123px #fff, 65 155px 1187px #fff, 1451px 1023px #fff, 1172px 1449px #fff, 934px 1741px #fff, 66 942px 607px #fff, 387px 1425px #fff, 987px 255px #fff, 278px 1531px #fff, 67 372px 1977px #fff, 379px 710px #fff, 1219px 468px #fff, 1243px 898px #fff, 68 154px 1255px #fff, 1798px 1264px #fff, 1481px 401px #fff, 338px 1887px #fff, 69 171px 1488px #fff, 802px 685px #fff, 1px 906px #fff, 378px 1993px #fff, 70 1432px 1237px #fff, 425px 350px #fff, 1369px 244px #fff, 109px 797px #fff, 71 1851px 522px #fff, 1987px 1805px #fff, 270px 1738px #fff, 1004px 776px #fff, 72 671px 13px #fff, 61px 1461px #fff, 1846px 65px #fff, 383px 1457px #fff, 73 861px 945px #fff, 1429px 145px #fff, 784px 1077px #fff, 78px 1226px #fff, 74 285px 1185px #fff, 1933px 1295px #fff, 735px 981px #fff, 1714px 1944px #fff, 75 1443px 1623px #fff, 1176px 1887px #fff, 773px 680px #fff, 1829px 1191px #fff, 76 1154px 1509px #fff, 1005px 1941px #fff, 165px 1152px #fff, 968px 519px #fff, 77 1066px 1787px #fff, 793px 1313px #fff, 688px 1287px #fff, 462px 970px #fff, 78 1401px 959px #fff, 616px 386px #fff, 239px 1679px #fff, 1894px 575px #fff, 79 1721px 894px #fff, 410px 1883px #fff, 434px 1714px #fff, 1190px 663px #fff, 80 857px 1661px #fff, 969px 201px #fff, 987px 1321px #fff, 774px 1403px #fff, 81 416px 759px #fff, 1740px 1727px #fff, 180px 1776px #fff, 1222px 1208px #fff, 82 1628px 1226px #fff, 1626px 25px #fff, 1490px 403px #fff, 971px 228px #fff, 83 1968px 566px #fff, 642px 1329px #fff, 1190px 707px #fff, 1654px 1781px #fff, 84 570px 856px #fff, 1598px 1631px #fff, 1945px 1078px #fff, 452px 322px #fff, 85 854px 953px #fff, 117px 939px #fff, 147px 233px #fff, 1731px 1954px #fff, 86 1792px 1077px #fff, 979px 1290px #fff, 558px 1357px #fff, 26px 1194px #fff, 87 1781px 366px #fff, 1187px 1547px #fff, 1096px 1628px #fff, 1286px 275px #fff, 88 718px 728px #fff, 402px 968px #fff, 1568px 389px #fff, 602px 1986px #fff, 89 347px 260px #fff, 1319px 790px #fff, 49px 118px #fff, 1405px 1009px #fff, 90 1190px 794px #fff, 1080px 943px #fff, 488px 1273px #fff, 602px 521px #fff, 91 172px 1277px #fff, 899px 1474px #fff, 1501px 1252px #fff, 1930px 565px #fff, 92 1281px 696px #fff, 1859px 63px #fff, 717px 797px #fff, 435px 557px #fff, 93 1703px 1909px #fff, 1243px 1573px #fff, 1088px 100px #fff, 575px 1207px #fff, 94 1544px 1619px #fff, 1387px 1643px #fff, 794px 144px #fff, 542px 1224px #fff, 95 1451px 1206px #fff, 1592px 380px #fff, 478px 1121px #fff, 1487px 1294px #fff, 96 32px 823px #fff, 1982px 527px #fff, 482px 1527px #fff, 488px 852px #fff, 97 1393px 1932px #fff, 1931px 1506px #fff, 558px 299px #fff, 677px 1152px #fff, 98 1473px 1639px #fff, 1949px 515px #fff, 1353px 982px #fff, 594px 1517px #fff, 99 10px 1896px #fff, 512px 1217px #fff, 1738px 973px #fff, 614px 640px #fff, 100 86px 231px #fff, 1567px 850px #fff, 1601px 218px #fff, 1979px 276px #fff, 101 654px 922px #fff, 400px 1552px #fff, 706px 1483px #fff, 930px 882px #fff, 102 1651px 1636px #fff, 732px 1662px #fff, 1069px 1105px #fff, 1304px 561px #fff, 103 193px 1671px #fff, 906px 1141px #fff, 380px 1301px #fff, 146px 24px #fff, 104 133px 522px #fff, 1645px 502px #fff, 719px 1320px #fff, 1702px 1031px #fff, 105 792px 1457px #fff, 1668px 907px #fff, 1149px 175px #fff, 1017px 1718px #fff, 106 554px 524px #fff, 1705px 1905px #fff, 1082px 450px #fff, 1895px 848px #fff, 107 738px 689px #fff, 381px 501px #fff, 1018px 1607px #fff, 298px 499px #fff, 108 38px 142px #fff, 339px 1859px #fff, 731px 1198px #fff, 485px 768px #fff, 109 636px 1676px #fff, 768px 435px #fff, 702px 195px #fff, 1921px 5px #fff, 110 761px 1840px #fff, 552px 35px #fff, 1607px 1610px #fff, 1406px 1483px #fff, 111 1056px 672px #fff, 1564px 1621px #fff, 714px 1408px #fff, 1246px 1449px #fff, 112 186px 1871px #fff, 861px 1109px #fff, 1285px 1601px #fff, 1446px 279px #fff, 113 1526px 1055px #fff, 1277px 1963px #fff, 474px 343px #fff, 968px 1803px #fff, 114 14px 50px #fff, 1730px 1656px #fff, 1765px 1521px #fff, 1352px 375px #fff, 115 476px 1313px #fff, 52px 1780px #fff, 1502px 1264px #fff, 503px 965px #fff, 116 1134px 1713px #fff, 1978px 939px #fff, 1051px 1208px #fff, 249px 1302px #fff, 117 246px 1055px #fff, 1575px 1616px #fff, 138px 1501px #fff, 330px 667px #fff, 118 1516px 1155px #fff, 1972px 1487px #fff, 333px 341px #fff, 1895px 1578px #fff, 119 1176px 664px #fff, 454px 1200px #fff, 845px 1459px #fff, 913px 1051px #fff, 120 1642px 1485px #fff, 1652px 1038px #fff, 1530px 1160px #fff, 121 172px 1145px #fff, 1311px 1476px #fff, 1509px 937px #fff, 102px 1820px #fff, 122 1868px 1916px #fff, 1592px 1062px #fff, 1326px 46px #fff, 343px 1594px #fff, 123 1829px 1180px #fff, 1583px 786px #fff, 1359px 759px #fff, 307px 284px #fff, 124 1652px 1360px #fff, 1433px 886px #fff, 1893px 708px #fff, 1728px 352px #fff, 125 1121px 606px #fff, 1213px 540px #fff, 1581px 978px #fff, 1264px 1589px #fff, 126 1477px 600px #fff, 497px 209px #fff, 315px 1061px #fff, 1420px 1210px #fff, 127 420px 1765px #fff, 1653px 64px #fff, 822px 1625px #fff, 279px 1733px #fff, 128 1702px 964px #fff, 596px 1341px #fff, 901px 920px #fff, 1673px 781px #fff, 129 726px 1958px #fff, 141px 1661px #fff, 847px 853px #fff, 22px 1618px #fff, 130 1048px 131px #fff, 1212px 1058px #fff, 641px 1931px #fff, 223px 1919px #fff, 131 1127px 49px #fff, 154px 1429px #fff, 619px 481px #fff, 1297px 826px #fff, 132 599px 1788px #fff, 988px 1997px #fff, 1558px 563px #fff, 1822px 763px #fff, 133 1263px 1022px #fff, 1743px 1143px #fff, 759px 1320px #fff, 1146px 153px #fff, 134 329px 343px #fff, 776px 424px #fff, 988px 958px #fff, 732px 1349px #fff, 135 1262px 1329px #fff, 1970px 1937px #fff, 1485px 220px #fff, 136 1642px 1851px #fff, 967px 1320px #fff, 1976px 834px #fff, 831px 1727px #fff, 137 1247px 575px #fff, 914px 1639px #fff, 745px 609px #fff, 1620px 1933px #fff, 138 812px 1503px #fff, 18px 798px #fff, 669px 189px #fff, 1927px 332px #fff, 139 1084px 330px #fff, 1569px 1651px #fff, 1843px 1392px #fff, 985px 1337px #fff, 140 228px 260px #fff, 1115px 1455px #fff, 1489px 1404px #fff, 300px 1470px #fff, 141 1480px 567px #fff, 103px 1131px #fff, 902px 499px #fff, 1254px 1008px #fff, 142 1545px 1498px #fff, 698px 11px #fff, 1794px 1178px #fff, 1331px 984px #fff, 143 1311px 1813px #fff, 1166px 600px #fff, 353px 64px #fff, 1881px 1215px #fff, 144 70px 223px #fff, 124px 1287px #fff, 489px 758px #fff, 515px 1073px #fff, 145 925px 288px #fff, 341px 853px #fff, 67px 821px #fff, 497px 692px #fff, 146 1063px 401px #fff, 1900px 1380px #fff, 212px 1516px #fff, 369px 1477px #fff, 147 259px 674px #fff, 167px 1283px #fff, 1217px 1546px #fff, 1752px 1666px #fff, 148 1318px 605px #fff, 1015px 466px #fff, 1794px 1552px #fff, 367px 1003px #fff, 149 1459px 283px #fff, 849px 689px #fff, 1894px 79px #fff, 698px 1136px #fff, 150 550px 32px #fff, 1437px 1747px #fff, 1613px 1305px #fff, 561px 65px #fff, 151 742px 452px #fff, 890px 777px #fff, 1246px 293px #fff, 1207px 423px #fff, 152 373px 1772px #fff, 400px 360px #fff, 827px 1859px #fff, 1711px 579px #fff, 153 1815px 493px #fff, 1659px 180px #fff, 821px 293px #fff, 1958px 754px #fff, 154 575px 1385px #fff, 346px 478px #fff, 1632px 1059px #fff, 1841px 1840px #fff, 155 813px 899px #fff, 963px 48px #fff, 1357px 120px #fff, 594px 1608px #fff, 156 797px 16px #fff, 1372px 1261px #fff, 1205px 1624px #fff, 1777px 1519px #fff, 157 55px 232px #fff, 1416px 1668px #fff, 65px 494px #fff, 636px 639px #fff, 158 1166px 376px #fff, 863px 1606px #fff, 32px 160px #fff, 162px 1992px #fff, 159 282px 838px #fff, 712px 1613px #fff, 752px 126px #fff, 1809px 1834px #fff, 160 551px 775px #fff, 1832px 1796px #fff, 426px 399px #fff, 1032px 1571px #fff, 161 379px 1453px #fff, 1186px 1504px #fff, 1529px 1867px #fff, 667px 1442px #fff, 162 140px 1797px #fff, 857px 1938px #fff, 1760px 1655px #fff, 880px 742px #fff, 163 1674px 1773px #fff, 1718px 776px #fff, 439px 1401px #fff, 1002px 1741px #fff, 164 1251px 772px #fff, 570px 215px #fff, 1903px 844px #fff, 1598px 95px #fff, 165 660px 1679px #fff, 934px 395px #fff, 561px 1650px #fff, 357px 1790px #fff, 166 565px 474px #fff, 1682px 1789px #fff, 805px 988px #fff, 822px 1438px #fff, 167 881px 896px #fff, 1909px 1729px #fff, 1307px 875px #fff, 1286px 273px #fff, 168 484px 340px #fff, 1136px 742px #fff, 682px 23px #fff, 842px 1920px #fff, 169 144px 519px #fff, 1738px 1091px #fff, 1918px 1267px #fff, 227px 1061px #fff, 170 21px 168px #fff, 435px 1977px #fff, 674px 430px #fff, 262px 750px #fff, 171 1693px 323px #fff, 723px 1818px #fff, 1562px 1459px #fff, 335px 973px #fff, 172 801px 1301px #fff, 1319px 1975px #fff, 514px 1767px #fff, 727px 1414px #fff, 173 549px 1046px #fff, 1875px 995px #fff, 1671px 1727px #fff, 1084px 1149px #fff, 174 1893px 1598px #fff, 1670px 1491px #fff, 963px 64px #fff, 304px 398px #fff, 175 7px 1926px #fff, 1725px 421px #fff, 356px 1055px #fff, 302px 1760px #fff, 176 1604px 504px #fff, 985px 545px #fff, 800px 1492px #fff, 1787px 449px #fff, 177 1467px 627px #fff, 454px 966px #fff, 851px 491px #fff, 149px 1643px #fff, 178 705px 1305px #fff, 1995px 726px #fff, 381px 1345px #fff, 1079px 498px #fff, 179 835px 299px #fff, 1573px 236px #fff, 1918px 1261px #fff, 1094px 871px #fff, 180 1814px 954px #fff, 1123px 183px #fff, 1329px 1692px #fff, 400px 578px #fff, 181 32px 180px #fff, 488px 653px #fff, 1598px 1956px #fff, 60px 215px #fff, 182 677px 187px #fff, 1916px 301px #fff, 1568px 9px #fff, 1288px 744px #fff, 183 379px 131px #fff, 676px 181px #fff, 1152px 1560px #fff, 60px 444px #fff, 184 273px 417px #fff, 1905px 1728px #fff, 292px 1031px #fff, 1169px 675px #fff, 185 253px 1946px #fff, 1980px 566px #fff, 1919px 1554px #fff, 1257px 112px #fff, 186 375px 1784px #fff, 872px 546px #fff, 1478px 643px #fff, 1617px 1383px #fff, 187 434px 1720px #fff, 1432px 383px #fff, 544px 1041px #fff, 1305px 1662px #fff, 188 837px 1942px #fff, 1003px 1239px #fff, 1620px 1263px #fff, 34px 1965px #fff, 189 910px 649px #fff, 517px 1192px #fff, 380px 1986px #fff, 998px 1217px #fff, 190 1907px 1336px #fff, 1553px 905px #fff, 787px 1618px #fff, 1821px 1220px #fff, 191 879px 924px #fff, 461px 1082px #fff, 355px 1521px #fff, 1525px 544px #fff, 192 973px 773px #fff, 1769px 1168px #fff, 1944px 865px #fff, 963px 426px #fff, 193 749px 1869px #fff, 1297px 1077px #fff, 1383px 429px #fff, 762px 1953px #fff, 194 545px 313px #fff, 1852px 1012px #fff, 792px 465px #fff, 1901px 172px #fff, 195 1419px 1071px #fff, 846px 1524px #fff, 1060px 438px #fff, 700px 481px #fff, 196 1916px 575px #fff, 612px 914px #fff, 682px 1849px #fff, 1402px 235px #fff, 197 347px 1728px #fff, 1727px 569px #fff, 1028px 502px #fff, 1259px 498px #fff, 198 533px 470px #fff, 23px 1264px #fff, 1063px 1847px #fff, 1604px 1186px #fff, 199 1344px 1048px #fff, 1940px 580px #fff, 1383px 954px #fff, 867px 685px #fff, 200 1937px 1817px #fff, 1854px 1462px #fff, 1542px 744px #fff, 42px 1194px #fff, 201 1606px 411px #fff, 1162px 1787px #fff, 1262px 1133px #fff, 990px 42px #fff, 202 776px 1810px #fff, 1620px 1919px #fff, 1182px 1125px #fff, 112px 874px #fff, 203 468px 1881px #fff, 1681px 127px #fff, 853px 416px #fff, 661px 1038px #fff, 204 1875px 218px #fff, 883px 1792px #fff, 537px 386px #fff, 763px 1013px #fff, 205 558px 862px #fff, 1766px 1106px #fff, 826px 70px #fff, 1785px 1216px #fff, 206 27px 1710px #fff, 1226px 416px #fff, 835px 1570px #fff, 346px 63px #fff, 207 1217px 611px #fff, 1265px 879px #fff, 1276px 840px #fff, 817px 1228px #fff, 208 83px 674px #fff, 685px 766px #fff, 1945px 554px #fff, 697px 691px #fff, 209 332px 115px #fff, 770px 758px #fff, 1739px 757px #fff, 1417px 825px #fff, 210 928px 1369px #fff, 579px 905px #fff, 1862px 1695px #fff, 1991px 880px #fff, 211 1501px 415px #fff, 1319px 347px #fff, 713px 930px #fff, 1317px 1131px #fff, 212 1034px 1871px #fff, 760px 134px #fff, 724px 656px #fff, 1380px 1623px #fff, 213 383px 1183px #fff, 5px 953px #fff, 1614px 1248px #fff, 1510px 1350px #fff, 214 255px 217px #fff, 544px 1096px #fff, 1818px 413px #fff, 1165px 255px #fff, 215 1372px 1813px #fff, 1173px 1888px #fff, 1970px 1388px #fff, 1032px 87px #fff; 216 animation: animStar 50s linear infinite; 217} 218 219.stars:after { 220 content: \u0026#34; \u0026#34;; 221 position: absolute; 222 top: 2000px; 223 width: 1px; 224 height: 1px; 225 background: transparent; 226 box-shadow: 1665px 905px #fff, 1973px 1300px #fff, 873px 1598px #fff, 227 1380px 1879px #fff, 1694px 73px #fff, 84px 1196px #fff, 64px 203px #fff, 228 1153px 637px #fff, 1123px 586px #fff, 1522px 1014px #fff, 585px 991px #fff, 229 919px 475px #fff, 1304px 1012px #fff, 41px 405px #fff, 413px 1035px #fff, 230 964px 1719px #fff, 1297px 1968px #fff, 921px 313px #fff, 1672px 1797px #fff, 231 1936px 1414px #fff, 1330px 1893px #fff, 137px 1968px #fff, 650px 80px #fff, 232 1010px 164px #fff, 1812px 1531px #fff, 932px 1391px #fff, 1866px 1791px #fff, 233 448px 709px #fff, 1197px 361px #fff, 598px 1716px #fff, 201px 1385px #fff, 234 619px 1008px #fff, 399px 594px #fff, 1920px 400px #fff, 1191px 1610px #fff, 235 38px 1305px #fff, 1585px 1996px #fff, 82px 1248px #fff, 1718px 1511px #fff, 236 1911px 1385px #fff, 432px 429px #fff, 877px 1753px #fff, 1942px 1041px #fff, 237 1179px 1237px #fff, 803px 873px #fff, 1349px 1953px #fff, 716px 396px #fff, 238 945px 785px #fff, 727px 1451px #fff, 1609px 1074px #fff, 729px 1982px #fff, 239 1600px 263px #fff, 1759px 1512px #fff, 1647px 1963px #fff, 476px 567px #fff, 240 1233px 1450px #fff, 409px 289px #fff, 868px 635px #fff, 1742px 961px #fff, 241 1667px 530px #fff, 219px 1025px #fff, 441px 380px #fff, 418px 154px #fff, 242 1481px 1171px #fff, 1356px 1389px #fff, 1542px 1527px #fff, 820px 562px #fff, 243 1550px 1619px #fff, 1844px 862px #fff, 1251px 274px #fff, 1813px 1213px #fff, 244 188px 1861px #fff, 374px 680px #fff, 9px 1554px #fff, 241px 77px #fff, 245 759px 1856px #fff, 763px 968px #fff, 1430px 304px #fff, 265px 559px #fff, 246 1780px 1729px #fff, 1818px 78px #fff, 1332px 1435px #fff, 1949px 1900px #fff, 247 521px 21px #fff, 1552px 106px #fff, 756px 764px #fff, 783px 1985px #fff, 248 1431px 776px #fff, 1320px 211px #fff, 784px 461px #fff, 1012px 1314px #fff, 249 1632px 1042px #fff, 813px 1963px #fff, 1391px 1922px #fff, 250 1929px 1748px #fff, 777px 1088px #fff, 1462px 1982px #fff, 210px 123px #fff, 251 155px 1187px #fff, 1451px 1023px #fff, 1172px 1449px #fff, 934px 1741px #fff, 252 942px 607px #fff, 387px 1425px #fff, 987px 255px #fff, 278px 1531px #fff, 253 372px 1977px #fff, 379px 710px #fff, 1219px 468px #fff, 1243px 898px #fff, 254 154px 1255px #fff, 1798px 1264px #fff, 1481px 401px #fff, 338px 1887px #fff, 255 171px 1488px #fff, 802px 685px #fff, 1px 906px #fff, 378px 1993px #fff, 256 1432px 1237px #fff, 425px 350px #fff, 1369px 244px #fff, 109px 797px #fff, 257 1851px 522px #fff, 1987px 1805px #fff, 270px 1738px #fff, 1004px 776px #fff, 258 671px 13px #fff, 61px 1461px #fff, 1846px 65px #fff, 383px 1457px #fff, 259 861px 945px #fff, 1429px 145px #fff, 784px 1077px #fff, 78px 1226px #fff, 260 285px 1185px #fff, 1933px 1295px #fff, 735px 981px #fff, 1714px 1944px #fff, 261 1443px 1623px #fff, 1176px 1887px #fff, 773px 680px #fff, 1829px 1191px #fff, 262 1154px 1509px #fff, 1005px 1941px #fff, 165px 1152px #fff, 968px 519px #fff, 263 1066px 1787px #fff, 793px 1313px #fff, 688px 1287px #fff, 462px 970px #fff, 264 1401px 959px #fff, 616px 386px #fff, 239px 1679px #fff, 1894px 575px #fff, 265 1721px 894px #fff, 410px 1883px #fff, 434px 1714px #fff, 1190px 663px #fff, 266 857px 1661px #fff, 969px 201px #fff, 987px 1321px #fff, 774px 1403px #fff, 267 416px 759px #fff, 1740px 1727px #fff, 180px 1776px #fff, 1222px 1208px #fff, 268 1628px 1226px #fff, 1626px 25px #fff, 1490px 403px #fff, 971px 228px #fff, 269 1968px 566px #fff, 642px 1329px #fff, 1190px 707px #fff, 1654px 1781px #fff, 270 570px 856px #fff, 1598px 1631px #fff, 1945px 1078px #fff, 452px 322px #fff, 271 854px 953px #fff, 117px 939px #fff, 147px 233px #fff, 1731px 1954px #fff, 272 1792px 1077px #fff, 979px 1290px #fff, 558px 1357px #fff, 26px 1194px #fff, 273 1781px 366px #fff, 1187px 1547px #fff, 1096px 1628px #fff, 1286px 275px #fff, 274 718px 728px #fff, 402px 968px #fff, 1568px 389px #fff, 602px 1986px #fff, 275 347px 260px #fff, 1319px 790px #fff, 49px 118px #fff, 1405px 1009px #fff, 276 1190px 794px #fff, 1080px 943px #fff, 488px 1273px #fff, 602px 521px #fff, 277 172px 1277px #fff, 899px 1474px #fff, 1501px 1252px #fff, 1930px 565px #fff, 278 1281px 696px #fff, 1859px 63px #fff, 717px 797px #fff, 435px 557px #fff, 279 1703px 1909px #fff, 1243px 1573px #fff, 1088px 100px #fff, 575px 1207px #fff, 280 1544px 1619px #fff, 1387px 1643px #fff, 794px 144px #fff, 542px 1224px #fff, 281 1451px 1206px #fff, 1592px 380px #fff, 478px 1121px #fff, 1487px 1294px #fff, 282 32px 823px #fff, 1982px 527px #fff, 482px 1527px #fff, 488px 852px #fff, 283 1393px 1932px #fff, 1931px 1506px #fff, 558px 299px #fff, 677px 1152px #fff, 284 1473px 1639px #fff, 1949px 515px #fff, 1353px 982px #fff, 594px 1517px #fff, 285 10px 1896px #fff, 512px 1217px #fff, 1738px 973px #fff, 614px 640px #fff, 286 86px 231px #fff, 1567px 850px #fff, 1601px 218px #fff, 1979px 276px #fff, 287 654px 922px #fff, 400px 1552px #fff, 706px 1483px #fff, 930px 882px #fff, 288 1651px 1636px #fff, 732px 1662px #fff, 1069px 1105px #fff, 1304px 561px #fff, 289 193px 1671px #fff, 906px 1141px #fff, 380px 1301px #fff, 146px 24px #fff, 290 133px 522px #fff, 1645px 502px #fff, 719px 1320px #fff, 1702px 1031px #fff, 291 792px 1457px #fff, 1668px 907px #fff, 1149px 175px #fff, 1017px 1718px #fff, 292 554px 524px #fff, 1705px 1905px #fff, 1082px 450px #fff, 1895px 848px #fff, 293 738px 689px #fff, 381px 501px #fff, 1018px 1607px #fff, 298px 499px #fff, 294 38px 142px #fff, 339px 1859px #fff, 731px 1198px #fff, 485px 768px #fff, 295 636px 1676px #fff, 768px 435px #fff, 702px 195px #fff, 1921px 5px #fff, 296 761px 1840px #fff, 552px 35px #fff, 1607px 1610px #fff, 1406px 1483px #fff, 297 1056px 672px #fff, 1564px 1621px #fff, 714px 1408px #fff, 1246px 1449px #fff, 298 186px 1871px #fff, 861px 1109px #fff, 1285px 1601px #fff, 1446px 279px #fff, 299 1526px 1055px #fff, 1277px 1963px #fff, 474px 343px #fff, 968px 1803px #fff, 300 14px 50px #fff, 1730px 1656px #fff, 1765px 1521px #fff, 1352px 375px #fff, 301 476px 1313px #fff, 52px 1780px #fff, 1502px 1264px #fff, 503px 965px #fff, 302 1134px 1713px #fff, 1978px 939px #fff, 1051px 1208px #fff, 249px 1302px #fff, 303 246px 1055px #fff, 1575px 1616px #fff, 138px 1501px #fff, 330px 667px #fff, 304 1516px 1155px #fff, 1972px 1487px #fff, 333px 341px #fff, 1895px 1578px #fff, 305 1176px 664px #fff, 454px 1200px #fff, 845px 1459px #fff, 913px 1051px #fff, 306 1642px 1485px #fff, 1652px 1038px #fff, 1530px 1160px #fff, 307 172px 1145px #fff, 1311px 1476px #fff, 1509px 937px #fff, 102px 1820px #fff, 308 1868px 1916px #fff, 1592px 1062px #fff, 1326px 46px #fff, 343px 1594px #fff, 309 1829px 1180px #fff, 1583px 786px #fff, 1359px 759px #fff, 307px 284px #fff, 310 1652px 1360px #fff, 1433px 886px #fff, 1893px 708px #fff, 1728px 352px #fff, 311 1121px 606px #fff, 1213px 540px #fff, 1581px 978px #fff, 1264px 1589px #fff, 312 1477px 600px #fff, 497px 209px #fff, 315px 1061px #fff, 1420px 1210px #fff, 313 420px 1765px #fff, 1653px 64px #fff, 822px 1625px #fff, 279px 1733px #fff, 314 1702px 964px #fff, 596px 1341px #fff, 901px 920px #fff, 1673px 781px #fff, 315 726px 1958px #fff, 141px 1661px #fff, 847px 853px #fff, 22px 1618px #fff, 316 1048px 131px #fff, 1212px 1058px #fff, 641px 1931px #fff, 223px 1919px #fff, 317 1127px 49px #fff, 154px 1429px #fff, 619px 481px #fff, 1297px 826px #fff, 318 599px 1788px #fff, 988px 1997px #fff, 1558px 563px #fff, 1822px 763px #fff, 319 1263px 1022px #fff, 1743px 1143px #fff, 759px 1320px #fff, 1146px 153px #fff, 320 329px 343px #fff, 776px 424px #fff, 988px 958px #fff, 732px 1349px #fff, 321 1262px 1329px #fff, 1970px 1937px #fff, 1485px 220px #fff, 322 1642px 1851px #fff, 967px 1320px #fff, 1976px 834px #fff, 831px 1727px #fff, 323 1247px 575px #fff, 914px 1639px #fff, 745px 609px #fff, 1620px 1933px #fff, 324 812px 1503px #fff, 18px 798px #fff, 669px 189px #fff, 1927px 332px #fff, 325 1084px 330px #fff, 1569px 1651px #fff, 1843px 1392px #fff, 985px 1337px #fff, 326 228px 260px #fff, 1115px 1455px #fff, 1489px 1404px #fff, 300px 1470px #fff, 327 1480px 567px #fff, 103px 1131px #fff, 902px 499px #fff, 1254px 1008px #fff, 328 1545px 1498px #fff, 698px 11px #fff, 1794px 1178px #fff, 1331px 984px #fff, 329 1311px 1813px #fff, 1166px 600px #fff, 353px 64px #fff, 1881px 1215px #fff, 330 70px 223px #fff, 124px 1287px #fff, 489px 758px #fff, 515px 1073px #fff, 331 925px 288px #fff, 341px 853px #fff, 67px 821px #fff, 497px 692px #fff, 332 1063px 401px #fff, 1900px 1380px #fff, 212px 1516px #fff, 369px 1477px #fff, 333 259px 674px #fff, 167px 1283px #fff, 1217px 1546px #fff, 1752px 1666px #fff, 334 1318px 605px #fff, 1015px 466px #fff, 1794px 1552px #fff, 367px 1003px #fff, 335 1459px 283px #fff, 849px 689px #fff, 1894px 79px #fff, 698px 1136px #fff, 336 550px 32px #fff, 1437px 1747px #fff, 1613px 1305px #fff, 561px 65px #fff, 337 742px 452px #fff, 890px 777px #fff, 1246px 293px #fff, 1207px 423px #fff, 338 373px 1772px #fff, 400px 360px #fff, 827px 1859px #fff, 1711px 579px #fff, 339 1815px 493px #fff, 1659px 180px #fff, 821px 293px #fff, 1958px 754px #fff, 340 575px 1385px #fff, 346px 478px #fff, 1632px 1059px #fff, 1841px 1840px #fff, 341 813px 899px #fff, 963px 48px #fff, 1357px 120px #fff, 594px 1608px #fff, 342 797px 16px #fff, 1372px 1261px #fff, 1205px 1624px #fff, 1777px 1519px #fff, 343 55px 232px #fff, 1416px 1668px #fff, 65px 494px #fff, 636px 639px #fff, 344 1166px 376px #fff, 863px 1606px #fff, 32px 160px #fff, 162px 1992px #fff, 345 282px 838px #fff, 712px 1613px #fff, 752px 126px #fff, 1809px 1834px #fff, 346 551px 775px #fff, 1832px 1796px #fff, 426px 399px #fff, 1032px 1571px #fff, 347 379px 1453px #fff, 1186px 1504px #fff, 1529px 1867px #fff, 667px 1442px #fff, 348 140px 1797px #fff, 857px 1938px #fff, 1760px 1655px #fff, 880px 742px #fff, 349 1674px 1773px #fff, 1718px 776px #fff, 439px 1401px #fff, 1002px 1741px #fff, 350 1251px 772px #fff, 570px 215px #fff, 1903px 844px #fff, 1598px 95px #fff, 351 660px 1679px #fff, 934px 395px #fff, 561px 1650px #fff, 357px 1790px #fff, 352 565px 474px #fff, 1682px 1789px #fff, 805px 988px #fff, 822px 1438px #fff, 353 881px 896px #fff, 1909px 1729px #fff, 1307px 875px #fff, 1286px 273px #fff, 354 484px 340px #fff, 1136px 742px #fff, 682px 23px #fff, 842px 1920px #fff, 355 144px 519px #fff, 1738px 1091px #fff, 1918px 1267px #fff, 227px 1061px #fff, 356 21px 168px #fff, 435px 1977px #fff, 674px 430px #fff, 262px 750px #fff, 357 1693px 323px #fff, 723px 1818px #fff, 1562px 1459px #fff, 335px 973px #fff, 358 801px 1301px #fff, 1319px 1975px #fff, 514px 1767px #fff, 727px 1414px #fff, 359 549px 1046px #fff, 1875px 995px #fff, 1671px 1727px #fff, 1084px 1149px #fff, 360 1893px 1598px #fff, 1670px 1491px #fff, 963px 64px #fff, 304px 398px #fff, 361 7px 1926px #fff, 1725px 421px #fff, 356px 1055px #fff, 302px 1760px #fff, 362 1604px 504px #fff, 985px 545px #fff, 800px 1492px #fff, 1787px 449px #fff, 363 1467px 627px #fff, 454px 966px #fff, 851px 491px #fff, 149px 1643px #fff, 364 705px 1305px #fff, 1995px 726px #fff, 381px 1345px #fff, 1079px 498px #fff, 365 835px 299px #fff, 1573px 236px #fff, 1918px 1261px #fff, 1094px 871px #fff, 366 1814px 954px #fff, 1123px 183px #fff, 1329px 1692px #fff, 400px 578px #fff, 367 32px 180px #fff, 488px 653px #fff, 1598px 1956px #fff, 60px 215px #fff, 368 677px 187px #fff, 1916px 301px #fff, 1568px 9px #fff, 1288px 744px #fff, 369 379px 131px #fff, 676px 181px #fff, 1152px 1560px #fff, 60px 444px #fff, 370 273px 417px #fff, 1905px 1728px #fff, 292px 1031px #fff, 1169px 675px #fff, 371 253px 1946px #fff, 1980px 566px #fff, 1919px 1554px #fff, 1257px 112px #fff, 372 375px 1784px #fff, 872px 546px #fff, 1478px 643px #fff, 1617px 1383px #fff, 373 434px 1720px #fff, 1432px 383px #fff, 544px 1041px #fff, 1305px 1662px #fff, 374 837px 1942px #fff, 1003px 1239px #fff, 1620px 1263px #fff, 34px 1965px #fff, 375 910px 649px #fff, 517px 1192px #fff, 380px 1986px #fff, 998px 1217px #fff, 376 1907px 1336px #fff, 1553px 905px #fff, 787px 1618px #fff, 1821px 1220px #fff, 377 879px 924px #fff, 461px 1082px #fff, 355px 1521px #fff, 1525px 544px #fff, 378 973px 773px #fff, 1769px 1168px #fff, 1944px 865px #fff, 963px 426px #fff, 379 749px 1869px #fff, 1297px 1077px #fff, 1383px 429px #fff, 762px 1953px #fff, 380 545px 313px #fff, 1852px 1012px #fff, 792px 465px #fff, 1901px 172px #fff, 381 1419px 1071px #fff, 846px 1524px #fff, 1060px 438px #fff, 700px 481px #fff, 382 1916px 575px #fff, 612px 914px #fff, 682px 1849px #fff, 1402px 235px #fff, 383 347px 1728px #fff, 1727px 569px #fff, 1028px 502px #fff, 1259px 498px #fff, 384 533px 470px #fff, 23px 1264px #fff, 1063px 1847px #fff, 1604px 1186px #fff, 385 1344px 1048px #fff, 1940px 580px #fff, 1383px 954px #fff, 867px 685px #fff, 386 1937px 1817px #fff, 1854px 1462px #fff, 1542px 744px #fff, 42px 1194px #fff, 387 1606px 411px #fff, 1162px 1787px #fff, 1262px 1133px #fff, 990px 42px #fff, 388 776px 1810px #fff, 1620px 1919px #fff, 1182px 1125px #fff, 112px 874px #fff, 389 468px 1881px #fff, 1681px 127px #fff, 853px 416px #fff, 661px 1038px #fff, 390 1875px 218px #fff, 883px 1792px #fff, 537px 386px #fff, 763px 1013px #fff, 391 558px 862px #fff, 1766px 1106px #fff, 826px 70px #fff, 1785px 1216px #fff, 392 27px 1710px #fff, 1226px 416px #fff, 835px 1570px #fff, 346px 63px #fff, 393 1217px 611px #fff, 1265px 879px #fff, 1276px 840px #fff, 817px 1228px #fff, 394 83px 674px #fff, 685px 766px #fff, 1945px 554px #fff, 697px 691px #fff, 395 332px 115px #fff, 770px 758px #fff, 1739px 757px #fff, 1417px 825px #fff, 396 928px 1369px #fff, 579px 905px #fff, 1862px 1695px #fff, 1991px 880px #fff, 397 1501px 415px #fff, 1319px 347px #fff, 713px 930px #fff, 1317px 1131px #fff, 398 1034px 1871px #fff, 760px 134px #fff, 724px 656px #fff, 1380px 1623px #fff, 399 383px 1183px #fff, 5px 953px #fff, 1614px 1248px #fff, 1510px 1350px #fff, 400 255px 217px #fff, 544px 1096px #fff, 1818px 413px #fff, 1165px 255px #fff, 401 1372px 1813px #fff, 1173px 1888px #fff, 1970px 1388px #fff, 1032px 87px #fff; 402} 403 404.stars2 { 405 width: 2px; 406 height: 2px; 407 background: transparent; 408 box-shadow: 197px 1147px #fff, 1881px 971px #fff, 31px 834px #fff, 409 898px 1518px #fff, 1701px 1126px #fff, 467px 1034px #fff, 1360px 983px #fff, 410 1687px 1784px #fff, 1739px 29px #fff, 145px 993px #fff, 1187px 722px #fff, 411 527px 910px #fff, 1491px 715px #fff, 1173px 1910px #fff, 755px 1917px #fff, 412 1830px 1185px #fff, 1663px 583px #fff, 543px 1875px #fff, 490px 1340px #fff, 413 987px 547px #fff, 158px 409px #fff, 1011px 1813px #fff, 1860px 534px #fff, 414 322px 1560px #fff, 835px 1698px #fff, 1838px 685px #fff, 1622px 1913px #fff, 415 441px 738px #fff, 899px 1509px #fff, 416px 1186px #fff, 130px 1103px #fff, 416 1554px 1736px #fff, 906px 1867px #fff, 1776px 340px #fff, 632px 1394px #fff, 417 1861px 601px #fff, 1578px 200px #fff, 1500px 560px #fff, 1187px 1553px #fff, 418 1443px 1685px #fff, 1417px 1211px #fff, 1305px 808px #fff, 1418px 779px #fff, 419 1938px 1205px #fff, 1320px 595px #fff, 501px 3px #fff, 1315px 381px #fff, 420 778px 264px #fff, 327px 1252px #fff, 1692px 753px #fff, 41px 41px #fff, 421 1775px 1273px #fff, 1995px 314px #fff, 293px 1048px #fff, 509px 1092px #fff, 422 34px 375px #fff, 533px 664px #fff, 538px 469px #fff, 856px 589px #fff, 423 1077px 1850px #fff, 280px 1938px #fff, 1130px 1300px #fff, 847px 1652px #fff, 424 1777px 806px #fff, 999px 1869px #fff, 701px 1483px #fff, 1803px 762px #fff, 425 1530px 254px #fff, 1153px 1277px #fff, 1397px 1096px #fff, 1676px 873px #fff, 426 1671px 244px #fff, 1979px 668px #fff, 1266px 1192px #fff, 1968px 43px #fff, 427 1110px 1896px #fff, 1666px 203px #fff, 1025px 1577px #fff, 1840px 193px #fff, 428 996px 525px #fff, 1023px 1083px #fff, 1809px 1247px #fff, 546px 391px #fff, 429 813px 801px #fff, 398px 1228px #fff, 1699px 1495px #fff, 96px 381px #fff, 430 1238px 98px #fff, 1870px 94px #fff, 1715px 241px #fff, 415px 1345px #fff, 431 1867px 506px #fff, 624px 453px #fff, 1200px 1662px #fff, 1889px 790px #fff, 432 613px 1546px #fff, 1884px 462px #fff, 163px 227px #fff, 1527px 66px #fff, 433 422px 587px #fff, 423px 1393px #fff, 1187px 755px #fff, 202px 683px #fff, 434 1784px 811px #fff, 84px 45px #fff, 208px 174px #fff, 1060px 414px #fff, 435 1501px 772px #fff, 1612px 1821px #fff, 1901px 395px #fff, 1480px 1744px #fff, 436 1592px 675px #fff, 358px 840px #fff, 705px 1818px #fff, 1667px 1180px #fff, 437 1123px 386px #fff, 1912px 1561px #fff, 804px 112px #fff, 309px 1476px #fff, 438 244px 253px #fff, 1027px 1937px #fff, 1036px 558px #fff, 621px 1442px #fff, 439 768px 628px #fff, 756px 89px #fff, 1044px 319px #fff, 1297px 1667px #fff, 440 945px 1218px #fff, 789px 1990px #fff, 665px 1467px #fff, 1836px 81px #fff, 441 415px 1273px #fff, 68px 1205px #fff, 1621px 1823px #fff, 85px 1610px #fff, 442 1252px 1125px #fff, 334px 958px #fff, 1422px 1069px #fff, 1488px 455px #fff, 443 1570px 374px #fff, 1012px 698px #fff, 86px 581px #fff, 519px 1176px #fff, 444 1279px 1961px #fff, 1181px 321px #fff, 1593px 1111px #fff, 555px 84px #fff, 445 1071px 1481px #fff, 530px 1495px #fff, 367px 1954px #fff, 94px 1355px #fff, 446 815px 417px #fff, 1409px 1428px #fff, 1680px 1781px #fff, 1040px 488px #fff, 447 1552px 1718px #fff, 1767px 1851px #fff, 32px 362px #fff, 1924px 636px #fff, 448 286px 1412px #fff, 1489px 1248px #fff, 614px 1651px #fff, 1106px 329px #fff, 449 254px 1103px #fff, 1010px 325px #fff, 999px 1061px #fff, 408px 1958px #fff, 450 407px 1585px #fff, 764px 774px #fff, 1173px 896px #fff, 1258px 638px #fff, 451 1744px 1072px #fff, 1944px 931px #fff, 1727px 1278px #fff, 289px 649px #fff, 452 1870px 222px #fff, 1418px 776px #fff, 1269px 975px #fff, 906px 1686px #fff, 453 1545px 1267px #fff, 1418px 388px #fff, 46px 738px #fff, 1268px 899px #fff, 454 536px 1685px #fff, 1186px 142px #fff, 1144px 1663px #fff, 1144px 682px #fff, 455 146px 1758px #fff, 1775px 222px #fff, 1272px 781px #fff, 1267px 911px #fff, 456 1355px 337px #fff, 1733px 1418px #fff, 883px 1415px #fff, 1892px 687px #fff, 457 607px 783px #fff, 538px 734px #fff, 789px 1344px #fff, 1358px 596px #fff, 458 1728px 1015px #fff; 459 animation: animStar 100s linear infinite; 460} 461 462.stars2:after { 463 content: \u0026#34; \u0026#34;; 464 position: absolute; 465 top: 2000px; 466 width: 2px; 467 height: 2px; 468 background: transparent; 469 box-shadow: 197px 1147px #fff, 1881px 971px #fff, 31px 834px #fff, 470 898px 1518px #fff, 1701px 1126px #fff, 467px 1034px #fff, 1360px 983px #fff, 471 1687px 1784px #fff, 1739px 29px #fff, 145px 993px #fff, 1187px 722px #fff, 472 527px 910px #fff, 1491px 715px #fff, 1173px 1910px #fff, 755px 1917px #fff, 473 1830px 1185px #fff, 1663px 583px #fff, 543px 1875px #fff, 490px 1340px #fff, 474 987px 547px #fff, 158px 409px #fff, 1011px 1813px #fff, 1860px 534px #fff, 475 322px 1560px #fff, 835px 1698px #fff, 1838px 685px #fff, 1622px 1913px #fff, 476 441px 738px #fff, 899px 1509px #fff, 416px 1186px #fff, 130px 1103px #fff, 477 1554px 1736px #fff, 906px 1867px #fff, 1776px 340px #fff, 632px 1394px #fff, 478 1861px 601px #fff, 1578px 200px #fff, 1500px 560px #fff, 1187px 1553px #fff, 479 1443px 1685px #fff, 1417px 1211px #fff, 1305px 808px #fff, 1418px 779px #fff, 480 1938px 1205px #fff, 1320px 595px #fff, 501px 3px #fff, 1315px 381px #fff, 481 778px 264px #fff, 327px 1252px #fff, 1692px 753px #fff, 41px 41px #fff, 482 1775px 1273px #fff, 1995px 314px #fff, 293px 1048px #fff, 509px 1092px #fff, 483 34px 375px #fff, 533px 664px #fff, 538px 469px #fff, 856px 589px #fff, 484 1077px 1850px #fff, 280px 1938px #fff, 1130px 1300px #fff, 847px 1652px #fff, 485 1777px 806px #fff, 999px 1869px #fff, 701px 1483px #fff, 1803px 762px #fff, 486 1530px 254px #fff, 1153px 1277px #fff, 1397px 1096px #fff, 1676px 873px #fff, 487 1671px 244px #fff, 1979px 668px #fff, 1266px 1192px #fff, 1968px 43px #fff, 488 1110px 1896px #fff, 1666px 203px #fff, 1025px 1577px #fff, 1840px 193px #fff, 489 996px 525px #fff, 1023px 1083px #fff, 1809px 1247px #fff, 546px 391px #fff, 490 813px 801px #fff, 398px 1228px #fff, 1699px 1495px #fff, 96px 381px #fff, 491 1238px 98px #fff, 1870px 94px #fff, 1715px 241px #fff, 415px 1345px #fff, 492 1867px 506px #fff, 624px 453px #fff, 1200px 1662px #fff, 1889px 790px #fff, 493 613px 1546px #fff, 1884px 462px #fff, 163px 227px #fff, 1527px 66px #fff, 494 422px 587px #fff, 423px 1393px #fff, 1187px 755px #fff, 202px 683px #fff, 495 1784px 811px #fff, 84px 45px #fff, 208px 174px #fff, 1060px 414px #fff, 496 1501px 772px #fff, 1612px 1821px #fff, 1901px 395px #fff, 1480px 1744px #fff, 497 1592px 675px #fff, 358px 840px #fff, 705px 1818px #fff, 1667px 1180px #fff, 498 1123px 386px #fff, 1912px 1561px #fff, 804px 112px #fff, 309px 1476px #fff, 499 244px 253px #fff, 1027px 1937px #fff, 1036px 558px #fff, 621px 1442px #fff, 500 768px 628px #fff, 756px 89px #fff, 1044px 319px #fff, 1297px 1667px #fff, 501 945px 1218px #fff, 789px 1990px #fff, 665px 1467px #fff, 1836px 81px #fff, 502 415px 1273px #fff, 68px 1205px #fff, 1621px 1823px #fff, 85px 1610px #fff, 503 1252px 1125px #fff, 334px 958px #fff, 1422px 1069px #fff, 1488px 455px #fff, 504 1570px 374px #fff, 1012px 698px #fff, 86px 581px #fff, 519px 1176px #fff, 505 1279px 1961px #fff, 1181px 321px #fff, 1593px 1111px #fff, 555px 84px #fff, 506 1071px 1481px #fff, 530px 1495px #fff, 367px 1954px #fff, 94px 1355px #fff, 507 815px 417px #fff, 1409px 1428px #fff, 1680px 1781px #fff, 1040px 488px #fff, 508 1552px 1718px #fff, 1767px 1851px #fff, 32px 362px #fff, 1924px 636px #fff, 509 286px 1412px #fff, 1489px 1248px #fff, 614px 1651px #fff, 1106px 329px #fff, 510 254px 1103px #fff, 1010px 325px #fff, 999px 1061px #fff, 408px 1958px #fff, 511 407px 1585px #fff, 764px 774px #fff, 1173px 896px #fff, 1258px 638px #fff, 512 1744px 1072px #fff, 1944px 931px #fff, 1727px 1278px #fff, 289px 649px #fff, 513 1870px 222px #fff, 1418px 776px #fff, 1269px 975px #fff, 906px 1686px #fff, 514 1545px 1267px #fff, 1418px 388px #fff, 46px 738px #fff, 1268px 899px #fff, 515 536px 1685px #fff, 1186px 142px #fff, 1144px 1663px #fff, 1144px 682px #fff, 516 146px 1758px #fff, 1775px 222px #fff, 1272px 781px #fff, 1267px 911px #fff, 517 1355px 337px #fff, 1733px 1418px #fff, 883px 1415px #fff, 1892px 687px #fff, 518 607px 783px #fff, 538px 734px #fff, 789px 1344px #fff, 1358px 596px #fff, 519 1728px 1015px #fff; 520} 521 522.stars3 { 523 width: 3px; 524 height: 3px; 525 background: transparent; 526 box-shadow: 1351px 1339px #fff, 1041px 1607px #fff, 748px 575px #fff, 527 881px 567px #fff, 1630px 41px #fff, 1459px 990px #fff, 1946px 718px #fff, 528 623px 1811px #fff, 872px 20px #fff, 1087px 1739px #fff, 1595px 1087px #fff, 529 957px 721px #fff, 1399px 182px #fff, 1611px 1257px #fff, 402px 720px #fff, 530 1666px 746px #fff, 1820px 1485px #fff, 1221px 1538px #fff, 36px 258px #fff, 531 1154px 292px #fff, 998px 642px #fff, 1756px 1543px #fff, 1033px 1895px #fff, 532 522px 115px #fff, 1329px 355px #fff, 1180px 1883px #fff, 1200px 438px #fff, 533 1432px 595px #fff, 1295px 460px #fff, 779px 1071px #fff, 238px 1639px #fff, 534 1504px 1257px #fff, 1815px 560px #fff, 1712px 1549px #fff, 1150px 890px #fff, 535 1054px 658px #fff, 1715px 1751px #fff, 1994px 1439px #fff, 536 1076px 1147px #fff, 878px 1108px #fff, 339px 1199px #fff, 1303px 975px #fff, 537 1162px 649px #fff, 1903px 155px #fff, 1092px 706px #fff, 1028px 1752px #fff, 538 432px 1314px #fff, 508px 1057px #fff, 173px 459px #fff, 749px 1819px #fff, 539 856px 884px #fff, 1638px 1523px #fff, 323px 1905px #fff, 1148px 1513px #fff, 540 16px 1416px #fff, 1611px 1779px #fff, 987px 830px #fff, 900px 15px #fff, 541 642px 855px #fff, 1423px 964px #fff, 928px 752px #fff, 812px 1135px #fff, 542 1067px 1384px #fff, 435px 1826px #fff, 1393px 1857px #fff, 971px 1542px #fff, 543 110px 693px #fff, 453px 509px #fff, 849px 1126px #fff, 1627px 1176px #fff, 544 1287px 88px #fff, 1265px 309px #fff, 671px 1984px #fff, 1514px 1833px #fff, 545 243px 1832px #fff, 1516px 773px #fff, 1543px 461px #fff, 1363px 888px #fff, 546 414px 1461px #fff, 1609px 1271px #fff, 1898px 1558px #fff, 412px 1579px #fff, 547 1593px 1317px #fff, 1425px 1875px #fff, 951px 999px #fff, 418px 1254px #fff, 548 595px 1779px #fff, 864px 754px #fff, 1052px 911px #fff, 1652px 1525px #fff, 549 540px 389px #fff, 1380px 587px #fff, 1406px 1779px #fff, 251px 841px #fff, 550 1806px 1696px #fff, 1599px 1165px #fff, 1965px 477px #fff, 551 1861px 1781px #fff, 347px 135px #fff, 421px 1306px #fff; 552 animation: animStar 150s linear infinite; 553} 554 555.stars3:after { 556 content: \u0026#34; \u0026#34;; 557 position: absolute; 558 top: 2000px; 559 width: 3px; 560 height: 3px; 561 background: transparent; 562 box-shadow: 1351px 1339px #fff, 1041px 1607px #fff, 748px 575px #fff, 563 881px 567px #fff, 1630px 41px #fff, 1459px 990px #fff, 1946px 718px #fff, 564 623px 1811px #fff, 872px 20px #fff, 1087px 1739px #fff, 1595px 1087px #fff, 565 957px 721px #fff, 1399px 182px #fff, 1611px 1257px #fff, 402px 720px #fff, 566 1666px 746px #fff, 1820px 1485px #fff, 1221px 1538px #fff, 36px 258px #fff, 567 1154px 292px #fff, 998px 642px #fff, 1756px 1543px #fff, 1033px 1895px #fff, 568 522px 115px #fff, 1329px 355px #fff, 1180px 1883px #fff, 1200px 438px #fff, 569 1432px 595px #fff, 1295px 460px #fff, 779px 1071px #fff, 238px 1639px #fff, 570 1504px 1257px #fff, 1815px 560px #fff, 1712px 1549px #fff, 1150px 890px #fff, 571 1054px 658px #fff, 1715px 1751px #fff, 1994px 1439px #fff, 572 1076px 1147px #fff, 878px 1108px #fff, 339px 1199px #fff, 1303px 975px #fff, 573 1162px 649px #fff, 1903px 155px #fff, 1092px 706px #fff, 1028px 1752px #fff, 574 432px 1314px #fff, 508px 1057px #fff, 173px 459px #fff, 749px 1819px #fff, 575 856px 884px #fff, 1638px 1523px #fff, 323px 1905px #fff, 1148px 1513px #fff, 576 16px 1416px #fff, 1611px 1779px #fff, 987px 830px #fff, 900px 15px #fff, 577 642px 855px #fff, 1423px 964px #fff, 928px 752px #fff, 812px 1135px #fff, 578 1067px 1384px #fff, 435px 1826px #fff, 1393px 1857px #fff, 971px 1542px #fff, 579 110px 693px #fff, 453px 509px #fff, 849px 1126px #fff, 1627px 1176px #fff, 580 1287px 88px #fff, 1265px 309px #fff, 671px 1984px #fff, 1514px 1833px #fff, 581 243px 1832px #fff, 1516px 773px #fff, 1543px 461px #fff, 1363px 888px #fff, 582 414px 1461px #fff, 1609px 1271px #fff, 1898px 1558px #fff, 412px 1579px #fff, 583 1593px 1317px #fff, 1425px 1875px #fff, 951px 999px #fff, 418px 1254px #fff, 584 595px 1779px #fff, 864px 754px #fff, 1052px 911px #fff, 1652px 1525px #fff, 585 540px 389px #fff, 1380px 587px #fff, 1406px 1779px #fff, 251px 841px #fff, 586 1806px 1696px #fff, 1599px 1165px #fff, 1965px 477px #fff, 587 1861px 1781px #fff, 347px 135px #fff, 421px 1306px #fff; 588} 589 590.horizon { 591 position: absolute; 592 width: 160%; 593 height: 70%; 594 background: #038bff; 595 filter: blur(30px); 596 left: -30%; 597 bottom: -20%; 598 border-radius: 100%/100%; 599} 600 601.horizon:before { 602 content: \u0026#34;\u0026#34;; 603 position: absolute; 604 width: 81.25%; 605 height: 70%; 606 background: #51afff; 607 -webkit-filter: blur(30px); 608 opacity: 0.6; 609 margin-left: 9.375%; 610 border-radius: 100%/100%; 611} 612 613.horizon:after { 614 content: \u0026#34; \u0026#34;; 615 position: absolute; 616 width: 32%; 617 height: 20%; 618 border-radius: 650px/350px; 619 background: #b0daff; 620 -webkit-filter: blur(30px); 621 opacity: 0.5; 622 margin-left: 34%; 623 border-radius: 100%/100%; 624} 625 626.horizon .glow { 627 position: absolute; 628 width: 100%; 629 height: 100%; 630 background: #215496; 631 -webkit-filter: blur(200px); 632 opacity: 0.7; 633 top: -10%; 634 border-radius: 100%/100%; 635} 636 637.earth { 638 position: absolute; 639 width: 200%; 640 height: 100%; 641 background: #2c4790; 642 left: -50%; 643 bottom: -50%; 644 border-radius: 100%/100%; 645 box-shadow: inset 0px 0px 62px 20px rgba(60, 105, 138, 0.85); 646} 647 648@keyframes animStar { 649 from { 650 transform: translateY(0px); 651 } 652 653 to { 654 transform: translateY(-2000px); 655 } 656} 以上就是我今天的分享，歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-29/","section":"post","tags":["HTML","CSS","JS"],"title":"Day 29 鐵人賽太空粒子的例子"},{"body":"今天我們要來製作Slider效果。不過要用一個你應該沒有看過有人這樣做但卻很簡單的方法。\n應用應該不用我多說，不管是公司網站展示產品，學校輪播榮譽榜，還是業界案例輪播介紹都會使用到slider。而我今天忙到晚上九點半才開始寫文章是因為白天在做這個心理測驗，左右滑動效果也是使用slider。\n不過想到要定位、還要偵測各種滑鼠點擊、移動、手機點擊就十分麻煩。你寫 code 累 debug 累瀏覽器也累要一直監聽…歸剛欸…\n這時 CSS 又出現了。向你介紹： scroll-snap-type。\nscroll-snap-type 這個屬性可以讓元素上下或左右滑動時一滑就是整頁。我覺得最讚的是可以在筆電上面的觸控板直接往右滾，而且因為是內建語法所以非常順暢。使用用法如下:\n1/* 不開 */ 2scroll-snap-type: none; 3 4/* 開 */ 5scroll-snap-type: x; 6scroll-snap-type: y; 7scroll-snap-type: block; 8scroll-snap-type: inline; 9scroll-snap-type: both; 10 11/* 縮寫，加上 強制 | 接近 設定 */ 12/* mandatory | proximity */ 13scroll-snap-type: x mandatory; 14scroll-snap-type: y proximity; 15scroll-snap-type: both mandatory; 建議設定成 mandatory比較能確保有被吸附到。\n我的用法如下，外元素設定scroll-snap-type: x mandatory，內元素設定對齊位置 scroll-snap-align: center置中。完整版面如下:\n1\u0026lt;section\u0026gt; 2 \u0026lt;div class=\u0026#34;items\u0026#34;\u0026gt; 3 \u0026lt;button onclick=\u0026#34;backward()\u0026#34;\u0026gt;❮\u0026lt;/button\u0026gt; 4 \u0026lt;div\u0026gt;1\u0026lt;/div\u0026gt; 5 \u0026lt;div\u0026gt;2\u0026lt;/div\u0026gt; 6 \u0026lt;div\u0026gt;3\u0026lt;/div\u0026gt; 7 \u0026lt;div\u0026gt;4\u0026lt;/div\u0026gt; 8 \u0026lt;/div\u0026gt; 9 \u0026lt;button onclick=\u0026#34;foward()\u0026#34;\u0026gt;❯\u0026lt;/button\u0026gt; 10\u0026lt;/section\u0026gt; 1* { 2 padding: 0; 3 margin: 0; 4 box-sizing: border-box; 5} 6body { 7 overflow: hidden; 8} 9section { 10 position: relative; 11} 12.items { 13 display: flex; 14 height: 400px; 15 width: 100%; 16 overflow: scroll; 17 scroll-snap-type: x mandatory; 18} 19.items div { 20 width: 100%; 21 height: 100%; 22 background: orange; 23 flex-shrink: 0; 24 display: flex; 25 align-items: center; 26 justify-content: center; 27 font-size: 3em; 28 scroll-snap-align: center; 29} 30.items div:nth-child(odd) { 31 background: lightblue; 32} 33button { 34 position: absolute; 35 top: 50%; 36 left: 1em; 37 transform: translate(-50%, -50%); 38 outline: transparent; 39 border: none; 40 background: transparent; 41 font-size: 3em; 42 transition: transform 0.3s; 43 cursor: pointer; 44} 45section button:last-child { 46 left: unset; 47 right: 1em; 48} 49section button:last-child:hover { 50 transform: translate(-20%, -50%); 51} 52section button:first-child:hover { 53 transform: translate(-80%, -50%); 54} 我還加上了往左右的按鈕，這樣用滑鼠點擊或是滑動，就這麼簡單。最後來加上 JavaScript，讓按鈕可以點擊。\nJavaScript 先用變數用來追蹤當前顯示的圖片的索引。一開始它被設定為0，代表第一張圖片。\n1let currentIndex = 0 接下來是往左右的函式。在滾動之前，它會檢查是否可以向前或向後查看圖片。如果可以，就會增加或減少 currentIndex，然後調用 scrollToCurrentIndex() 函式。\n1function backward() { 2 if (currentIndex \u0026gt; 0) { 3 currentIndex--; 4 scrollToCurrentIndex(); 5 } 6} 7function foward() { 8 if (currentIndex \u0026lt; itemDivs.length - 1) { 9 currentIndex++; 10 scrollToCurrentIndex(); 11 } 12} 來寫滾動的函式。它會計算當前圖片的寬度，然後根據 currentIndex 的值來滾動 itemsContainer 到正確的位置，使用平滑的滾動效果。然後它呼叫 hideButton() 函式來控制按鈕的可見度，讓按鈕在滾動到最左邊或最右邊時隱藏。\n1function scrollToCurrentIndex() { 2 const itemWidth = itemDivs[currentIndex].offsetWidth; 3 const scrollPosition = itemWidth * currentIndex; 4 itemsContainer.scrollTo({ 5 left: scrollPosition, 6 behavior: \u0026#34;smooth\u0026#34; 7 }); 8 hideButton(); 9} 來寫一個函式來控制按鈕的可見度。如果 currentIndex 為0，表示目前是第一張圖片。因為 false 是 0 所以我們直接把透明度設為 0+false，這樣可以少寫兩行 if else。如果 currentIndex 等於最後一張圖片的索引，就會隱藏向前按鈕。因為\u0026quot;是\u0026quot;第一章圖片是 true 所以加上 ! 變成 false，透明度就是 0+false=0。如果不是第一張圖片就是 true，透明度就是 0+true=1。\n1const hideButton = () =\u0026gt; { 2 backwardButton.style.opacity = 0 + !(currentIndex === 0); 3 forwardButton.style.opacity = 0 + !(currentIndex === itemDivs.length - 1); 4}; 對了如果用觸控板滾動也要確認一下位置，來正確顯示按鈕。\n1itemsContainer.addEventListener(\u0026#34;scroll\u0026#34;, function () { 2 currentIndex = Math.round( 3 itemsContainer.scrollLeft / itemDivs[0].offsetWidth 4 ); 5 hideButton(); 6}); 完整的 JavaScript 如下:\n1let currentIndex = 0; 2const backwardButton = document.querySelector(\u0026#34;button[onclick=\u0026#39;backward()\u0026#39;]\u0026#34;); 3const forwardButton = document.querySelector(\u0026#34;button[onclick=\u0026#39;foward()\u0026#39;]\u0026#34;); 4const itemsContainer = document.querySelector(\u0026#34;.items\u0026#34;); 5const itemDivs = document.querySelectorAll(\u0026#34;.items div\u0026#34;); 6function backward() { 7 if (currentIndex \u0026gt; 0) { 8 currentIndex--; 9 scrollToCurrentIndex(); 10 } 11} 12function foward() { 13 if (currentIndex \u0026lt; itemDivs.length - 1) { 14 currentIndex++; 15 scrollToCurrentIndex(); 16 } 17} 18const hideButton = () =\u0026gt; { 19 backwardButton.style.opacity = 0 + !(currentIndex === 0); 20 forwardButton.style.opacity = 0 + !(currentIndex === itemDivs.length - 1); 21}; 22function scrollToCurrentIndex() { 23 const itemWidth = itemDivs[currentIndex].offsetWidth; 24 const scrollPosition = itemWidth * currentIndex; 25 itemsContainer.scrollTo({ 26 left: scrollPosition, 27 behavior: \u0026#34;smooth\u0026#34; 28 }); 29 hideButton(); 30} 31scrollToCurrentIndex(); 32itemsContainer.addEventListener(\u0026#34;scroll\u0026#34;, function () { 33 currentIndex = Math.round( 34 itemsContainer.scrollLeft / itemDivs[0].offsetWidth 35 ); 36 hideButton(); 37}); 成果 因為我今天是用桌機所以沒有觸控板給我滾。如果你不喜觀滾動條的話可以用 CSS 隱藏。\n1 /* Hide scrollbar for Chrome, Safari and Opera */ 2.example::-webkit-scrollbar { 3 display: none; 4} 5 6/* Hide scrollbar for IE, Edge and Firefox */ 7.example { 8 -ms-overflow-style: none; /* IE and Edge */ 9 scrollbar-width: none; /* Firefox */ 10} https://codepen.io/edit-mr/pen/dywrReK\n以上就是我今天的分享，我們使用少許的程式碼就做出這個性能十分不錯的陽春 slider。你可以再加上一點裝飾，比如在底下放上顯示當前圖片的小圓點，或是加上自動播放。如果你有興趣可以自己試試看，抓取個數、移動的距離、以及移動的函數上面都有提供。 也需這個系列出書之後就會提到呢! 歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-28/","section":"post","tags":["HTML","CSS","JS"],"title":"Day28 純 JavaScript Slider (ft.  CSS scroll-snap-type)"},{"body":"今天我們要來製作 iT 邦幫忙首頁的導覽列。我們先來看看原本的網站。\n呃好喔...晚點再看看...\n沒事我有先截圖。\n你有注意到嗎?第二排的導覽列在往下滾之後會固定在上方，並顯示出縮小版的 Logo。我覺得蠻可愛的，一個好的 UI 就事要有這種平常不會注意但讓體驗很順暢舒服的小巧思。我們來搭配昨天的 Animate On Scroll 原理來製作吧。\n複習: Day26 不要躲在下面動! Animate On Scroll 自己做\n基本版面 首先我們先做一個類似於 iT 邦幫忙首頁的版面。這應該是這個系列最多的 HTML 了。\n1\u0026lt;main\u0026gt; 2 \u0026lt;header class=\u0026#34;header\u0026#34;\u0026gt; 3 \u0026lt;div\u0026gt; 4 \u0026lt;img src=\u0026#34;https://ithelp.ithome.com.tw/storage/image/logo.svg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; 5 \u0026lt;/div\u0026gt; 6 \u0026lt;/header\u0026gt; 7 \u0026lt;nav\u0026gt; 8 \u0026lt;div\u0026gt; 9 \u0026lt;li\u0026gt;技術問答\u0026lt;/li\u0026gt; 10 \u0026lt;li\u0026gt;技術文章\u0026lt;/li\u0026gt; 11 \u0026lt;li\u0026gt;iT 徵才\u0026lt;/li\u0026gt; 12 \u0026lt;li\u0026gt;Tag\u0026lt;/li\u0026gt; 13 \u0026lt;li\u0026gt;聊天室\u0026lt;/li\u0026gt; 14 \u0026lt;li\u0026gt;2023 鐵人賽\u0026lt;/li\u0026gt; 15 \u0026lt;/ul\u0026gt; 16 \u0026lt;ul class=\u0026#34;right\u0026#34;\u0026gt; 17 \u0026lt;li\u0026gt;\u0026lt;i class=\u0026#34;fa-solid fa-magnifying-glass\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/li\u0026gt; 18 \u0026lt;li\u0026gt;\u0026lt;button\u0026gt;鐵人發文\u0026lt;/button\u0026gt;\u0026lt;/li\u0026gt; 19 \u0026lt;li\u0026gt;發問\u0026lt;/li\u0026gt; 20 \u0026lt;li\u0026gt;發文 \u0026lt;span class=\u0026#34;caret\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt; 21 \u0026lt;li\u0026gt;\u0026lt;i class=\u0026#34;fa fa-commenting fa-fw button\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/li\u0026gt; 22 \u0026lt;li\u0026gt;\u0026lt;i class=\u0026#34;fa fa-bell fa-fw button\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/li\u0026gt; 23 \u0026lt;li class=\u0026#34;pro\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;https://member.ithome.com.tw/avatars/161968?s=ithelp\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt;毛哥EM\u0026lt;span class=\u0026#34;caret\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt; 24 \u0026lt;/ul\u0026gt; 25 \u0026lt;/div\u0026gt; 26 \u0026lt;/nav\u0026gt; 27 \u0026lt;div\u0026gt; 28 \u0026lt;section\u0026gt;\u0026lt;/section\u0026gt; 29 \u0026lt;aside\u0026gt;\u0026lt;img src=\u0026#34;https://ithelp.ithome.com.tw/static/2023ironman/img/ironman-banner.gif\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/aside\u0026gt; 30 \u0026lt;/div\u0026gt; 31\u0026lt;/main\u0026gt; 1* { 2 margin: 0; 3 padding: 0; 4 box-sizing: border-box; 5} 6body { 7 background: #f2f2f2; 8 font-family: system-ui; 9} 10header \u0026gt; div, 11nav \u0026gt; div, 12main \u0026gt; div { 13 padding: 15px; 14 max-width: 1170px; 15 margin: 0 auto; 16} 17header { 18 background: #fff; 19} 20header img { 21 width: 14%; 22 margin-top: 45px; 23 margin-bottom: 16px; 24 padding-right: 10px; 25} 26.fixedNav { 27 margin-bottom: 50px; 28} 29 30nav { 31 width: 100%; 32 background-color: #00a0e9; 33 box-shadow: 0 3px 12px rgba(0, 0, 0, 0.1); 34} 35nav \u0026gt; div { 36 min-height: 50px; 37 display: flex; 38 align-items: center; 39 color: #fff; 40 font-weight: 700; 41 padding: 0 10px; 42} 43li { 44 display: inline-block; 45 padding: 0 12px; 46 display: flex; 47 align-items: center; 48 gap: 6px; 49} 50i { 51 font-size: 1.2em; 52} 53.button { 54 color: #0f6b95; 55 font-size: 1em; 56} 57.caret { 58 display: inline-block; 59 margin-left: 2px; 60 border-top: 4px solid; 61 border-right: 4px solid transparent; 62 border-left: 4px solid transparent; 63} 64ul { 65 display: flex; 66 align-items: center; 67} 68button { 69 font-family: system-ui; 70 display: block; 71 padding: 2px 8px 5px; 72 box-shadow: 0px 2px 1px 1px #00637d; 73 background-color: #ffffff; 74 color: #1b79a2; 75 border-radius: 6px; 76 font-size: 16px; 77 outline: none; 78 border: none; 79} 80.right { 81 justify-content: flex-end; 82 flex-grow: 1; 83} 84.right li { 85 padding: 0 10px; 86} 87 88li img { 89 border-radius: 50%; 90 width: 36px; 91 height: 36px; 92} 93aside { 94 width: 300px; 95} 96aside, 97section { 98 background: #fff; 99 height: 200vh; 100} 101main \u0026gt; div { 102 display: flex; 103 gap: 30px; 104 padding-top: 30px; 105} 106section { 107 flex-grow: 1; 108 border-top: 3px solid #00a0e9; 109} 110aside { 111 background: linear-gradient( 112 #f2f2f2 270px, 113 #00a0e9 270px, 114 #00a0e9 320px, 115 #fff 320px 116 ); 117} 大概講幾個有趣的點:\n圖片來源是 Font Awesome \u0026lt;aside\u0026gt; 裡面的背景是用 linear-gradient 做的。先是背景灰色，然後是藍色、白色。感覺像是分成不同元素但為了方便就用一個漸層充當。 設定 max-width: 1170px 再加上 margin: 0 auto 來讓版面置中。 其他的沒什麼特別的。如果看不懂的話可以複習 Day3 用 Flex 切遍天下\nJavaScript 接下來寫 JavaScript，先抓白底標題元素。\n1const white = document.querySelector(\u0026#34;header\u0026#34;); 滾動時，如果導覽列底部超出視窗，就給藍色選單加上 .fixedNav 這個 class。如果沒有就會移除。\n1document.addEventListener(\u0026#34;scroll\u0026#34;, () =\u0026gt; 2 white.classList.toggle(\u0026#34;fixedNav\u0026#34;, white.getBoundingClientRect().bottom \u0026lt; 0) 3); element.classList.toggle 會在 class 存在時移除，不存在時加上。如果填寫兩個參數，第一個是要添加或移除的 class；第二個參數是布林值，會在布林值為 true 時加上，false 時移除。\n滾動效果 固定導覽列 ok 最後來補上一點 CSS。先是讓導覽列固定在最上方。\n1.fixedNav + nav { 2 position: fixed; 3 top: 0; 4 left: 0; 5} 然後因為導覽列固定在上方，原本的空間會被往上移導致被遮住。所以要白色標題底下加上 margin-bottom 來填滿原本的空間。\n1.fixedNav { 2 margin-bottom: 50px; 3} 滑出圖片 HTML 加上圖片\n1\u0026lt;!-- ... --\u0026gt; 2 \u0026lt;nav\u0026gt; 3 \u0026lt;div\u0026gt; 4 \u0026lt;img src=\u0026#34;https://ithelp.ithome.com.tw/storage/image/nav_logo.svg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; 5 \u0026lt;ul class=\u0026#34;left\u0026#34;\u0026gt; 6\u0026lt;!-- ... --\u0026gt; iT 邦幫忙的作法是把右邊的選單用 transform:translate() 往左平移遮住它。我把上面的選單設成半透明讓你看。\n這個方法很不錯，但我今天想和你分享另外一個做法。就是直接使用 width 控制。\n1nav \u0026gt; div \u0026gt; img { 2 width: 0px; 3 transition: width 0.2s linear; 4 object-fit: cover; 5 object-position: left; 6 height: 24px; 7} 8.fixedNav + nav \u0026gt; div \u0026gt; img { 9 width: 109px; 10} object-fit 可以讓圖片填滿容器，而不會變形。object-position 可以讓圖片往左對齊而不是中間。這樣就可以做到圖片從左邊滑出來的效果。\n成果 成果如下\nhttps://codepen.io/edit-mr/pen/WNLPYON\n以上就是我今天的分享，歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-27/","section":"post","tags":["HTML","CSS","JS"],"title":"Day 27 iT 邦幫忙::一起幫忙製作導覽列，拯救第27天"},{"body":"我們都知道 CSS 動畫可以用 @keyframes 來做，但是他們都是馬上就觸發的。就算元素還沒有出現在畫面上，動畫也已經開始了。\n如果要做出滾動到某個位置才觸發的動畫，就需要用到 JavaScript 來偵測滾動位置，然後再加上 CSS 動畫。沒錯，JavaScript 回來了。\n原理 我們要做的是當元素出現在畫面上時，才觸發動畫。所以我們要偵測元素是否出現在畫面上。\n我們可以用 getBoundingClientRect() 來取得元素相對於螢幕的位置，然後再用 window.innerHeight 來取得畫面的高度，就可以知道元素是否出現在畫面上了。\n這裡是一個我做的範例。你可以看到當元素的上方超出畫面時top就會變負值。當元素的下方超出畫面時bottom的值會大於螢幕高度。那麼我們只需要有任何一部分有顯示在畫面上就可以觸發動畫了。\nhttps://codepen.io/edit-mr/pen/ExGrxjX\n為甚麼不要等整個元素顯示出來在觸發動畫?\n因為如果元素很長，可能到半個畫面都空白之後他才出現會很奇怪。所以我們只要有任何一部分有顯示在畫面上就可以觸發動畫了，這樣滾動起來會比較順暢。\n如果你想要的話可以自己改成等整個元素顯示出來再觸發動畫，或是設置一些延遲時間以及增加動畫長度。後者我比較推薦。\n實作 先打點簡單的內容。我們幫需要動畫的內容加上 aos 這個 class。這樣我們只要偵測這些元素是否出現在畫面上。如果有的話就加上 ed 這個 class。這樣我們就可以用 CSS 來做動畫了。\n叫做 ed 是因為英文過去式常常加上 ed，想說蠻直覺野蠻短的。如果你有更好的主意也可以改成其他名字。\n1\u0026lt;h1 class=\u0026#34;aos\u0026#34;\u0026gt;Animate On Scroll\u0026lt;/h1\u0026gt; 2\u0026lt;p class=\u0026#34;aos\u0026#34;\u0026gt; 3 Lorem ipsum dolor sit amet consectetur adipisicing elit. Ad, mollitia magni nemo eius obcaecati aliquam ex nisi maiores. Autem hic illo quas amet ipsam. Eos tempore repellat sint illum tenetur! 4\u0026lt;/p\u0026gt; 5\u0026lt;h2 class=\u0026#34;aos\u0026#34;\u0026gt;Scroll\u0026lt;/h2\u0026gt; 6\u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; 7\u0026lt;div class=\u0026#34;aos\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 8\u0026lt;div class=\u0026#34;aos\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 9\u0026lt;div class=\u0026#34;aos\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 10\u0026lt;div class=\u0026#34;aos\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 1body { 2 max-width: 600px; 3 margin: 0 auto; 4 font-size: 2em; 5} 6h2 { 7 font-size: 2em; 8} 9div { 10 height: 5em; 11 background: lightblue; 12 margin: 1em; 13} 好的動畫我先簡單做一個淡入的動畫。平常隱藏起來，當加上 ed 這個 class 時就顯示出來。\n1.aos { 2 opacity: 0; 3 transition: opacity 1s; 4} 5 6.aos.ed { 7 opacity: 1; 8} 加上 JavaScript ，在頁面滾動時偵測每個有 .aos 的元素是否出現在畫面上。如果有的話就加上 ed 這個 class，沒有的話就回收。\n1function isElementInViewport(el) { 2 const rect = el.getBoundingClientRect(); 3 return rect.bottom \u0026lt; 0 || rect.top \u0026gt; window.innerHeight; 4} 5 6function addClassToVisibleElements() { 7 var aosElements = document.querySelectorAll(\u0026#34;.aos\u0026#34;); 8 aosElements.forEach(function (aosElement) { 9 if (!isElementInViewport(aosElement)) aosElement.classList.add(\u0026#34;ed\u0026#34;); 10 else aosElement.classList.remove(\u0026#34;ed\u0026#34;); 11 }); 12} 13 14document.addEventListener(\u0026#34;scroll\u0026#34;, addClassToVisibleElements); 15addClassToVisibleElements(); ok 成功，我們來多做幾個更浮誇的動畫。\n盡情發揮 我希望文字出來的時候可以有一點浮出水面的感覺。套用這個 class 的元素會先隱藏起來，當加上 ed 這個 class 時就會從下方滑出來。\n1.slideIn { 2 transform: translateY(1em); 3} 4.slideIn.ed { 5 transform: translateY(0em); 6} 再來做一個從螢幕左邊滑近來的動畫。\n1.slideInLeft { 2 transform: translateX(-100vw); 3} 4.slideInLeft.ed { 5 transform: translateX(0); 6} 最後來示範一個 @keyframes 的動畫，我們讓他放大縮小好了。因為它不需要漸入所以把原本的 opacity 拿掉了。蓋掉\n1.zoom { 2 opacity: 1; 3} 4.zoom.ed { 5 animation: zoom 1.5s forwards linear; 6} 7@keyframes zoom { 8 0% { 9 scale: 1; 10 } 11 25% { 12 scale: 1.5; 13 } 14 50% { 15 scale: 1; 16 } 17 75% { 18 scale: 1.25; 19 } 20 100% { 21 scale: 1; 22 } 23} 好啦成果如下，你可以試著滾動一下頁面看看。今天這幾行程式碼就一次取代了 Animate.css、WOW.js、AOS、ScrollReveal 這些函式庫，而且還有更簡單更高的自訂性。\nhttps://codepen.io/edit-mr/pen/rNoPBZe\n1\u0026lt;h1 class=\u0026#34;aos slideIn\u0026#34;\u0026gt;Animate On Scroll\u0026lt;/h1\u0026gt; 2\u0026lt;p class=\u0026#34;aos slideIn\u0026#34;\u0026gt; 3 Lorem ipsum dolor sit amet consectetur adipisicing elit. Ad, mollitia magni nemo eius obcaecati aliquam ex nisi maiores. Autem hic illo quas amet ipsam. Eos tempore repellat sint illum tenetur! 4\u0026lt;/p\u0026gt; 5\u0026lt;h2 class=\u0026#34;aos slideIn\u0026#34;\u0026gt;Scroll\u0026lt;/h2\u0026gt; 6\u0026lt;div class=\u0026#34;aos\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 7\u0026lt;div class=\u0026#34;aos\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 8\u0026lt;div class=\u0026#34;aos slideInLeft\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 9\u0026lt;div class=\u0026#34;aos zoom\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 10\u0026lt;div class=\u0026#34;aos slideIn\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 1body { 2 max-width: 600px; 3 margin: 0 auto; 4 font-size: 2em; 5} 6h2 { 7 font-size: 2em; 8} 9 10div { 11 height: 5em; 12 background: lightblue; 13 margin: 1em; 14} 15 16.aos { 17 opacity: 0; 18 transition: all 1s; 19} 20 21.aos.ed { 22 opacity: 1; 23} 24 25.slideIn { 26 transform: translateY(1em); 27} 28.slideIn.ed { 29 transform: translateY(0em); 30} 31 32.slideInLeft { 33 transform: translateX(-100vw); 34} 35.slideInLeft.ed { 36 transform: translateX(0); 37} 38 39.zoom { 40 opacity: 1; 41} 42.zoom.ed { 43 animation: zoom 1.5s forwards linear; 44} 45@keyframes zoom { 46 0% { 47 scale: 1; 48 } 49 25% { 50 scale: 1.5; 51 } 52 50% { 53 scale: 1; 54 } 55 75% { 56 scale: 1.25; 57 } 58 100% { 59 scale: 1; 60 } 61} 1function isElementInViewport(el) { 2 const rect = el.getBoundingClientRect(); 3 return rect.bottom \u0026lt; 0 || rect.top \u0026gt; window.innerHeight; 4} 5 6function addClassToVisibleElements() { 7 var aosElements = document.querySelectorAll(\u0026#34;.aos\u0026#34;); 8 aosElements.forEach(function (aosElement) { 9 if (!isElementInViewport(aosElement)) aosElement.classList.add(\u0026#34;ed\u0026#34;); 10 else aosElement.classList.remove(\u0026#34;ed\u0026#34;); 11 }); 12} 13 14document.addEventListener(\u0026#34;scroll\u0026#34;, addClassToVisibleElements); 15addClassToVisibleElements(); 以上就是我今天的分享，歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-26/","section":"post","tags":["HTML","CSS","JS"],"title":"Day26 不要躲在下面動! Animate On Scroll 自己做"},{"body":"我們今天要來做幾份漢堡選單。\n原理和 Day14 今天我想來點… 純 CSS 的開關 一樣，都是用 input 的 checkbox 來儲存狀態好讓其他元素可以抓到。而他本身的狀態使用 label 來遠端遙控。\n我先不要一次跳太多步驟。這是一個基本還未完成的版面。\n1\u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;menu\u0026#34;\u0026gt; 2\u0026lt;label for=\u0026#34;menu\u0026#34;\u0026gt; 3 \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; 4 \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; 5 \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; 6 \u0026lt;span class=\u0026#34;cover\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 7\u0026lt;/label\u0026gt; 1label { 2 width: 3rem; 3 height: 3rem; 4 background: #00c3ff; 5 display: block; 6 border-radius: 50%; 7 display: flex; 8 flex-direction: column; 9 align-items: center; 10 justify-content: center; 11 gap: 0.25em; 12 position: relative; 13} 14 15label div { 16 width: 1.5rem; 17 height: 0.25rem; 18 background: #fff; 19 border-radius: 0.25rem; 20} 21.cover { 22 position: absolute; 23 display: block; 24 top: 50%; 25 left: 50%; 26 transform: translate(-50%, -50%); 27 width: 100vmax; 28 height: 100vmax; 29 border-radius: 50%; 30 background: #80e1ff; 31 z-index: -1; 32} 可以看到我們已經有了漢堡選單的樣子。\u0026lt;label\u0026gt; 使用 flex 來垂直排列並且置中，gap 來設定間距，並設定 position: relative 來讓 position: absolute 的 .cover 可以定位到相同位置。\n如果已經看不懂的話可以複習:\nDay3 用 Flex 切遍天下 Day6 你怎在這? 攻克 Position 藍色圓形我們希望能夠填滿整個畫面，所以我們使用 100vmax 來選擇 vw 和 vh 之間比較大的值，這樣可以確保能夠蓋滿畫面但是長寬還是依樣來保持圓形。你會發現只有蓋住螢幕一半是因為我們把她往左上角移動了一半，所以只有一半的圓形在畫面上。沒關係我們為了安全起見設定大一點。最後使用 z-index 來讓他在最底層。\n把原本的勾選框隱藏起來再加上內文。漢堡選單裡面當然就是要放漢堡配料，效果如下\n1\u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;menu\u0026#34; checked\u0026gt; 2\u0026lt;label for=\u0026#34;menu\u0026#34;\u0026gt; 3 \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; 4 \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; 5 \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; 6 \u0026lt;span class=\u0026#34;cover\u0026#34;\u0026gt; 7 \u0026lt;ul\u0026gt; 8 \u0026lt;li\u0026gt;麵包\u0026lt;/li\u0026gt; 9 \u0026lt;li\u0026gt;肉排\u0026lt;/li\u0026gt; 10 \u0026lt;li\u0026gt;青菜\u0026lt;/li\u0026gt; 11 \u0026lt;li\u0026gt;麵包\u0026lt;/li\u0026gt; 12 \u0026lt;/ul\u0026gt; 13 \u0026lt;/span\u0026gt; 14\u0026lt;/label\u0026gt; 1body { 2 overflow: hidden; 3 font-family: system-ui; 4} 5input[type=\u0026#34;checkbox\u0026#34;] { 6 display: none; 7} 8label { 9 width: 3rem; 10 height: 3rem; 11 background: #00c3ff; 12 display: block; 13 border-radius: 50%; 14 display: flex; 15 flex-direction: column; 16 align-items: center; 17 justify-content: center; 18 gap: 0.25em; 19 position: relative; 20 cursor: pointer; 21} 22 23label div { 24 width: 1.5rem; 25 height: 0.25rem; 26 background: #fff; 27 border-radius: 0.25rem; 28 transition: all 0.3s; 29} 30.cover { 31 position: absolute; 32 display: block; 33 top: 50%; 34 left: 50%; 35 transform: translate(-50%, -50%); 36 width: 0; 37 height: 0; 38 border-radius: 50%; 39 background: #80e1ff; 40 z-index: -1; 41 transition: all 0.3s; 42 overflow: hidden; 43} 44input:checked ~ label \u0026gt; .cover { 45 width: 250vmax; 46 height: 250vmax; 47 border-radius: 50%; 48} 49 50ul { 51 position: absolute; 52 top: 50%; 53 left: 50%; 54 width: 100vw; 55 color: #fff; 56 font-size: 3em; 57 list-style: none; 58 font-weight: 700; 59} 最後是漢堡動畫，這裡就要發揮你自己的創意了。原理不難，這裡提供一個我現在想到的做法。我想要最上面的和最下面的旋轉 45 度，中間的變短到消失。所以我們先把中間的設定 width: 0; height: 0; ，然後我們把最上面的和最下面的設定 transform: rotate(45deg);，這樣就會旋轉 45 度了。這樣能夠做出一個箭頭:\n1input:checked ~ label \u0026gt; div:first-child { 2 transform: rotate(-45deg); 3} 4input:checked ~ label \u0026gt; div:nth-child(2) { 5 width: 0; 6} 7input:checked ~ label \u0026gt; div:nth-child(3) { 8 transform: rotate(45deg); 9} 再來做一個也很常見的打叉，為了方便我們乾脆全部使用 absolute 定位。成果如下:\nhttps://codepen.io/edit-mr/pen/zYyyEgz\n1body { 2 overflow: hidden; 3 font-family: system-ui; 4} 5input[type=\u0026#34;checkbox\u0026#34;] { 6 display: none; 7} 8label { 9 width: 3rem; 10 height: 3rem; 11 background: #00c3ff; 12 display: block; 13 border-radius: 50%; 14 position: relative; 15 cursor: pointer; 16} 17 18label div { 19 position: absolute; 20 width: 1.5rem; 21 height: 0.25rem; 22 background: #fff; 23 border-radius: 0.25rem; 24 transition: all 0.3s; 25 top: 50%; 26 left: 50%; 27 transform: translate(-50%, -50%); 28} 29.cover { 30 position: absolute; 31 display: block; 32 top: 50%; 33 left: 50%; 34 transform: translate(-50%, -50%); 35 width: 0; 36 height: 0; 37 border-radius: 50%; 38 background: #80e1ff; 39 z-index: -1; 40 transition: all 0.3s; 41 overflow: hidden; 42} 43input:checked ~ label \u0026gt; .cover { 44 width: 250vmax; 45 height: 250vmax; 46 border-radius: 50%; 47} 48 49ul { 50 position: absolute; 51 top: 50%; 52 left: 50%; 53 width: 100vw; 54 color: #fff; 55 font-size: 3em; 56 list-style: none; 57 font-weight: 700; 58} 59input:checked ~ label div:first-child { 60 left: 25%; 61 top: 50%; 62 transform: rotate(45deg); 63} 64input:checked ~ label div:nth-child(2) { 65 width: 0; 66} 67input:checked ~ label div:nth-child(3) { 68 left: 25%; 69 top: 50%; 70 transform: rotate(-45deg); 71} 72label \u0026gt; div:first-child { 73 top: calc(50% - 0.5rem); 74} 75label \u0026gt; div:nth-child(3) { 76 top: calc(50% + 0.5rem); 77} 你以為這樣就結束了? 還記得我們昨天講的 Day24 CSS 相融黏滯效果 嗎? 我們可以把他加上去讓他更有質感。\n這是一個會四處噴射漢堡選單\n1\u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;menu\u0026#34; checked\u0026gt; 2\u0026lt;label for=\u0026#34;menu\u0026#34;\u0026gt; 3 \u0026lt;div\u0026gt;🥩\u0026lt;/div\u0026gt; 4 \u0026lt;div\u0026gt;🥬\u0026lt;/div\u0026gt; 5 \u0026lt;div\u0026gt;🧀\u0026lt;/div\u0026gt; 6 🍔 7\u0026lt;/label\u0026gt; 1body { 2 overflow: hidden; 3 font-family: system-ui; 4} 5 6input[type=\u0026#34;checkbox\u0026#34;] { 7 display: none; 8} 9 10label { 11 width: 5rem; 12 height: 5rem; 13 background: #00c3ff; 14 display: block; 15 border-radius: 50%; 16 position: relative; 17 cursor: pointer; 18 margin: 1em auto; 19} 20 21div { 22 position: absolute; 23 top: 50%; 24 left: 50%; 25 transform: translate(-50%, -50%); 26 width: 3rem; 27 height: 3rem; 28 border-radius: 50%; 29 background: #00c3ff; 30 z-index: -1; 31 transition: all 0.3s; 32 overflow: hidden; 33} 34 35input:checked ~ label \u0026gt; div:nth-child(1) { 36 left: calc(50% - 5rem); 37} 38 39input:checked ~ label \u0026gt; div:nth-child(2) { 40 top: calc(50% + 5rem); 41} 42input:checked ~ label \u0026gt; div:nth-child(3) { 43 left: calc(50% + 5rem); 44} 45 46label, 47div { 48 display: flex; 49 align-items: center; 50 justify-content: center; 51 font-size: 2.5rem; 52 user-select: none; 53} 54 55div { 56 font-size: 1.5rem; 57} user-select: none; 可以讓使用者無法選取文字，這樣就不會在點擊時有文字被選取的問題了。\n加上昨天的相黏效果，變得更可愛了。\nhttps://codepen.io/edit-mr/pen/NWeeYRq\n1body { 2 overflow: hidden; 3 font-family: system-ui; 4 min-height: 100svh; 5} 6input[type=\u0026#34;checkbox\u0026#34;] { 7 display: none; 8} 9label { 10 width: 5rem; 11 height: 5rem; 12 display: block; 13 position: absolute; 14 cursor: pointer; 15 left: 50%; 16 transform: translate(-50%, -50%); 17} 18.box div { 19 width: 4rem; 20 height: 4rem; 21} 22.box div, 23label { 24 top: 50%; 25 border-radius: 50%; 26 background: #00c3ff; 27} 28.box div, 29.food, 30.food div { 31 position: absolute; 32 left: 50%; 33 transform: translate(-50%, -50%); 34 transition: 0.3s; 35} 36input:checked ~ .box div:first-child, 37input:checked ~ .food div:first-child { 38 left: calc(50% - 4rem); 39} 40input:checked ~ .box div:nth-child(2), 41input:checked ~ .food div:nth-child(2) { 42 top: calc(50% + 4rem); 43} 44input:checked ~ .box div:nth-child(3), 45input:checked ~ .food div:nth-child(3) { 46 left: calc(50% + 4rem); 47} 48.box div, 49label { 50 user-select: none; 51 filter: blur(10px); 52} 53.box { 54 background: #fff; 55 filter: contrast(20) hue-rotate(45deg); 56 height: 100svh; 57} 58.food, 59.food div { 60 top: 50.3%; 61 user-select: none; 62 pointer-events: none; 63} 64input:checked ~ .food div { 65 font-size: 1.5rem; 66} 67.food div { 68 font-size: 0rem; 69} 70.food div:last-child { 71 font-size: 2rem; 72} 手機版的淘寶之前有使用過類似的效果製作分享選單喔~\n因為相黏效果有先模糊，裡面的 Emoji 文字也會被模糊，所以我們在後面又做一個只有文字的 .food 來顯示文字。設定 pointer-events: none 就可以讓他不會被點擊到了，直接穿透去點擊下面的 label。\n背景顏色一定要記得設定，不然只會糊再一起沒有相黏效果。這是我 debug 半小時之後才想到的...\n以上就是我今天的分享，歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-25/","section":"post","tags":["HTML","CSS","JS"],"title":"Day25 有料的 CSS 漢堡選單"},{"body":"今天我們要來做這個紓壓的效果:\nhttps://codepen.io/edit-mr/pen/poqqoLr\n然後你可以應用做出一些很酷的效果:\n原理 原理其實很簡單。要讓兩個東西之間相連只需要模糊就會糊在一起了。\n1\u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt; 2 \u0026lt;div class=\u0026#34;circle-small\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 3 \u0026lt;div class=\u0026#34;circle-big\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 4\u0026lt;/div\u0026gt; 1.box { 2 position: relative; 3 height: 100vh; 4 background-color: #fff; 5} 6.circle-big, 7.circle-small { 8 filter: blur(10px); 9 border-radius: 50%; 10 width: 80px; 11 height: 80px; 12 background-color: red; 13 position: absolute; 14 left: 50%; 15 top: 50%; 16 transform: translate(-50%, -50%); 17} 18.circle-big { 19 width: 100px; 20 height: 100px; 21 background-color: black; 22 transform: translate(0, -50%); 23} 然後增加對比讓中間模糊的部分更明顯:\n1.box { 2 position: relative; 3 height: 100vh; 4 background-color: #fff; 5 filter: contrast(20); 6} 最後讓它動起來\n1.box { 2 position: relative; 3 height: 500px; 4 filter: contrast(20); 5 background-color: #fff; 6} 7.circle-big, 8.circle-small { 9 border-radius: 50%; 10 filter: blur(10px); 11 animation: 2s infinite move alternate; 12 width: 80px; 13 height: 80px; 14 background-color: red; 15 transform: translatex(20px); 16 position: absolute; 17 left: 50%; 18 top: 50%; 19 transform: translate(-50%, -50%); 20} 21.circle-big { 22 width: 100px; 23 height: 100px; 24 background-color: black; 25 animation-delay: -2s; 26} 27 28@keyframes move { 29 from { 30 transform: translate(calc(-50% + 100px), -50%); 31 } 32 to { 33 transform: translate(calc(-50% - 100px), -50%); 34 } 35} 好，結束。\n你可以自由應用在你的網頁上。以下是幾個範例:\n來源: https://codepen.io/Chokcoco 連結: https://codepen.io/YusukeNakaya/pen/vvEqVx 這個效果明天會使用到，你可以來猜猜看。我剩下六天了，接下來原則上都是蠻重要的內容，要來完成一些很常見的版面和許多人習慣直接套庫的東西。以上就是我今天的分享，歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-24/","section":"post","tags":["HTML","CSS","JS"],"title":"Day24 CSS 相融黏滯效果"},{"body":"今天我們會提到幾個不同的原理。你可以像生菜沙拉一樣自己條配。\n漸層動畫有甚麼難的? 我阿嬤...不會 CSS\n1body { 2 background: linear-gradient(90deg, red, yellow); 3 animation: gradientChange 1s infinite; 4} 5 6@keyframes gradientChange { 7 to { 8 background: linear-gradient(90deg, yellow, green); 9 } 10} 額，只有層，沒有漸。這是因為漸層是屬於 background-image，你要他怎麼漸圖片?\n自己動 我們今天要用到的第一個方式是放大縮小，以及移動一個漸層，這樣就能做出類似於漸層的動畫。\nbackground-position 我們先把圖片拉長到兩倍，然後移動 background-position 來做出動畫。\n1body { 2 background: linear-gradient(90deg, red, yellow); 3 background-size: 200% 100%; 4 background-position: 0 0; 5 animation: gradientChange 2s infinite linear alternate; 6} 7 8@keyframes gradientChange { 9 from { 10 background-position: 0 0; 11 } 12 to { 13 background-position: 100% 0; 14 } 15} background-size background-size 如果不搭配 background-position 的會可以做出這種左邊維持不動，右邊比例不同漸層的效果。\n1body { 2 background: linear-gradient(90deg, red, yellow); 3 animation: gradientChange 2s infinite linear alternate; 4} 5 6@keyframes gradientChange { 7 from { 8 background-size: 300% 300%; 9 } 10 to { 11 background-size: 100% 100%; 12 } 13} 如果把 background-position 移到最右邊就會變成右邊固定。\n1background-position: 100% 0; transform 和 background-position 一樣，transform 也可以做出類似的效果。不過記得我們在 Day20 GPU! 啟動! - 淺談 CSS3 硬體加速 有提到 transform 會啟動硬體加速，可以讓動畫更流暢，你的 CPU 也會感謝你。\n再把大小調到兩倍大即可。我稍微修改了顏色讓你看得更清楚。\n1\u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; 1body { 2 margin: 0; 3 overflow: hidden; 4} 5div { 6 background: linear-gradient(45deg, red, yellow, blue); 7 animation: gradientChange 4s infinite linear; 8 height: 200vh; 9 width: 200vw; 10} 11 12@keyframes gradientChange { 13 0% { 14 transform: translate(0, 0); 15 } 16 25% { 17 transform: translate(-50%, 0); 18 } 19 50% { 20 transform: translate(-50%, -50%); 21 } 22 75% { 23 transform: translate(0, -50%); 24 } 25 100% { 26 transform: translate(0, 0); 27 } 28} filter filter 濾鏡隨便給你開。\n複習: Day7 幫我開濾鏡 filter 1body { 2 margin: 0; 3} 4div { 5 background: linear-gradient(45deg, red, yellow); 6 animation: gradientChange 3s infinite; 7 min-height: 100vh; 8 filter: hue-rotate(50deg); 9} 10 11@keyframes gradientChange { 12 0 { 13 filter: hue-rotate(0); 14 } 15 100% { 16 filter: hue-rotate(360deg); 17 } 18} 你可以狂加讓他群魔亂舞起來。\nhttps://codepen.io/edit-mr/pen/mdaabzQ?editors=1100\n1body { 2 margin: 0; 3} 4div { 5 background: linear-gradient(45deg, red, yellow); 6 animation: gradientChange 3s infinite linear alternate; 7 min-height: 100vh; 8 filter: hue-rotate(50deg); 9} 10 11@keyframes gradientChange { 12 0 { 13 filter: hue-rotate(0) contrast(1000%) invert(0%); 14 } 15 100% { 16 filter: hue-rotate(360deg) contrast(300%) invert(100%); 17 } 18} 好的有點噁心，今天的漸層夠了，歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-23/","section":"post","tags":["HTML","CSS","JS"],"title":"Day23 優雅的漸層動畫 - 隨機而有秩序"},{"body":"今天我們要來做一些乱薍覼釠亂碼效果。\n效過在手，氣氛要有。\n基本版面 HTML 一個標題，一個 \u0026lt;div\u0026gt; 放亂碼，一個 \u0026lt;span\u0026gt; 拿來測長寬，稍後用到。\n1\u0026lt;h1\u0026gt;ITHOME\u0026lt;/h1\u0026gt; 2\u0026lt;div\u0026gt;LDHELDMEW...\u0026lt;/div\u0026gt; 3\u0026lt;span\u0026gt;a\u0026lt;/span\u0026gt; CSS 抓個 Google Font 來用，我用的是 Space Mono。\n1@import url(\u0026#34;https://fonts.googleapis.com/css2?family=Space+Mono:wght@700\u0026amp;display=swap\u0026#34;); 2 3body { 4 background: #000; 5 height: 100svh; 6 overflow: hidden; 7 color: #fff; 8} 9 10h1 { 11 font-size: 4em; 12 font-family: \u0026#34;Space Mono\u0026#34;, monospace; 13 position: absolute; 14 top: 50%; 15 left: 50%; 16 transform: translate(-50%, -100%); 17} 18div { 19 width: 100%; 20 word-wrap: break-word; 21} word-wrap: break-word; 這個屬性是讓文字超出邊界時，自動換行。\n有趣的 JavaScript 一步一步來\n亂碼 來做個亂碼函式，輸入一個數字，就會回傳那麼多個亂碼。\n一個變數 box 放著所有可能的字元，\n1const box = \u0026#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\u0026#34; Math.random() 會回傳一個 0 到 1 之間的數字\n1Math.random() 2// 0.946621565811897 Math.random()*5 會回傳一個 0 到 4 之間的數字\n1Math.random()*5 2//4.603685644684928 Math.floor() 會無條件捨去小數點\n1Math.floor(4.603685644684928) 2//4 這樣就有隨機取數了😯\n我們把它乘上 box.length，就會得到一個 0 到 box.length 之間的數字，再用 Math.floor() 取整數，就會得到一個 0 到 box.length - 1 之間的數字，這個數字就是 box 的索引，我們就可以從 box 裡面隨機取出一個字元。\n1box[Math.floor(Math.random() * box.length)]; 2//A 寫一個函式，輸入一個數字，就會用迴圈回傳那麼多個亂碼。\n1const box = \u0026#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\u0026#34;; 2 3const randomText = (amount) =\u0026gt; { 4 var a = \u0026#34;\u0026#34;; 5 for (var i = 0; i \u0026lt; amount; i++) 6 a += box[Math.floor(Math.random() * box.length)]; 7 return a; 8}; 測試一下\n1randomText(10) 2//\u0026#34;XVDBHCCQ39\u0026#34; 喔~😯\n需要幾個 螢幕有大有小，字體大小又都不一樣。沒關係，量一下就好了。\n\u0026lt;span\u0026gt; 裡面有一個字母a。量螢幕大小除以字母大小就是大約需要多少個字母\n1const singleText = document.querySelector(\u0026#34;span\u0026#34;); 2const total = 3 window.innerWidth * window.innerHeight / 4 singleText.offsetWidth / singleText.offsetHeight; 5//2736 喔~😯\n解碼效果 settimeout可以讓函式延遲執行\n1console.log(\u0026#34;never gonna give you up\u0026#34;) 2window.setTimeout(function () { 3 console.log(\u0026#34;never gonna let you down\u0026#34;) 4}, 2000); 5 6 //never gonna give you up 7 //(過了兩秒) 8 //never gonna let you down 一個雙層迴圈，每6次洗牌多顯示一個字。直到最後6個字都顯示完畢。\n1 for (let j = 0; j \u0026lt;= titleText.length; j++) { 2 window.setTimeout(function () { 3 var current = j; 4 for (let k = 0; k \u0026lt;= 5; k++) { 5 window.setTimeout(function () { 6 var correct = titleText.slice(0, current); 7 correct += randomText(titleText.length - current); 8 title.innerText = correct; 9 }, 50 * k); 10 } 11 }, 300 * j); 12 } 迴圈的延遲邏輯大概是這樣。\n喔~😯\n滑鼠位置 偵測滑鼠移動\n1document.onmousemove = (e) =\u0026gt; console.log(e); 2// mousemove { target: html, buttons: 0, clientX: 1004, clientY: 242, layerX: 1004, layerY: 242 } 改成執行我們的函式\n1document.onmousemove = (e) =\u0026gt; bluh(e); 我們把讀到的滑鼠位置，放進 CSS 屬性 --x 和 --y 裡面。讓遮罩來定位。\n1 bg.style.setProperty(\u0026#34;--x\u0026#34;, `${e.clientX}px`); 2 bg.style.setProperty(\u0026#34;--y\u0026#34;, `${e.clientY}px`); 完整函式\n1const bluh = (e) =\u0026gt; { 2 const bg = document.querySelector(\u0026#34;div\u0026#34;); 3 const singleText = document.querySelector(\u0026#34;span\u0026#34;); 4 const total = 5 (window.innerWidth * window.innerHeight) / 6 singleText.offsetWidth / 7 singleText.offsetHeight; 8 bg.innerText = randomText(total); 9 bg.style.setProperty(\u0026#34;--x\u0026#34;, `${e.clientX}px`); 10 bg.style.setProperty(\u0026#34;--y\u0026#34;, `${e.clientY}px`); 11}; 12 13document.onmousemove = (e) =\u0026gt; bluh(e); 14bluh(); 喔~😯\n遮罩 CSS 了解一下 1div { 2 --x: -100vw; 3 --y: -100vh; 4 width: 100%; 5 word-wrap: break-word; 6 -webkit-mask-image: radial-gradient( 7 circle at var(--x) var(--y), 8 #fff, 9 #ffffff44 15em 10 ); 11} 遮罩設置成一個圓形漸層，並定位到 --x 和 --y 的位置。\n成果 https://codepen.io/edit-mr/pen/bGOxLoV\n1\u0026lt;h1\u0026gt;ITHOME\u0026lt;/h1\u0026gt; 2\u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; 3\u0026lt;span\u0026gt;a\u0026lt;/span\u0026gt; 1@import url(\u0026#34;https://fonts.googleapis.com/css2?family=Space+Mono:wght@700\u0026amp;display=swap\u0026#34;); 2 3body { 4 background: #000; 5 height: 100svh; 6 overflow: hidden; 7 color: #fff; 8} 9 10h1 { 11 font-size: 4em; 12 color: #fff; 13 font-family: \u0026#34;Space Mono\u0026#34;, monospace; 14 position: absolute; 15 top: 50%; 16 left: 50%; 17 transform: translate(-50%, -100%); 18} 19div { 20 --x: -100vw; 21 --y: -100vh; 22 width: 100%; 23 word-wrap: break-word; 24 -webkit-mask-image: radial-gradient( 25 circle at var(--x) var(--y), 26 #fff, 27 #ffffff44 15em 28 ); 29} 1const title = document.querySelector(\u0026#34;h1\u0026#34;); 2 3const titleText = \u0026#34;ITHOME\u0026#34;; 4 5setInterval(function () { 6 for (let j = 0; j \u0026lt;= titleText.length; j++) { 7 window.setTimeout(function () { 8 var current = j; 9 for (let k = 0; k \u0026lt;= 5; k++) { 10 window.setTimeout(function () { 11 var correct = titleText.slice(0, current); 12 correct += randomText(titleText.length - current); 13 title.innerText = correct; 14 }, 50 * k); 15 } 16 }, 300 * j); 17 } 18}, 5000); 19 20const box = \u0026#34;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\u0026#34;; 21 22const randomText = (amount) =\u0026gt; { 23 var a = \u0026#34;\u0026#34;; 24 for (var i = 0; i \u0026lt; amount; i++) 25 a += box[Math.floor(Math.random() * box.length)]; 26 return a; 27}; 28 29const bluh = (e) =\u0026gt; { 30 const bg = document.querySelector(\u0026#34;div\u0026#34;); 31 const singleText = document.querySelector(\u0026#34;span\u0026#34;); 32 const total = 33 (window.innerWidth * window.innerHeight) / 34 singleText.offsetWidth / 35 singleText.offsetHeight; 36 bg.innerText = randomText(total); 37 bg.style.setProperty(\u0026#34;--x\u0026#34;, `${e.clientX}px`); 38 bg.style.setProperty(\u0026#34;--y\u0026#34;, `${e.clientY}px`); 39}; 40 41document.onmousemove = (e) =\u0026gt; bluh(e); 42bluh(); 以上就是我今天的分享，歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-22/","section":"post","tags":["HTML","CSS","JS"],"title":"Day 22 JavaScript 乱薍覼釠亂碼效果"},{"body":"今天是第二十一天，已經走完2/3的路程，我媽還以為我早被淘汰了。這個系列明明是叫【不用庫 也能酷 - 玩轉 CSS \u0026amp; Js 特效】，但 Js 出現了幾篇?有五篇嗎?難道 JavaScript 是來湊關鍵字的嗎?今天就來聊聊為甚麼使用純 CSS 做效果如此吸引人。\n對手進場 CSS transition 和 @keyframes 就性能上來說兩者基本上沒有區別，所以我們都歸於 CSS 動畫。你可以根據使用情境來選擇使用哪一種。比如說滑鼠互動可以使用 transition，出場動畫可以使用 @keyframes。\n複習：Day4 自己動! @keyframes 與 Transition\nJavaScript requestAnimationFrame() requestAnimationFrame() 會在瀏覽器畫下一幀繪制之前調用。因此比設定固定時間重繪的 setTimeout() 或 setInterval()效率高得多。開發人員可以通過簡單地改變元素的樣式（或者更新畫布繪制等等）來創建動畫。\n備註: 不管是 CSS 動畫還是 JavaScript 動畫，如果你離開當前頁面，動畫就會停止。比如說 Day10 永無止境跑馬燈 - 不同螢幕 相同速度 的跑馬燈就是如此。\n如果你想要在背景執行動畫，可以使用 Web Worker。\n就是要對決 我這裡使用 FireFox Developer Edition 來測試，因為它在 CSS Debug 有很多很棒的功能。而今天我們要讓他幫助我們看到動畫的 FPS。\n用 Firefox 還有一個原因是他在隱私權保護方面抓得很緊，所以在 Firefox 上面能用基本上 Chromium 都不會有太大問題。\n首先請你先到about:config，他很貼心請你要小心，選擇接受風險並繼續即可。\n請你搜尋gfx.webrender.debug.profiler-ui\ngfx.webrender.debug.profiler-ui 設為 FPS， gfx.webrender.debug.profiler-ui 設為 true (點擊加號)。 記得先設成 FPS 再設成 true，不然整個畫面會被資訊轟炸，比 Minecraft 的 F3 還要誇張好幾倍。\n接下來是暖暖包時間，我們要來翻滾1000個 \u0026lt;div\u0026gt; 正方形。你可以自行貼上以下程式碼，或是用我的。然後點擊切換按鈕來切換動畫方式。\n1\u0026lt;div id=\u0026#34;header\u0026#34;\u0026gt; 2 \u0026lt;button id=\u0026#34;toggle-button\u0026#34;\u0026gt;切换\u0026lt;/button\u0026gt; 3 \u0026lt;span id=\u0026#34;type\u0026#34;\u0026gt;CSS Animation\u0026lt;/span\u0026gt; 4\u0026lt;/div\u0026gt; 5\u0026lt;div id=\u0026#34;box-container\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 1#header { 2 position: sticky; 3 top: 0.5rem; 4 margin: 0 0.5rem; 5 z-index: 100; 6 background-color: lightgreen; 7} 8 9#box-container { 10 margin-top: 1.5rem; 11 display: grid; 12 grid-template-columns: repeat(40, 1fr); 13 gap: 15px; 14} 15 16.box { 17 width: 30px; 18 height: 30px; 19 background-color: red; 20} 21 22.css-animation { 23 animation: animate 6s linear 0s infinite alternate; 24} 25 26@keyframes animate { 27 0% { 28 transform: translateX(0) rotate(0deg) scale(0.6); 29 } 30 100% { 31 transform: translateX(500px) rotate(360deg) scale(1.4); 32 } 33} 1const boxes = []; 2const button = document.getElementById(\u0026#34;toggle-button\u0026#34;); 3const boxContainer = document.getElementById(\u0026#34;box-container\u0026#34;); 4const animationType = document.getElementById(\u0026#34;type\u0026#34;); 5 6// create boxes 7for (let i = 0; i \u0026lt; 1000; i++) { 8 const div = document.createElement(\u0026#34;div\u0026#34;); 9 div.classList.add(\u0026#34;css-animation\u0026#34;); 10 div.classList.add(\u0026#34;box\u0026#34;); 11 boxContainer.appendChild(div); 12 boxes.push(div.style); 13} 14 15let toggleStatus = true; 16let rafId; 17button.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { 18 if (toggleStatus) { 19 animationType.textContent = \u0026#34; requestAnimationFrame\u0026#34;; 20 for (const child of boxContainer.children) { 21 child.classList.remove(\u0026#34;css-animation\u0026#34;); 22 } 23 rafId = window.requestAnimationFrame(animate); 24 } else { 25 window.cancelAnimationFrame(rafId); 26 animationType.textContent = \u0026#34; CSS animation\u0026#34;; 27 for (const child of boxContainer.children) { 28 child.classList.add(\u0026#34;css-animation\u0026#34;); 29 } 30 } 31 toggleStatus = !toggleStatus; 32}); 33 34const duration = 6000; 35const translateX = 500; 36const rotate = 360; 37const scale = 1.4 - 0.6; 38let start; 39function animate(time) { 40 if (!start) { 41 start = time; 42 rafId = window.requestAnimationFrame(animate); 43 return; 44 } 45 46 const progress = (time - start) / duration; 47 if (progress \u0026lt; 2) { 48 let x = progress * translateX; 49 let transform; 50 if (progress \u0026gt;= 1) { 51 x = (2 - progress) * translateX; 52 transform = `translateX(${x}px) rotate(${ 53 (2 - progress) * rotate 54 }deg) scale(${0.6 + (2 - progress) * scale})`; 55 } else { 56 transform = `translateX(${x}px) rotate(${progress * rotate}deg) scale(${ 57 0.6 + progress * scale 58 })`; 59 } 60 61 for (const box of boxes) { 62 box.transform = transform; 63 } 64 } else { 65 start = null; 66 } 67 rafId = window.requestAnimationFrame(animate); 68} CSS transition 和 @keyframes 可以看到 FPS 穩定在 60 左右。\nJavaScript requestAnimationFrame() 可以看到 FPS 掉到 30 左右。\nなに？為甚麼？ 原因就是使用 CSS 動畫的時候他 Call out 給 GPU 幫忙做硬體加速。而使用 JavaScript 動畫的時候他只能靠 CPU。\n複習: Day20 GPU! 啟動! - 淺談 CSS3 硬體加速\nJavaScript 的 requestAnimationFrame() 會引起 reflow（重新布局），整個流程需要再跑一次。而 CSS 的 transition 和 @keyframes 只需要單獨稍微調整一下動畫的圖層就好了。\n你可以測試一下，關閉硬體加速功能(不用拔顯卡，到 config 關就可以了)之後兩者的 FPS 理論上就會差不多了。\nJavaScript: 我存在的意義是甚麼? 雖然 CSS3 十分強大，但還是有很多效果是只能透過 JavaScript 實現，或著是使用 JavaScript 實現會更加方便。如果是有複雜的數學邏輯或著是需要互動的動畫，使用 JavaScript 都會比較簡單。\n明天我們就來玩玩 JavaScript 的特效吧。\n以上就是我今天的分享，歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-21/","section":"post","tags":["HTML","CSS","JS"],"title":"Day21 就是要對決 - CSS 和 JS 動畫，哪個更絲滑？"},{"body":"今天我們要來探討如何善用使用者的 GPU 資源，讓網頁的動畫更加順暢。我盡量讓內容簡單易懂，可以當一篇科普文章閱讀。\n瀏覽器的渲染流程 在我們討論之前，我們先來看看瀏覽器的渲染流程。這裡我畫了一張可愛的小圖\nJavaScript: JavaScript 實現動畫效果，DOM 元素操作等。 Style（計算樣式）: 決定每個 DOM 元素應該套用什麼 CSS 規則。 Layout（佈局）: 計算每個 DOM 元素在最終畫面上顯示的大小和位置。 由於 web 頁面的元素佈局是相對的，所以其中任一個元素的位置發生變化，都會聯動的引起其他元素發生變化，這個過程叫做 reflow。 Paint（繪製）: 在多個圖層上繪製 DOM 元素的文字、顏色、圖像、邊框和陰影等。 Composite（渲染圖層合併）: 依照合理的順序合併圖層然後顯示到螢幕上。 在這裡你可以看到每次你的動畫在跑， CPU 都會需要重新計算一次佈局，然後重新繪製，最後再合併圖層。這個過程會造成 CPU 的負擔，導致電腦發熱，耗電量增加，然後全台停電等等。這時候 CSS3 硬體加速就派上用場了。\n啊 GPU 買你那麼貴你在那裡爽啊 其實 GPU 也不是一直在爽，它有時候也有在做事情。我們先來談談 GPU 厲害的點在哪裡。\nGPU 厲害的是他會把在改變的元素獨立抽出來一個圖層，修改完再插回去。這樣就不用每次都重新繪製整個畫面，只需要繪製這個塗層就好了。這樣就可以大大減少 CPU 的負擔，讓動畫更加順暢。\n如何使用 CSS3 硬體加速 但由此你也可以看出，一定要瀏覽器建立獨立圖層才能使用 GPU 加速。\n自動建立條件 以下這些情況瀏覽器會自動幫你建立獨立圖層：\n使用某些特定的3D或透視效果的CSS屬性。 在顯示視頻時，使用支援硬體加速的video元素。 在畫布上繪製圖像時，使用3D(WebGL)技術或硬體加速的2D畫布(canvas)元素。 如果你的網頁使用了Flash等外掛程式。 當改變元素的透明度（opacity）時，使用CSS動畫，或者對元素應用webkit 畫變換。 使用支援硬體加速的CSS濾鏡效果的元素。 當一個元素包含其他子元素，這些子元素在自己的圖層中。 當一個元素有一個兄弟元素，並且這個兄弟元素在一個特別的圖層中，同時這個兄弟元素的顯示順序比較低（z-index較小）。 GPU! 啟動! 這幾個 CSS 屬性會觸發建立獨立圖層：\ntransform opacity filter will-change 但如果你沒有想要使用這些屬性但是你還是想要使用 GPU 加速，你可以用一些小手段來誘導瀏覽器開啟 GPU 加速。\n1.element { 2 transform: translateZ(0); 3 /**或著**/ 4 transform: rotateZ(360deg); 5 transform: translate3d(0, 0, 0); 6} 注意事項 當使用3D硬體加速來提升動畫性能時，最好為元素添加一個z-index屬性，手動調整複合層的排序。這樣可以有效減少Chrome創建不必要的複合層，提高渲染性能，特別是在安卓手機上，優化效果很明顯。\n過多地開啟硬體加速可能會消耗較多的內存，因此在什麼情況下啟用硬體加速，以及為多少元素啟用硬體加速，需要根據測試結果來決定。\nGPU 渲染會影響字體的抗鋸齒效果。這是因為 GPU 和 CPU 具有不同的渲染機制，即使最終停用硬體加速，文字在動畫期間仍可能顯示得模糊不清。\n結論 今天我們講了一下 GPU 的運作原理，以及如何使用 CSS3 硬體加速。希望你們可以在開發網頁時，能夠善用 GPU 資源，讓網頁的動畫更加順暢。\n或著是冬天快要到了，知道怎麼用安卓手機以及學校電腦製作暖暖包了吧w\n沒有在開玩笑，這個就是一個不錯的暖暖包網頁。以上就是我今天的分享，歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道:網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-20/","section":"post","tags":["HTML","CSS","JS"],"title":"Day20 GPU! 啟動! - 淺談 CSS3 硬體加速"},{"body":"最討厭的廣告就是彈出式 Lightbox 廣告了，他會突然跳出來，然後你要去找那個超小的叉叉關掉他。今天我們不是要重現煩人的廣告，而是要來認識 CSS 選擇器 :target 並做出以下效果。\n我們來用 Lightbox 看貓貓\n認識 :taget :target 是一個虛擬類別（pseudo-class） 選擇器。他選擇的是超連結連結到的錨點（anchor）。直接上範例你就懂了。\n1\u0026lt;a href=\u0026#34;#one\u0026#34;\u0026gt;One\u0026lt;/a\u0026gt; 2\u0026lt;a href=\u0026#34;#two\u0026#34;\u0026gt;Two\u0026lt;/a\u0026gt; 3\u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;no\u0026lt;/a\u0026gt; 4\u0026lt;div id=\u0026#34;one\u0026#34;\u0026gt;One\u0026lt;/div\u0026gt; 5\u0026lt;div id=\u0026#34;two\u0026#34;\u0026gt;Two\u0026lt;/div\u0026gt; 1div:target{ 2 background: yellow; 3} 實作 那我們就裝飾一下這個版面和 Lightbox 就好啦!先從維基共享資源抓幾張圖片。\n1\u0026lt;div id=\u0026#34;one\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;https://upload.wikimedia.org/wikipedia/commons/thumb/5/5e/Domestic_cat_in_the_grass.JPG/640px-Domestic_cat_in_the_grass.JPG\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 2\u0026lt;div id=\u0026#34;two\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;https://upload.wikimedia.org/wikipedia/commons/thumb/1/15/Cat_August_2010-4.jpg/640px-Cat_August_2010-4.jpg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 3\u0026lt;div id=\u0026#34;three\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;https://upload.wikimedia.org/wikipedia/commons/thumb/4/4d/Cat_November_2010-1a.jpg/640px-Cat_November_2010-1a.jpg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 4\u0026lt;section\u0026gt; 5 \u0026lt;a href=\u0026#34;#one\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;https://upload.wikimedia.org/wikipedia/commons/thumb/5/5e/Domestic_cat_in_the_grass.JPG/640px-Domestic_cat_in_the_grass.JPG\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; 6 \u0026lt;a href=\u0026#34;#two\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;https://upload.wikimedia.org/wikipedia/commons/thumb/1/15/Cat_August_2010-4.jpg/640px-Cat_August_2010-4.jpg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; 7 \u0026lt;a href=\u0026#34;#three\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;https://upload.wikimedia.org/wikipedia/commons/thumb/4/4d/Cat_November_2010-1a.jpg/640px-Cat_November_2010-1a.jpg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; 8\u0026lt;/section\u0026gt; 9\u0026lt;a href=\u0026#34;#\u0026#34; id=\u0026#34;close\u0026#34;\u0026gt;✖\u0026lt;/a\u0026gt; 連結有點亂我簡化一下，架構長這樣。\n1\u0026lt;div id=\u0026#34;one\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 2\u0026lt;div id=\u0026#34;two\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 3\u0026lt;div id=\u0026#34;three\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 4\u0026lt;section\u0026gt; 5 \u0026lt;a href=\u0026#34;#one\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; 6 \u0026lt;a href=\u0026#34;#two\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; 7 \u0026lt;a href=\u0026#34;#three\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; 8\u0026lt;/section\u0026gt; 9\u0026lt;a href=\u0026#34;#\u0026#34; id=\u0026#34;close\u0026#34;\u0026gt;✖\u0026lt;/a\u0026gt; 簡單 CSS 裝飾，顏色使用 Nord 的 Polar Night 配色\n1body { 2 background: #2e3440; 3 text-align: center; 4 color: #eceff4; 5 font-size: system-ui; 6} 7section { 8 display: flex; 9 justify-content: center; 10 align-items: center; 11 gap: 1rem; 12} 13a img { 14 width: 30vw; 15 display: block; 16} 接下來來設計 Lightbox。我們希望他能置中並且背景有些許的模糊。因此設定在 :target 時背景使用 filter 來 blur 以及不透明度降低。而 Lightbox 本身則是使用 transform 來置中。\n1div:target \u0026gt; img { 2 opacity: 1; 3} 4div \u0026gt; img { 5 position: fixed; 6 top: 50%; 7 left: 50%; 8 transform: translate(-50%, -50%); 9 opacity: 0; 10 pointer-events: none; 11 width: 90vw; 12 height: calc(100vh - 6rem); 13 object-fit: contain; 14 z-index: 2; 15} 16 17div:target ~ #close { 18 display: block; 19} 20 21div:target ~ section { 22 filter: opacity(0.2) blur(10px); 23} 關閉按鈕就放到右上角即可。\n1#close { 2 display: none; 3 position: fixed; 4 right: 1em; 5 top: 1em; 6 color: #fff; 7 text-decoration: none; 8 font-size: 2rem; 9} 針對幾個可能有疑惑的 CSS 補充說明一下\npointer-events: none 這個屬性可以讓滑鼠事件穿透，也就是讓滑鼠點不到他。因為如果使用 display: none 隱藏顯示就不會有淡入淡出效果。 object-fit: contain 這個屬性可以讓圖片維持比例並且完整顯示在容器內。設定 width 和 height 等於是限定範圍，圖片會盡量放到最大但是不會超出。 z-index 這個屬性可以設定元素的疊層順序，數字越大越在上面。因為我們希望 Lightbox 在最上面，所以設定為 2。 calc() 這個函式可以讓你做數學運算，這邊是為了讓圖片寬度和高度稍微比螢幕小一點。 position: fixed 這個屬性可以讓元素固定在螢幕上，不會隨著滾動而移動。方便我們定位原色到正中間。 最後加上一點動畫讓整體看起來更順暢。為了方便我就這樣寫，不過平常少用 * 會比較好，因為塞太多容易影響到效能。\n1* { 2 transition: all 0.3s; 3} 成果 最終成果如下: https://codepen.io/edit-mr/pen/jOXpJXX\n1\u0026lt;div id=\u0026#34;one\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;https://upload.wikimedia.org/wikipedia/commons/thumb/5/5e/Domestic_cat_in_the_grass.JPG/640px-Domestic_cat_in_the_grass.JPG\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 2\u0026lt;div id=\u0026#34;two\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;https://upload.wikimedia.org/wikipedia/commons/thumb/1/15/Cat_August_2010-4.jpg/640px-Cat_August_2010-4.jpg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 3\u0026lt;div id=\u0026#34;three\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;https://upload.wikimedia.org/wikipedia/commons/thumb/4/4d/Cat_November_2010-1a.jpg/640px-Cat_November_2010-1a.jpg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 4\u0026lt;section\u0026gt; 5 \u0026lt;a href=\u0026#34;#one\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;https://upload.wikimedia.org/wikipedia/commons/thumb/5/5e/Domestic_cat_in_the_grass.JPG/640px-Domestic_cat_in_the_grass.JPG\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; 6 \u0026lt;a href=\u0026#34;#two\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;https://upload.wikimedia.org/wikipedia/commons/thumb/1/15/Cat_August_2010-4.jpg/640px-Cat_August_2010-4.jpg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; 7 \u0026lt;a href=\u0026#34;#three\u0026#34;\u0026gt;\u0026lt;img src=\u0026#34;https://upload.wikimedia.org/wikipedia/commons/thumb/4/4d/Cat_November_2010-1a.jpg/640px-Cat_November_2010-1a.jpg\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; 8\u0026lt;/section\u0026gt; 9\u0026lt;a href=\u0026#34;#\u0026#34; id=\u0026#34;close\u0026#34;\u0026gt;✖\u0026lt;/a\u0026gt; 1* { 2 transition: all 0.3s; 3} 4body { 5 background: #2e3440; 6 text-align: center; 7 color: #eceff4; 8 font-size: system-ui; 9 display: flex; 10 align-items: center; 11 min-height: 100svh; 12 justify-content: center; 13 overflow: hidden; 14} 15section { 16 display: flex; 17 justify-content: center; 18 align-items: center; 19 gap: 1rem; 20} 21a img { 22 width: 30vw; 23 display: block; 24} 25 26div:target \u0026gt; img { 27 opacity: 1; 28} 29div \u0026gt; img { 30 position: fixed; 31 top: 50%; 32 left: 50%; 33 transform: translate(-50%, -50%); 34 opacity: 0; 35 pointer-events: none; 36 width: 90vw; 37 height: calc(100vh - 6rem); 38 object-fit: contain; 39 z-index: 2; 40} 41#close { 42 display: none; 43 position: fixed; 44 right: 1em; 45 top: 1em; 46 color: #fff; 47 text-decoration: none; 48 font-size: 2rem; 49} 50div:target ~ #close { 51 display: block; 52} 53 54div:target ~ section { 55 filter: opacity(0.2) blur(10px); 56 pointer-events: none; 57} 以上就是我今天的分享，歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-19/","section":"post","tags":["HTML","CSS","JS"],"title":"Day19 純 CSS 做出彈出式 Lightbox"},{"body":"今天我們要使用純 CSS 實現 DVD 反彈動畫，讓大家認識 steps() 以及 animation-composition 屬性的使用方式，並提供這個實用的應用。(應該吧...)\nHTML HTML，簡單\n1\u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; CSS 版面 CSS 我們先不放背景圖片，用正方形就好了。用這種深藍色整個味道都出來了XD。\u0026lt;body\u0026gt; 設定 overflow: hidden; 是因為有時候反彈時會撞出滾動條，看起來不是很舒服。\n1body { 2 background: #000; 3 overflow: hidden; 4} 5 6div { 7 width: 100px; 8 height: 100px; 9 background: blue; 10} 動畫 我們分析一下，DVD 反彈動畫需要的動畫\n水平移動 - translateX() 垂直移動 - translateY() 水平碰撞時改變顏色 垂直碰撞時改變顏色 移動動畫 我們先來實現水平移動，我們使用 translateX() 來實現，並且使用 animation 屬性來實現動畫。因為元素定位點是在左上角，所以我們需要記得移動到 100vw - 100% 的位置就可以了。\ntransform:translate() 的百分比是相對於自己的寬高計算的，所以我們可以使用 100% 來表示自己的寬高。\n1@keyframes horizontal { 2 from { 3 transform: translateX(0); 4 } 5 to { 6 transform: translateX(calc(100vw - 100%)); 7 } 8} OK沒問題。那垂直的也加上去。兩個時間故意設定稍微不一樣，讓路線隨機一點。\n1div { 2 width: 100px; 3 height: 100px; 4 background: blue; 5 animation: horizontal 2.6s infinite linear alternate, 6 vertical 2s infinite linear alternate; 7} 8 9@keyframes horizontal { 10 from { 11 transform: translateX(0); 12 } 13 to { 14 transform: translateX(calc(100vw - 100%)); 15 } 16} 17@keyframes vertical { 18 from { 19 transform: translateY(0); 20 } 21 to { 22 transform: translateY(calc(100vh - 100%)); 23 } 24} 欸等等，垂直移動效果加上去之後，水平移動的效果就沒了!因為兩個都是使用 transform 屬性，所以其中一個被蓋過去了。但我們的動畫是要同時執行，變色動畫都還沒加上去啊!在之前常見的解決方法有\n使用 top、left 屬性代替 transform 屬性 外面再包一層 div，讓 兩個 div 同時移動 而今天我們有一個更加優雅的解決方法，就是使用 animation-composition 屬性，讓兩個動畫同時執行。我們給 div 加上 animation-composition 屬性，並且設定 accumulate 值。\n1 animation-composition: accumulate; 呼~救回來了，但是我們的動畫還沒有變色，我們來加上變色的動畫。\n變色動畫 我們使用 filter 屬性來實現，filter 屬性有一個 hue-rotate() 函式，可以讓顏色旋轉，我們使用 hue-rotate(360deg) 來讓顏色旋轉一圈，就可以讓顏色變回原本的顏色了，讓所有顏色都可以跑過一次。\n顏色改變的動畫長度記得要是平移動畫長度的倍數，才可以在撞牆時剛好變色。\n複習: Day7 幫我開濾鏡 filter\n1div{ 2/* 同上 */ 3 animation: 4 horizontal 2.6s infinite linear alternate, 5 vertical 2s infinite linear alternate, 6 colorX 26s infinite, 7 colorY 14s infinite; 8 animation-composition: accumulate; 9} 10 11@keyframes colorX { 12 to { 13 filter: hue-rotate(360deg); 14 } 15} 16@keyframes colorY { 17 to { 18 filter: hue-rotate(360deg); 19 } 20} 怎麼說呢，顏色是漸漸變而不是直接變，這樣看起來就不是很像 DVD 動畫了。而這個時候我們就要拿出 step()。steps() 是一個可以讓動畫在指定時間內，依照指定的步數來執行的函式，而不是漸變。中間可以填入數字代表中間要經過幾個顏色。\n1 animation: 2 horizontal 2.6s infinite linear alternate, 3 vertical 2s infinite linear alternate, 4 colorX 26s infinite steps(10), 5 colorY 14s infinite steps(7); DVD 圖片 最後換成 DVD 的圖片。從維基百科抓 svg 向量圖...結果...\n甚麼都看不到。原因是 Logo 的背景是黑色的。你可以使用我製作的這個圖示上色 CSS濾鏡生成器，透過 filter 屬性來改變 Logo 的顏色。把它貼上到動畫中，並在後面的hue-rotate() 屬性中加上360度就可以囉。\n1@keyframes colorX { 2 from{ 3 filter: invert(9%) sepia(84%) saturate(5931%) hue-rotate(245deg) brightness(116%) contrast(153%); 4 } 5 to { 6 filter: invert(9%) sepia(84%) saturate(5931%) hue-rotate(605deg) brightness(116%) contrast(153%); 7 } 8} 成果如下\nhttps://codepen.io/edit-mr/pen/abPjjMd\n1\u0026lt;img src=\u0026#34;https://upload.wikimedia.org/wikipedia/commons/9/9b/DVD_logo.svg\u0026#34;\u0026gt; 1body { 2 background: #000; 3 overflow: hidden; 4} 5 6img { 7 width: 100px; 8 animation: horizontal 2.6s infinite linear alternate, 9 vertical 2s infinite linear alternate, colorX 26s infinite steps(10), 10 colorY 14s infinite steps(7); 11 animation-composition: accumulate; 12} 13@keyframes horizontal { 14 from { 15 transform: translateX(0); 16 } 17 to { 18 transform: translateX(calc(100vw - 100%)); 19 } 20} 21@keyframes vertical { 22 from { 23 transform: translateY(0); 24 } 25 to { 26 transform: translateY(calc(100vh - 100%)); 27 } 28} 29@keyframes colorX { 30 from { 31 filter: invert(9%) sepia(84%) saturate(5931%) hue-rotate(245deg) 32 brightness(116%) contrast(153%); 33 } 34 to { 35 filter: invert(9%) sepia(84%) saturate(5931%) hue-rotate(605deg) 36 brightness(116%) contrast(153%); 37 } 38} 39@keyframes colorY { 40 from { 41 filter: invert(9%) sepia(84%) saturate(5931%) hue-rotate(245deg) 42 brightness(116%) contrast(153%); 43 } 44 to { 45 filter: invert(9%) sepia(84%) saturate(5931%) hue-rotate(605deg) 46 brightness(116%) contrast(153%); 47 } 48} 以上就是我今天的分享，歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n參考資料: ChokCoco | MDN\n","link":"https://emtech.cc/post/2023ironman-18/","section":"post","tags":["HTML","CSS","JS"],"title":"Day18 純 CSS DVD 反彈動畫"},{"body":"以往製作波浪效果不是使用 GIF 就是借助貝茲曲線。貝茲曲線就是 Ai 或是 Vectornator (現在叫做Curve) 裡面的鋼筆工具。隨便拉都會有波浪的感覺，且使用 SVG或 JavaScript Canvas 都不難實現。\n然而在 CSS 實現貝茲曲線一直都沒有一個優雅的方法。我在這個中秋連假和家人一起到墾丁露營，我一邊看著大海海浪一邊喝著椰子水思考這個問題…\n突然我注意到，你看椰子是不是看起來很圓，但又不是很圓。像極了圓角 border-radius 接近50%但又還沒達到。\n1\u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; 1div { 2 width: 300px; 3 height: 300px; 4 background: green; 5 border-radius: 45%; 6} 7 8body { 9 display: flex; 10 align-items: center; 11 justify-content: center; 12 min-height: 100svh; 13} 如果把它轉起來的話…\n1div { 2 width: 300px; 3 height: 300px; 4 background: green; 5 border-radius: 45%; 6 animation: spin 5s linear infinite; 7} 8 9@keyframes spin { 10 to { 11 transform: rotate(360deg); 12 } 13} 是不是有點波浪的感覺？也有點像一些手機充電的動畫。我們就是要借助這個起伏製作出波浪動畫。而實際上要怎麼做呢？我們先把背景設定成藍色，接著把這個椰子放大好幾倍把這個海切出海浪。\nhttps://codepen.io/edit-mr/pen/dywjOyw\n這裡關於置中我想補充一個點，就是因為我們已經在使用 transform: rotate() 屬性旋轉，所以我沒有用 translate()來置中。因為我們知道寬度是150vw，所以只需要把多出來的50vw切一半丟到左邊就可以了。\n最後來多疊幾個，然後裝飾一下它。成果如下：\nhttps://codepen.io/edit-mr/pen/JjwBbgg\n可以看出我有疊第二個，並且微調顏色圓角，並稍微延遲，讓他看起來不要過度整齊。外框是先疊一層白色 border，再一層藍色 outline。最後再加上一個文字，就完成了。\n1\u0026lt;main\u0026gt; 2 \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; 3 \u0026lt;div class=“second”\u0026gt;\u0026lt;/div\u0026gt; 4 \u0026lt;h2\u0026gt;40%\u0026lt;/h2\u0026gt; 5\u0026lt;/main\u0026gt; 1body { 2 overflow: hidden; 3 display: flex; 4 justify-content: center; 5 align-items: center; 6 min-height: 100svh; 7} 8main { 9 width: 300px; 10 height: 300px; 11 background: #03bafc; 12 overflow: hidden; 13 border-radius: 50%; 14 border: 5px solid #fff; 15 outline: 5px solid #03bafc; 16 position: relative; 17} 18div { 19 width: 450px; 20 height: 450px; 21 background: #52bdff; 22 border-radius: 43%; 23 animation: spin 5s linear infinite; 24 position: absolute; 25 bottom: 100px; 26 left: -75px; 27} 28.second { 29 animation-delay: 0.5s; 30 bottom: 120px; 31 background: #fff; 32 border-radius: 45%; 33} 34h2 { 35 position: absolute; 36 font-family: system-ui; 37 font-size: 30px; 38 color: #0369ad; 39 top: 50%; 40 left: 50%; 41 transform: translate(-50%, -50%); 42} 43 44@keyframes spin { 45 to { 46 transform: rotate(360deg); 47 } 48} 以上就是我今天的分享，歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-17/","section":"post","tags":["HTML","CSS","JS"],"title":"Day17 css.wav 純CSS波浪進度條"},{"body":"今天我們要來製作一個時鐘。不使用圖片，只使用 CSS 來繪製。我的目標是可以做出類似於 Apple iOS17 StandBy 的時鐘效果。\nHTML 首先是 HTML，非常老實。一個時鐘，裡面3個指針，兩個中間的裝飾軸圓圈，以及12個數字。度數和數字分別用 CSS 變數和 HTML 屬性存放。當然你要都用 CSS 也可以，我只是想示範怎麼使用。\n1\u0026lt;div class=\u0026#34;clock\u0026#34;\u0026gt; 2 \u0026lt;div class=\u0026#34;hour-hand\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 3 \u0026lt;div class=\u0026#34;minute-hand\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 4 \u0026lt;div class=\u0026#34;second-hand\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 5 \u0026lt;div class=\u0026#34;clockCenter\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 6 \u0026lt;div class=\u0026#34;clockCenterCenter\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 7 \u0026lt;div class=\u0026#34;digit\u0026#34; style=\u0026#34;--deg: 0;\u0026#34; data-digit=\u0026#34;12\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 8 \u0026lt;div class=\u0026#34;digit\u0026#34; style=\u0026#34;--deg: 30;\u0026#34; data-digit=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 9 \u0026lt;div class=\u0026#34;digit\u0026#34; style=\u0026#34;--deg: 60;\u0026#34; data-digit=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 10 \u0026lt;div class=\u0026#34;digit\u0026#34; style=\u0026#34;--deg: 90;\u0026#34; data-digit=\u0026#34;3\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 11 \u0026lt;div class=\u0026#34;digit\u0026#34; style=\u0026#34;--deg: 120;\u0026#34; data-digit=\u0026#34;4\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 12 \u0026lt;div class=\u0026#34;digit\u0026#34; style=\u0026#34;--deg: 150;\u0026#34; data-digit=\u0026#34;5\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 13 \u0026lt;div class=\u0026#34;digit\u0026#34; style=\u0026#34;--deg: 180;\u0026#34; data-digit=\u0026#34;6\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 14 \u0026lt;div class=\u0026#34;digit\u0026#34; style=\u0026#34;--deg: 210;\u0026#34; data-digit=\u0026#34;7\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 15 \u0026lt;div class=\u0026#34;digit\u0026#34; style=\u0026#34;--deg: 240;\u0026#34; data-digit=\u0026#34;8\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 16 \u0026lt;div class=\u0026#34;digit\u0026#34; style=\u0026#34;--deg: 270;\u0026#34; data-digit=\u0026#34;9\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 17 \u0026lt;div class=\u0026#34;digit\u0026#34; style=\u0026#34;--deg: 300;\u0026#34; data-digit=\u0026#34;10\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 18 \u0026lt;div class=\u0026#34;digit\u0026#34; style=\u0026#34;--deg: 330;\u0026#34; data-digit=\u0026#34;11\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 19\u0026lt;/div\u0026gt; CSS CSS要怎麼畫出時鐘呢？我們會需要幫這個 div 添加幾個漸層。\n時間刻度 - conic-gradient 為了方便大家比較我把圖放在一起。\nconic-gradient 的語法和其他漸層語法很相似。繞一圈跑，可以設定開始和結束的角度，沒寫角度就自動平分。比如說第一個：\n1div { 2 width: 150px; 3 height: 150px; 4 background: conic-gradient(blue, red); 5} 如果你這樣打會得到一個錐形。和 linear-graient 的圖形原理相同，就是不給他過度的區域。\n1.one { 2 background: conic-gradient(blue 0 15deg, red 15deg); 3} 設定開始結束角度就可以改成 repeating-conic-gradient 讓他重複。記得是 repeating 不是 repeat 喔～\n1.two { 2 background: repeating-conic-gradient(blue 0 15deg, red 15deg 30deg); 3} 最後把角度條寫一點就可以囉～\n1.three { 2 background: repeating-conic-gradient(blue 0 1deg, red 0 30deg); 3} 圓形 radial-gradient radial-gradient 會從裡到外。一樣原理，不給他地方漸層就會出現圓形。讓他原形畢露\n1div { 2 width: 200px; 3 height: 200px; 4 background: radial-gradient(red, blue); 5} 6.circle { 7 background: radial-gradient(red 50%, blue 50%); 8} 這樣就可以把時鐘中間的部分挖出來囉。\n旋轉時間 這個也蠻有趣的。首先在時鐘的中間放一個 div，用為元素在右邊放數字。\n1\u0026lt;main\u0026gt; 2 \u0026lt;div class=“no”\u0026gt;\u0026lt;/div\u0026gt; 3\u0026lt;/main\u0026gt; 1main { 2 width: 500px; 3 height: 500px; 4 border-radius: 50%; 5 background: lightblue; 6 position: relative; 7} 8 9.no { 10 position: absolute; 11 left: 50%; 12 top: 50%; 13 width: 100px; 14 height: 100px; 15 background: pink; 16} 17.no::after { 18 font-size: 3rem; 19 content: “5”; 20 display: block; 21 transform: translateX(200px); 22} 旋轉方塊裡面裡面數字也會跟著轉。\n1.no { 2 position: absolute; 3 left: 50%; 4 top: 50%; 5 width: 100px; 6 height: 100px; 7 background: pink; 8 transform: rotate(60deg); 9} 不過這樣數字就歪了！沒事，偽元素轉回來就好了。\n1.no::after { 2 font-size: 3rem; 3 content: “5”; 4 display: block; 5 transform: translateX(200px) rotate(-60deg); 6} 你會發現因為我們剛才所有元素定位點都是靠上對齊所以有點偏移，沒關係最後再校正回歸就可以了。\n指針 指針就跟剛才的粉紅正方形一樣，只是長一點而已。選轉定位點記得放在中間上面喔，這樣才能指對方向。\n1 transform-origin: center center; 在一起 把以上所以的和在一起吧。\n1body { 2 display: flex; 3 align-items: center; 4 justify-content: center; 5 min-height: 100svh; 6 background: #000; 7 font-family: system-ui; 8 font-weight: 800; 9} 10.clock { 11 width: 300px; 12 height: 300px; 13 background: radial-gradient(#000 65%, transparent 10%), 14 repeating-conic-gradient(from -0.5deg, #fff 0 1deg, transparent 0deg 30deg), 15 repeating-conic-gradient(from -0.5deg, gray 0 1deg, transparent 0deg 6deg); 16 border-radius: 50%; 17 position: relative; 18} 19.digit::before { 20 content: attr(data-digit); 21 display: block; 22 transform: rotate(calc(var(--deg) * -1deg)); 23 text-align: center; 24} 25.digit { 26 position: absolute; 27 top: calc(50% - 15px); 28 left: calc(50% - 16px); 29 width: 1em; 30 height: 1em; 31 font-size: 2em; 32 color: #fff; 33 transform: rotate(calc(var(--deg) * 1deg)) translateY(-115px); 34 transform-origin: center center; 35} 36.clockCenter, 37.clockCenterCenter { 38 position: absolute; 39 top: 50%; 40 left: 50%; 41 transform: translate(-50%, -50%); 42 width: 12px; 43 height: 12px; 44 background: #ffaf3f; 45 border: 0.1em solid #fff; 46 border-radius: 50%; 47 display: block; 48} 49.clockCenterCenter { 50 background: #000; 51 border: none; 52 width: 6px; 53 height: 6px; 54 z-index: 10; 55} 56.hour-hand, 57.minute-hand, 58.second-hand { 59 position: absolute; 60 top: 50%; 61 left: 50%; 62 background-color: #fff; 63 transform-origin: top center; 64} 65.hour-hand, 66.minute-hand { 67 width: 10px; 68 height: 70px; 69 margin-left: -5px; 70 border-radius: 5px; 71} 72.minute-hand { 73 height: 128px; 74} 75.hour-hand::after, 76.minute-hand::after { 77 transform: translateY(-0.7em); 78 display: block; 79 content: \u0026#34;\u0026#34;; 80 width: 4px; 81 margin-left: 33.333333%; 82 height: 50px; 83 background-color: #fff; 84} 85.second-hand { 86 width: 2px; 87 height: 168px; 88 margin-left: -0.7px; 89 background-color: #ffaf3f; 90 border-radius: 2px 2px 0 0; 91 transition: transform 0.2s; 92} JavaScript JavaScript 沒有什麼難的。就是小學數學題算時鐘走幾度。比如說秒針一分鐘走一圈，所以一秒走360除以60等於6度。\n需要注意一下的是因為指針的定位點在中間上面，所以一開始是在6點鐘方向。你可以把指針改成從中間下面對齊，或著是度數直接加半圈。\n1const hourHand = document.querySelector(”.hour-hand“); 2const minuteHand = document.querySelector(”.minute-hand“); 3const secondHand = document.querySelector(”.second-hand“); 4function updateClock() { 5 const now = new Date(); 6 const hours = now.getHours(); 7 const minutes = now.getMinutes(); 8 const seconds = now.getSeconds(); 9 const hourRotation = ((hours % 12) * 360) / 12 + ((minutes / 60) * 360) / 12 + 180; 10 const minuteRotation = ((minutes % 60) * 360) / 60 + ((seconds / 60) * 360) / 60 + 180; 11 const secondRotation = ((seconds % 60) * 360) / 60 + 180; 12 hourHand.style.transform = `rotate(${hourRotation}deg) translateY(18px)`; 13 minuteHand.style.transform = `rotate(${minuteRotation}deg) translateY(20px)`; 14 secondHand.style.transform = `rotate(${secondRotation}deg) translateY(-18px)`; 15} 16 17setInterval(updateClock, 1000); 18updateClock(); 正當你以為終於結束的時候，你無意間看到了這個畫面…\n結果對了，方法錯了。因為角度降回180，結果他還真的轉回去。\n想要讓他一直轉下去就要提醒他莫忘初衷，把之前轉的度數都加進去即可。\n1const hourHand = document.querySelector(\u0026#34;.hour-hand\u0026#34;); 2const minuteHand = document.querySelector(\u0026#34;.minute-hand\u0026#34;); 3const secondHand = document.querySelector(\u0026#34;.second-hand\u0026#34;); 4function updateClock() { 5 const now = new Date(); 6 const hours = now.getHours(); 7 const minutes = now.getMinutes(); 8 const seconds = now.getSeconds(); 9 const hourRotation = 10 ((hours % 12) * 360) / 12 + ((minutes / 60) * 360) / 12 + 180; 11 const minuteRotation = 12 ((minutes % 60) * 360) / 60 + 13 ((seconds / 60) * 360) / 60 + 14 180 + 15 hours * 360; 16 const secondRotation = 17 ((seconds % 60) * 360) / 60 + 180 + （hours * 60 + minutes） * 360; 18 hourHand.style.transform = `rotate(${hourRotation}deg) translateY(18px)`; 19 minuteHand.style.transform = `rotate(${minuteRotation}deg) translateY(20px)`; 20 secondHand.style.transform = `rotate(${secondRotation}deg) translateY(-18px)`; 21} 22 23setInterval(updateClock, 1000); 24updateClock(); 終於成功啦！有個87%像吧w\nhttps://codepen.io/edit-mr/pen/wvRXMLG\n以上就是我今天的分享。我有看到有人是算了第一個角度之後就每秒固定加上去度數。不過萬一你有延遲或者是卡頓他的時間就會跑掉了，所以我還是建議每次都重新抓時間做計算。歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-16/","section":"post","tags":["HTML","CSS","JS"],"title":"Day16 今天我想來...欸現在幾點? - CSS畫出 iOS 時鐘"},{"body":"昨天我們做了一個開關，那麼我們今天就來做一個選單吧！\n這個雖然是一種 radio 選單，但對於選擇數字這種有連續性，或著是比較短的文字，使用這種風格都是一種不錯的選擇。可以讓版面更乾淨，也比下拉式選單或著是傳統的radio都更方便操作。重點是不用寫一行 JavaScript，只要純 CSS 就可以完成。\n原理 和昨天的類似，不過今天不需要 \u0026lt;label\u0026gt;。點擊透明的 \u0026lt;input\u0026gt; 之後後面的一個圓形 \u0026lt;div\u0026gt; 就會跑過來。最上面用一層 \u0026lt;div\u0026gt; 疊上去數字即可，當然你要使用 \u0026lt;label\u0026gt; 也是可以的。\n開始做吧! 照剛才原理寫出 HTML，然後加上 CSS 即可。\nHTML 1\u0026lt;div class=\u0026#34;hope-container\u0026#34;\u0026gt; 2 \u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;hope\u0026#34; value=\u0026#34;0\u0026#34;\u0026gt; 3 \u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;hope\u0026#34; value=\u0026#34;1\u0026#34;\u0026gt; 4 \u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;hope\u0026#34; value=\u0026#34;2\u0026#34; checked=\u0026#34;\u0026#34;\u0026gt; 5 \u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;hope\u0026#34; value=\u0026#34;3\u0026#34;\u0026gt; 6 \u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;hope\u0026#34; value=\u0026#34;4\u0026#34;\u0026gt; 7 \u0026lt;div class=\u0026#34;hope-selected\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 8 \u0026lt;div class=\u0026#34;hope-label\u0026#34;\u0026gt; 9 \u0026lt;div\u0026gt;0\u0026lt;/div\u0026gt; 10 \u0026lt;div\u0026gt;1\u0026lt;/div\u0026gt; 11 \u0026lt;div\u0026gt;2\u0026lt;/div\u0026gt; 12 \u0026lt;div\u0026gt;3\u0026lt;/div\u0026gt; 13 \u0026lt;div\u0026gt;4\u0026lt;/div\u0026gt; 14 \u0026lt;/div\u0026gt; 15\u0026lt;/div\u0026gt; 新擬物化設計 Neumorphism 的介面 CSS 的部分我想要製作使用新擬物化設計 Neumorphism，或是說 Soft UI 的風格。有點像 iPhone3 擬物化設計跟 iPhone5 之後現代扁平化設計結合。有很明顯得陰影但又很有質感。\n來源: Payment App (Neumorphism)\n基本外框如下\n1* { 2 padding: 0; 3 margin: 0; 4 transition: all .2s; 5} 6body { 7 display: flex; 8 justify-content: center; 9 align-items: center; 10 min-height: 100svh; 11 background: #e6e7ee; 12} 13.hope-container { 14 height: 2rem; 15 border-radius: 2rem; 16 position: relative; 17 display: flex; 18 box-shadow: 3px 3px 6px #b8b9be inset, -3px -3px 6px #fff inset; 19 background-color: #e6e7ee; 20} 選擇框 這是裡面看不到的輸入框\n1.hope-container input { 2 width: 2rem; 3 height: 2rem; 4 display: block; 5 opacity: 0; 6 cursor: pointer; 7} 顯示數字 上面疊數字。為了讓數字對齊每個都寬度設為2rem再置中。\n1.hope-label { 2 position: absolute; 3 left: 0; 4 pointer-events: none; 5 display: flex; 6 align-items: center; 7 justify-content: space-between; 8 width: 100%; 9 height: 2rem; 10} 11 12.hope-label \u0026gt; div { 13 width: 2rem; 14 text-align: center; 15} 小球 最後是選擇，並會左右移動的圓形。設定 position: absolute 並用 left 屬性來移動他的位置。這樣就可以做到左右移動的效果。\n1.hope-selected { 2 width: 2rem; 3 height: 2rem; 4 position: absolute; 5 left: 0; 6 border-radius: 50px; 7 background: #7a85dc; 8 pointer-events: none; 9 box-shadow: 0 0 3px #545fb6 inset; 10} 移動小球 根據選擇的值來移動小球。這邊使用 nth-child 來選擇第幾個元素。如果被勾選就會觸發CSS移動球到對應的位置。\n1.hope-container input:nth-child(2):checked ~ .hope-selected { 2 left: 2rem; 3} 4 5.hope-container input:nth-child(3):checked ~ .hope-selected { 6 left: 4rem; 7} 8 9.hope-container input:nth-child(4):checked ~ .hope-selected { 10 left: 6rem; 11} 12 13.hope-container input:nth-child(5):checked ~ .hope-selected { 14 left: 8rem; 15} 裡面的數字變色一下，不然紫色實在太暗了\n1.hope-container input:nth-child(1):checked ~ .hope-label \u0026gt; div:nth-child(1) { 2 color: #e6e7ee; 3} 4 5.hope-container input:nth-child(2):checked ~ .hope-label \u0026gt; div:nth-child(2) { 6 color: #e6e7ee; 7} 8 9.hope-container input:nth-child(3):checked ~ .hope-label \u0026gt; div:nth-child(3) { 10 color: #e6e7ee; 11} 12 13.hope-container input:nth-child(4):checked ~ .hope-label \u0026gt; div:nth-child(4) { 14 color: #e6e7ee; 15} 16 17.hope-container input:nth-child(5):checked ~ .hope-label \u0026gt; div:nth-child(5) { 18 color: #e6e7ee; 19} 好啦，這樣就做完了!\nhttps://codepen.io/edit-mr/pen/LYMmQOE\n以上就是我今天的分享，你可以根據你的喜好增加陰影或其他動畫效果。歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-15/","section":"post","tags":["HTML","CSS","JS"],"title":"Day15 今天我想來點...純CSS的並排選單"},{"body":"在手機開關的設定裡面通常不是 checkbox ，而是這種 toggle 開關。因為比較好看，且更有開關的感覺。\n廢話不多說，今天就來把它做出來吧\n原理 開關本身還是 checkbox 勾選框，但是我們把原本勾勾的隱藏起來，然後用圓形開關代替。當被勾選時白色的圓形移動到右邊，而背景顏色漸變成綠色。\n寫 checkbox 的 CSS 時因為\ninput 是插入一個元素，而不是一個範圍，所以不能使用 ::before 和 ::after 來做。 checkbox 顯示一定是正方形，如果設置為其他長寬比塊白的地方還是可以點擊。 checkbox 無法設定背景顏色 問題那麼多，因此我們只需要input幫我們掛名存狀態，然後把它藏在角落裡面就好了。\n我們需要用其他元素來做開關的外觀。可以讓 checkbox 隱藏在 HTML 較前面的部分，然後用其他元素來控制 checkbox 的狀態。而能夠遠端遙控 checkbox 的元素叫做 label 。我們可以用 label 來控制 checkbox 的狀態。只需要點擊 label checkbox 也會感覺到。\n開始製作 HTML 如下，我想用這個開關來控制背景顏色。\n1\u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;switch\u0026#34;\u0026gt; 2\u0026lt;label class=\u0026#34;toggle\u0026#34; for=\u0026#34;switch\u0026#34;\u0026gt;\u0026lt;/label\u0026gt; 3\u0026lt;div class=\u0026#34;light\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 先簡單切版\n1*, 2label::after { 3 margin: 0; 4 padding: 0; 5 transition: all 0.3s; 6} 7#switch { 8 display: none; 9} 10label { 11 width: 3.5rem; 12 height: 2rem; 13 background: #e9e9eb; 14 border-radius: 1rem; 15 position: relative; 16 cursor:pointer; 17} 18body { 19 display: flex; 20 justify-content: center; 21 align-items: center; 22 min-height: 100svh; 23} 24.light { 25 position: fixed; 26 width: 100%; 27 height: 100%; 28 left: 0; 29 top: 0; 30 z-index: -1; 31 background: #444444; 32} 33label::after { 34 position: absolute; 35 left: 0.15rem; 36 top: 0.15rem; 37 content: \u0026#34;\u0026#34;; 38 width: 1.7rem; 39 height: 1.7rem; 40 border-radius: 50%; 41 background: #fff; 42 pointer-events: none; 43} 這樣你會得到一個非常簡單的版面。而按鈕是在框框範圍都可以點選的。\n接著我們讓按鈕被勾選時，背景顏色漸變成白色。我們為了讓元素可以抓到勾選框的狀況，\u0026lt;input\u0026gt;需要被放在所有元素的前面。因為我們有選擇器+選擇後面的一個元素，~選擇所有後面的元素。\n1input:checked + label { 2 background: #34c85a; 3} 4input:checked + label::after { 5 left: 1.65rem; 6} 7input:checked ~ .light { 8 background: #fff; 9} 最後成果如下\nhttps://codepen.io/edit-mr/pen/KKbZjOq\n1\u0026lt;input type=\u0026#34;checkbox\u0026#34; id=\u0026#34;switch\u0026#34;\u0026gt; 2\u0026lt;label class=\u0026#34;toggle\u0026#34; for=\u0026#34;switch\u0026#34;\u0026gt;\u0026lt;/label\u0026gt; 3\u0026lt;div class=\u0026#34;light\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 1*, 2label::after { 3 margin: 0; 4 padding: 0; 5 transition: all 0.3s; 6} 7#switch { 8 display: none; 9} 10label { 11 width: 3.5rem; 12 height: 2rem; 13 background: #e9e9eb; 14 border-radius: 1rem; 15 position: relative; 16} 17body { 18 display: flex; 19 justify-content: center; 20 align-items: center; 21 min-height: 100svh; 22} 23.light { 24 position: fixed; 25 width: 100%; 26 height: 100%; 27 left: 0; 28 top: 0; 29 z-index: -1; 30 background: #444444; 31} 32label::after { 33 position: absolute; 34 left: 0.15rem; 35 top: 0.15rem; 36 content: \u0026#34;\u0026#34;; 37 width: 1.7rem; 38 height: 1.7rem; 39 border-radius: 50%; 40 background: #fff; 41 pointer-events: none; 42} 43 44input:checked + label { 45 background: #34c85a; 46} 47input:checked + label::after { 48 left: 1.65rem; 49} 50input:checked ~ .light { 51 background: #fff; 52} 以上就是我今天的分享，你可以根據你的喜好增加陰影或其他動畫效果。歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-14/","section":"post","tags":["HTML","CSS","JS"],"title":"Day14 今天我想來點… 純 CSS 的開關"},{"body":"昨天的內容是不是有一點燒腦?沒關係，今天來點輕鬆的，只有一行 JavaScript。不管是在線上的文書軟體、製作網站的網站、或甚至是 iOS StandBy 都會有顏色選單。今天我們就來做一個極簡的吧，還要加上自訂顏色的功能。\n顏色選單 HTML 首先我們來簡單切版一下。畫面中只有標題和選單。選單裡面放一堆顏色，然後再放一個自訂顏色的輸入框。這裡我們使用了一個 input type=\u0026quot;color\u0026quot; 的輸入框包在裡面，這個輸入框可以讓使用者選擇顏色，而且是原生的，不需要任何 JavaScript。當元素被點擊時，我們就把顏色傳給 JavaScript 更改背景。\n1\u0026lt;h1\u0026gt;顏色選單\u0026lt;/h1\u0026gt; 2\u0026lt;div class=\u0026#34;color-picker\u0026#34;\u0026gt; 3 \u0026lt;div class=\u0026#34;color-option\u0026#34; style=\u0026#34;background-color: #7aaaf1\u0026#34; onclick=\u0026#34;changeColor(\u0026#39;#7aaaf1\u0026#39;)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 4 \u0026lt;div class=\u0026#34;color-option\u0026#34; style=\u0026#34;background-color: #8683ff\u0026#34; onclick=\u0026#34;changeColor(\u0026#39;#8683ff\u0026#39;)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 5 \u0026lt;div class=\u0026#34;color-option\u0026#34; style=\u0026#34;background-color: #e683bc\u0026#34; onclick=\u0026#34;changeColor(\u0026#39;#e683bc\u0026#39;)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 6 \u0026lt;div class=\u0026#34;color-option\u0026#34; style=\u0026#34;background-color: #ff788c\u0026#34; onclick=\u0026#34;changeColor(\u0026#39;#ff788c\u0026#39;)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 7 \u0026lt;div class=\u0026#34;color-option\u0026#34; style=\u0026#34;background-color: #ff8d7b\u0026#34; onclick=\u0026#34;changeColor(\u0026#39;#ff8d7b\u0026#39;)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 8 \u0026lt;div class=\u0026#34;color-option\u0026#34; style=\u0026#34;background-color: #f8d175\u0026#34; onclick=\u0026#34;changeColor(\u0026#39;#f8d175\u0026#39;)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 9 \u0026lt;div class=\u0026#34;color-option\u0026#34; style=\u0026#34;background-color: #9ac78f\u0026#34; onclick=\u0026#34;changeColor(\u0026#39;#9ac78f\u0026#39;)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 10 \u0026lt;div class=\u0026#34;color-option\u0026#34; style=\u0026#34;background-color: #7dc4ca\u0026#34; onclick=\u0026#34;changeColor(\u0026#39;#7dc4ca\u0026#39;)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 11 \u0026lt;div class=\u0026#34;color-option\u0026#34; style=\u0026#34;background-color: #FFFFFF\u0026#34; onclick=\u0026#34;changeColor(\u0026#39;#FFFFFF\u0026#39;)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 12 \u0026lt;div class=\u0026#34;color-option\u0026#34; style=\u0026#34;background-color: #565c6a\u0026#34; onclick=\u0026#34;changeColor(\u0026#39;#565c6a\u0026#39;)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 13 \u0026lt;div class=\u0026#34;color-option\u0026#34; style=\u0026#34;background-color: #6b5762\u0026#34; onclick=\u0026#34;changeColor(\u0026#39;#6b5762\u0026#39;)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 14 \u0026lt;div class=\u0026#34;color-option\u0026#34; id=\u0026#34;color\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;color\u0026#34; onchange=\u0026#34;document.getElementById(\u0026#39;color\u0026#39;).style.backgroundColor=this.value;changeColor(this.value)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 15\u0026lt;/div\u0026gt; 輸入框被點擊並選擇顏色之後會觸發 onchange 事件。我們會把顏色傳給 changeColor() 這個函式更改背景，順便把自己的顏色也改成相同顏色。我們來加上一點簡單的 CSS。\nCSS 1body { 2 display: flex; 3 justify-content: center; 4 align-items: center; 5 flex-direction: column; 6 min-height: 100svh; 7 overflow: hidden; 8 font-family: system-ui; 9} 10 11.color-picker { 12 display: flex; 13 justify-content: center; 14 background: #ffffff55; 15 border-radius: 2.5vmax; 16 gap: 0.5vmax; 17 padding: 0.5vmax 1vmax; 18 box-shadow: 0 .3vmax 1vmax #00000022; 19} 20 21.color-option { 22 width: 2.5vmax; 23 height: 2.5vmax; 24 cursor: pointer; 25 border-radius: 50%; 26 overflow: hidden; 27 position: relative; 28} 29.color-option:hover { 30 box-shadow: 0 0 1vmax #ffdb4d55; 31} 可以看到顏色選單預設有一些 CSS 並不是特別好看。我們把他的不透明度設成0，這樣就能看不到他，但是點擊的時候還是可以選顏色。\n1.color-picker input[type=\u0026#34;color\u0026#34;] { 2 width: 5vw; 3 height: 5vw; 4 opacity: 0; 5 cursor: pointer; 6} 最後我們在顏色選單的最後面加上一個 + 號偽元素讓大家可以一眼看出這個是可以選自己顏色的。我們把這個 + 號的位置設成絕對定位 position:absolute，然後用 transform: translate(-50%, -50%) 把他的位置移動到正中間。我們把pointer-events設定成none，這樣就不會點擊到加號而選不到顏色按鈕了。\n1#color::after { 2 content: \u0026#34;+\u0026#34;; 3 font-size: 0.5em; 4 top: 50%; 5 left: 50%; 6 pointer-events: none; 7 position: absolute; 8 color: #fff; 9 transform: translate(-50%, -50%); 10 font-size: 1.5rem; 11} JS 最後讓我們建立一個 changeColor() 函式，這個函式會把傳進來的顏色設定成背景顏色。\n1const changeFontColor = c =\u0026gt; document.body.style.background = c; 這是ES6的寫法，如果你不習慣可以改成\n1function changeFontColor(c) { 2 document.body.style.background = c; 3} 這樣就完成啦\nhttps://codepen.io/edit-mr/pen/abPVWBJ\n1\u0026lt;h1\u0026gt;顏色選單\u0026lt;/h1\u0026gt; 2\u0026lt;div class=\u0026#34;color-picker\u0026#34;\u0026gt; 3 \u0026lt;div class=\u0026#34;color-option\u0026#34; style=\u0026#34;background-color: #7aaaf1\u0026#34; onclick=\u0026#34;changeFontColor(\u0026#39;#7aaaf1\u0026#39;)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 4 \u0026lt;div class=\u0026#34;color-option\u0026#34; style=\u0026#34;background-color: #8683ff\u0026#34; onclick=\u0026#34;changeFontColor(\u0026#39;#8683ff\u0026#39;)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 5 \u0026lt;div class=\u0026#34;color-option\u0026#34; style=\u0026#34;background-color: #e683bc\u0026#34; onclick=\u0026#34;changeFontColor(\u0026#39;#e683bc\u0026#39;)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 6 \u0026lt;div class=\u0026#34;color-option\u0026#34; style=\u0026#34;background-color: #ff788c\u0026#34; onclick=\u0026#34;changeFontColor(\u0026#39;#ff788c\u0026#39;)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 7 \u0026lt;div class=\u0026#34;color-option\u0026#34; style=\u0026#34;background-color: #ff8d7b\u0026#34; onclick=\u0026#34;changeFontColor(\u0026#39;#ff8d7b\u0026#39;)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 8 \u0026lt;div class=\u0026#34;color-option\u0026#34; style=\u0026#34;background-color: #f8d175\u0026#34; onclick=\u0026#34;changeFontColor(\u0026#39;#f8d175\u0026#39;)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 9 \u0026lt;div class=\u0026#34;color-option\u0026#34; style=\u0026#34;background-color: #9ac78f\u0026#34; onclick=\u0026#34;changeFontColor(\u0026#39;#9ac78f\u0026#39;)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 10 \u0026lt;div class=\u0026#34;color-option\u0026#34; style=\u0026#34;background-color: #7dc4ca\u0026#34; onclick=\u0026#34;changeFontColor(\u0026#39;#7dc4ca\u0026#39;)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 11 \u0026lt;div class=\u0026#34;color-option\u0026#34; style=\u0026#34;background-color: #FFFFFF\u0026#34; onclick=\u0026#34;changeFontColor(\u0026#39;#FFFFFF\u0026#39;)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 12 \u0026lt;div class=\u0026#34;color-option\u0026#34; style=\u0026#34;background-color: #565c6a\u0026#34; onclick=\u0026#34;changeFontColor(\u0026#39;#565c6a\u0026#39;)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 13 \u0026lt;div class=\u0026#34;color-option\u0026#34; style=\u0026#34;background-color: #6b5762\u0026#34; onclick=\u0026#34;changeFontColor(\u0026#39;#6b5762\u0026#39;)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 14 \u0026lt;div class=\u0026#34;color-option\u0026#34; id=\u0026#34;color\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;color\u0026#34; onchange=\u0026#34;document.getElementById(\u0026#39;color\u0026#39;).style.backgroundColor=this.value;changeFontColor(this.value)\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 15\u0026lt;/div\u0026gt; 1body { 2 display: flex; 3 justify-content: center; 4 align-items: center; 5 flex-direction: column; 6 min-height: 100svh; 7 overflow: hidden; 8 font-family: system-ui; 9} 10 11.color-picker { 12 display: flex; 13 justify-content: center; 14 background: #ffffff55; 15 border-radius: 2.5vmax; 16 gap: 0.5vmax; 17 padding: 0.5vmax 1vmax; 18 box-shadow: 0 0.3vmax 1vmax #00000022; 19} 20 21.color-option { 22 width: 2.5vmax; 23 height: 2.5vmax; 24 cursor: pointer; 25 border-radius: 50%; 26 overflow: hidden; 27 position: relative; 28} 29.color-option:hover { 30 box-shadow: 0 0 1vmax #ffdb4d55; 31} 32 33.color-picker input[type=\u0026#34;color\u0026#34;] { 34 width: 5vw; 35 height: 5vw; 36 opacity: 0; 37 cursor: pointer; 38} 39 40#color::after { 41 content: \u0026#34;+\u0026#34;; 42 font-size: 0.5em; 43 top: 50%; 44 left: 50%; 45 pointer-events: none; 46 position: absolute; 47 color: #fff; 48 transform: translate(-50%, -50%); 49 font-size: 1.5rem; 50} 1const changeFontColor = (a) =\u0026gt; document.body.style.background = a; 以上就是我今天的分享，歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-13/","section":"post","tags":["HTML","CSS","JS"],"title":"Day13 今天我想來點… 顏色選單"},{"body":" 以下內容是我高一在上公民課時體悟的數學大道理，和網路上大多的做法都不太一樣。這篇文章假設你已學會國中直線方程式。如果不會的話…我也沒辦法。\n你有逛過 Apple 產品介紹的網頁嗎？這應該是我最早接觸滾動視差的地方。也是到現在我都覺得做的數一數二好的網站。你會發現在滾動的時候並不是單純的往下滑而已，螢幕上的元素常常會以出乎你意料的方式移動、或者是變化。\n有的人會說滾動視差 Parallax Scroll 是在滾動的時候元素以不同的速度往上移動，但是我認為這個定義有點狹義。我認為只要滑鼠在滾的時候，只要元素不是隨著滾輪往上，有其他的移動路徑如平移、旋轉、甚至淡化都可以算是滾動視差。\nParallax 大部分的時間是應用在天文，在不同的時間和地點能看到的星空都不太一樣。\n原理 我們在製作滾動視差效果是會希望一個元素的某一個屬性會隨著時間變化。我們希望當我們輸入一個數字（也就是滾動的量）的時候得出一個計算結果。\n這種東西取得兩個數值之間的關係叫做甚麼呢?沒錯我們要來建立一個函式。而最簡單且最常用的函式應該就是直線方程了。\n$$ y=mx+b $$\n我們在製作滾動視差效果的時候元素會有一個起點與終點。我們只需要知道開始位置對應的屬性，以及結束的地方對應的屬性這兩個點就可以找出直線方程式了。\n首先要算出斜率，斜率是 Y 變化量除以 X 變化量。 接著求出 Y 截距，就可以得出直線方程式。 因為通常到了終點之後，我們不會希望他還在繼續耗資源計算和定位到螢幕畫面千里之外。所以在起點前和終點後都不要再管它了。 希望這張圖能夠幫助你理解，如果不行的話國中數學課本翻一下。\nCSS 接下來是偏移的部分。偏移的方式我最常使用的屬性是 transform:translate() 。這樣可以佔據原本位置不影響排版。當然也可以使用 top 、 left 等屬性也是可以的，可以根據情況設定。\n比如說我要一個元素往下移一點可以這樣打\n1transform: translateX(10px); 2transform: translate(10px, 0); 一個是單獨設定 X 偏移，另外是兩個一起設定。可以自己看情況應用。\nJS JavaScript 只需要監聽滾動事件，並在距離範圍套入公式並修改 CSS 就可以了。\n1const element = document.getElementById(\u0026#34;element\u0026#34;); 2window.addEventListener(\u0026#34;scroll\u0026#34;, function () { 3const scrollY = window.scrollY; 4if(scrollY\u0026lt;100) element.style.transform = `translateY(${scrollY * 1.4 + 10}px)`; 5 }); 以下是一個簡單的範例。\nhttps://codepen.io/edit-mr/pen/vYvZagX\n1\u0026lt;h1\u0026gt;引爆炸彈\u0026lt;/h1\u0026gt; 2\u0026lt;div id=\u0026#34;element\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 3\u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; 4\u0026lt;h1\u0026gt;滾動視差爆炸酷!\u0026lt;/h1\u0026gt; 1body { 2 min-height: 300vh; 3 margin: 2rem; 4 text-align: center; 5} 6 7div { 8 height: 300px; 9 background: gray; 10 position: relative; 11} 12 13#element { 14 background: red; 15 width: 50%; 16 height: 200px; 17 z-index: -1; 18 left: 25%; 19 border-radius: 20px 20px 0 0; 20} 1const element = document.getElementById(\u0026#34;element\u0026#34;); 2window.addEventListener(\u0026#34;scroll\u0026#34;, function () { 3 const scrollY = window.scrollY; 4 if (scrollY \u0026lt; 100) { 5 element.style.transform = `translateY(${scrollY * 1.4 + 10}px)`; 6 document.body.style.background = \u0026#34;white\u0026#34;; 7 } else { 8 document.body.style.background = \u0026#34;pink\u0026#34;; 9 } 10}); 旋轉 有的時候使用 position:fixed 可以更好的去掌控元素位置。以下是一個圍繞旋轉的範例。\n首先先簡單的切版。左邊的假文是為了讓你可以比較能感覺到往下滾動。\n1\u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; 2\u0026lt;p\u0026gt;Lorem ipsum dolor, sit amet consectetur adipisicing elit. Voluptatem laborum esse adipisci aperiam obcaecati veniam, facilis iste, cupiditate corrupti, ad alias voluptatibus veritatis quae aliquam. Perspiciatis neque labore dolorem ullam. 3 Laborum, sequi. Tenetur aspernatur amet maiores sit possimus, nihil doloremque consequuntur! Neque, suscipit laborum! Accusamus, sint perspiciatis iure ipsa velit necessitatibus aliquam numquam debitis nisi repudiandae nemo laborum exercitationem distinctio? 4 Voluptatum deleniti quasi corrupti consequuntur, iure unde dicta pariatur blanditiis in officiis ab itaque iusto vero praesentium amet ipsa aperiam quo eligendi corporis nulla minus numquam veritatis rem! Nemo, fuga? 5 Quos nulla quae numquam tempore perferendis tenetur, sequi magni iste odit, eius molestias sit enim, amet reiciendis laborum accusamus facere voluptatem! Delectus sit quia libero amet sint! Temporibus, fugiat distinctio! 6 Ipsam, ullam placeat? Corporis exercitationem eius dolores, nulla enim temporibus amet repellendus accusantium suscipit esse non qui similique. Laboriosam sunt sapiente voluptate nihil voluptates rerum facilis itaque aspernatur, optio sint.\u0026lt;/p\u0026gt; 1body { 2 background: #001c30; 3 color: #dafffb; 4} 5div, 6div::after { 7 background: #176b87; 8 width: 100px; 9 height: 100px; 10 position: fixed; 11 left: 30%; 12 top: calc(50% - 50px); 13 border-radius: 50%; 14} 15 16div::after { 17 content: \u0026#34;\u0026#34;; 18 position: absolute; 19 background: #64ccc5; 20 width: 30px; 21 height: 30px; 22 left: 100%; 23} 24p { 25 width: 20%; 26} 我們想要滑鼠往下滾的同時往右移動，與旋轉。由於衛星是 div 內的偽元素所以外面轉裡面就會跟著轉。大概像這樣:\n1transform: translateX(50vw) rotate(90deg); 最後寫上 JavaScript 來實現他。數值有點需要憑感覺，可以自己觀察移動距離和速度調整看看。\n1const planet = document.querySelector(\u0026#34;div\u0026#34;); 2window.addEventListener(\u0026#34;scroll\u0026#34;, function () { 3 const scrollY = window.scrollY; 4 planet.style.transform = `translateX(${scrollY * .3}vw) rotate(${scrollY * 3}deg)`; 5}); 這樣就完成了。來看看成果，十分有趣對吧!\nhttps://codepen.io/edit-mr/pen/gOZRQex\n能夠變的與玩的實在太多了，使用這個方法在每一個屬性都可以套用。歡迎在評論區留下你看到的好網站與你自己的創作。\n以上就是我今天的分享，歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-12/","section":"post","tags":["HTML","CSS","JS"],"title":"Day12 Js 滾動視差 甚麼都能滾(ft. 國中數學)"},{"body":"你有看過這種頁面往下滾，但圖片位置沒有往下的效果嗎？\n這是舊版的毛哥EM資訊密技黑歷史。偷偷告訴你，這個效果只需要一行 CSS就可以做到。background-attachment 屬性可以用來控制背景圖片的滾動方式。在這篇文章中，我們將詳細介紹這個屬性以及如何使用它來實現不同的效果。\n什麼是 background-attachment ？ background-attachment 是 CSS 中用於控制背景圖片滾動行為的屬性。它有三個值：\nscroll（滾動）：這是默認值，背景圖片將隨著頁面的滾動而移動。 fixed（固定）：背景圖片將保持固定在視口的某個位置，不隨頁面的滾動而移動。這可以創建一種視差滾動效果，使背景圖片保持在原地，而內容文字或元素則滾動過它。 local（本地）：它會使背景圖片隨著元素的內容滾動而移動，而不是整個頁面。有點像屬於那個框框的背景。這個值在大部分情況下比較少見。 飯粒範例 現在讓我們來看看幾個飯粒的範例\n創建固定背景圖片 假設你想要在網站的首頁上創建一個固定的背景圖片，以實現視差效果。你可以這樣設置 CSS：\n1body { 2 background-image: url(\u0026#39;your-image.jpg\u0026#39;); 3 background-attachment: fixed; 4 background-size: cover; /* 可選，用於調整圖片大小以填充整個視口 */ 5} 這將使背景圖片保持固定，而內容將在其上滾動，創建出一種動態的效果。\n使用 scroll 值 如果你想要一個網站上的背景圖片會隨著頁面滾動而移動…那麼你什麼都不用做，本來不就是這樣。但如果你有別的屬性蓋過去的話可以用 scroll 改回來。\n1body { 2 background-image: url(\u0026#39;your-image.jpg\u0026#39;); 3 background-attachment: scroll; 4} 使用 local 值 最後，如果你想要在某個元素內部創建一個背景圖片，並且希望它隨著該元素的滾動而移動，你可以使用 local 值。這個值通常應用於具有自己的滾動區域的元素，例如 div 或 section。\n1.container { 2 background-image: url(\u0026#39;your-image.jpg\u0026#39;); 3 background-attachment: local; 4} 這將使背景圖片與 .container 元素的內容滾動同步，而不是整個頁面。\n來個大範例 https://codepen.io/edit-mr/pen/rNodVbV\n總之，background-attachment 屬性是一個強大的工具，可以用來控制背景圖片的滾動方式，從而實現不同的視覺效果。雖然實際功能不大但可以給人一種出乎意料且不會那麼死板的感覺。\n不過這只是最基本的滾動視差，且只能應用在圖片上面。明天我們將要討論如何讓任何你想要的東西滾起來。\n希望這篇文章能幫助你更好地理解和應用這個屬性，歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-11/","section":"post","tags":["HTML","CSS","JS"],"title":"Day11 說滾不是真的要你滾 - 背景滾動視差"},{"body":" 這是我高一在學校吃肉蛋吐司時想到的做法，因此此篇文章假設你已熟悉國小數學。\n傳統跑馬燈雖然在現代乍看之下是一個又醜又過時的設計，但是如果應用的好的話其實是非常有質感且蠻有趣的。裝飾效果多大於實際用途。\n這是我幫朋友製作的個人網頁，裡面使用跑馬燈搭配旋轉效果。卡頓是因為 GIF 的緣故，如果想看原始網頁可以到這裡。\n如果要你做跑馬燈你會怎麼做呢？如果你是一個有年紀的工程師的話應該使用過 \u0026lt;marquee\u0026gt; 吧，然而這是一個還沒正式啟用就已經被淘汰的語法，且能設定的屬性有限。如果你是一個現代的工程師應該有想過使用 @keyframes 動畫吧。但是這樣會遇到幾個問題。首先是跑完不會連續，會有一段空白的時間。但是如果說多疊幾個你怎麼知道需要幾個？萬一內容很短又在電競超長曲面螢幕怎麼辦？還有一個最大的問題，我們知道速率的公式是距離除以時間對吧？\n$$ V=\\frac{s}{t} $$\n那麼我們設定同樣的動畫長度(t)，如果螢幕寬度(s)變大速率就變快了對吧！所以讓我們再加上一些簡單的 Js 來製作能夠適應各種螢幕的跑馬燈吧！\n切版 首先我們來切一個簡單的版面出來\n1\u0026lt;div class=\u0026#34;marquee\u0026#34;\u0026gt; 2 \u0026lt;div class=\u0026#34;element\u0026#34;\u0026gt;SALE\u0026lt;/div\u0026gt; 3\u0026lt;/div\u0026gt; 1body { 2 min-height: 100svh; 3 display: flex; 4 align-items: center; 5 margin: 0; 6} 7.marquee { 8 font-size: 3rem; 9 color: #fff; 10 height: 1.5em; 11 background: red; 12 width: 100%; 13 position: relative; 14 font-family: Arial; 15} 16.element { 17 position: absolute; 18 left: 0; 19 top: 0.25em; 20} CSS 動畫 接著我們來製作一個基本的 CSS 動畫。他會從螢幕的最右邊移動到最左邊整個跑馬燈消失為止。\n1.element { 2 position: absolute; 3 left: 0; 4 top: 0.25em; 5 animation: marquee 2s forwards linear; 6} 7 8@keyframes marquee{ 9 from { 10 transform: translateX(100vw) 11 } 12 to { 13 transform: translateX(-100%) 14 } 15} 自動生成新的 我們什麼時候會需要一個新的跑馬燈呢？是在一個跑馬燈整條都出現在畫面上，要開始有空白的時候。我們只需要算好時間什麼時候需要插入新的，跑馬燈要跑多久才會跑，跑完之後把它刪掉就可以了（讓 Dom 乾淨一點，不要塞滿一堆撞在一起的殘骸）。\n速率 先來計算速率吧，距離是螢幕寬度 window.innerWidth 加上元素寬度 offsetWidth。你可以設一個變數當作速率並嘗試調整，接者用舉例除以它就可以得到動畫長度 animation_duration 了\n1var v = 100 / 1000; 2var element = document.querySelector(\u0026#34;.element\u0026#34;); 3var element_width = element.offsetWidth; 4var time = (window.innerWidth + element_width) / v; 5element.style.animationDuration = time + \u0026#34;ms\u0026#34;; 6var loopTime = element_width / v; 速率我除以1000是因為後面時間都要緩算成毫秒。因為 v 都是在除數所以除以1000就會變成乘1000。應該都懂吧…算了我還是寫一下…\n$$ a\\div(b\\div c)=a\\div \\frac{b}{c}=a\\times \\frac{c}{b}=a\\div b \\times c $$\n新增頻率 我們有了速率和元素的寬度就可以算出從動畫開始到整根出現(紅色到橘色位置)的時間了。\n1var v = 30; 2var time = window.innerWidth / v; 3var element = document.querySelector(\u0026#34;.element\u0026#34;); 4var element_width = element.offsetWidth; //元素寬度 5var loopTime = element_width / v; //每 delay 秒放入一個新的 結束刪除 我們知道運行的時間，只需要在動畫結束時刪除就可以了，我給他多加一秒延遲緩衝，避免有延遲還沒跑完就被刪除了。記得單位是毫秒\n1setTimeout(() =\u0026gt; { 2 marquee.removeChild(marqueeBox); 3 }, time * 1000 + 1000); 生成函式 完整生成函式如下。會在固定時間複製一個跑馬燈，放入 marquee，時間到刪除\n1function newMaquee() { 2 var clonedElement = element.cloneNode(true); 3 marquee.appendChild(clonedElement); 4 setTimeout(() =\u0026gt; { 5 marquee.removeChild(clonedElement); 6 }, time + 1000); 7} 8 9setInterval(newMaquee, loopTime); Debug 時間! 有一個小問題就是元素之前沒有距離。我們只需要在 setInterval 把 loopTime 設定久一點就可以了\n再一個問題，就是在速率算出來之前第一個已經先跑了幾步了，所以我們可以在計算完之後再開始動畫\n1element.style.animation = `marquee ${time}ms forwards linear`; 最後一個問題，如果有人沒事更改視窗大小理論上時間要重算，不然會變這樣…\n所以把速率計算都丟入函式內，整理一下樣式，完整程式碼如下。\nhttps://codepen.io/edit-mr/pen/YzdZdKv 1\u0026lt;div class=\u0026#34;marquee\u0026#34;\u0026gt; 2 \u0026lt;div class=\u0026#34;element\u0026#34;\u0026gt;SALE\u0026lt;/div\u0026gt; 3\u0026lt;/div\u0026gt; 1body { 2 min-height: 100svh; 3 display: flex; 4 align-items: center; 5 margin: 0; 6 overflow:hidden; 7} 8.marquee { 9 font-size: 3rem; 10 color: #fff; 11 height: 1.5em; 12 background: red; 13 width: 100%; 14 position: relative; 15 font-family: Arial; 16 font-weight:800; 17 font-style: italic; 18} 19.element { 20 position: absolute; 21 left: 0; 22 top: 0.2em; 23} 24 25@keyframes marquee{ 26 from { 27 transform: translateX(100vw); 28 } 29 to { 30 transform: translateX(-100%); 31 } 32} 1var v = 110 / 1000; 2var element = document.querySelector(\u0026#34;.element\u0026#34;); 3var element_width = element.offsetWidth; 4var time = (window.innerWidth + element_width) / v; 5element.style.animation = `marquee ${time}ms forwards linear`; 6var loopTime = element_width / v + 100; 7const marquee = document.querySelector(\u0026#34;.marquee\u0026#34;); 8 9function newMaquee() { 10 time = (window.innerWidth + element_width) / v; 11 element.style.animation = `marquee ${time}ms forwards linear`; 12 loopTime = element_width / v + 100; 13 var clonedElement = element.cloneNode(true); 14 marquee.appendChild(clonedElement); 15 setTimeout(() =\u0026gt; { 16 marquee.removeChild(clonedElement); 17 }, time + 1000); 18} 19marquee.removeChild(element); //第一個先移除，避免卡住 20newMaquee(); //手動新增第一個 21setInterval(newMaquee, loopTime); //之後自動 以上就是我今天的分享，歡迎將你得成品放在評論和大家分享，也歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，或訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-10/","section":"post","tags":["HTML","CSS","JS"],"title":"Day10 永無止境跑馬燈 - 不同螢幕 相同速度"},{"body":" 昨天我們只是一個人的色而已，今天疊在一起更刺激。\n你有使用過 iOS17 的 StandBy 功能嗎？就是那個你一定要買磁吸充電還要喬好角度的功能。這不是重點，你有發現白色的數字時鐘似乎不只是有點半透明而已，還有一點說不出來的…高級感。\n之所以會有這種效果是因為他使用了不同的混合模式，如果是有在畫圖或 P 圖的朋友絕對對它不陌生。我這裡使用 iPhone 的 Procreate 來示範，希望你能理解。\n首先這是一顆球\n好啦我知道我很不會畫畫，有些事情模糊一點比較好。前天學的 filter: blur() 拿來用一下，順便打上一道陽光。\n好吧看來我把他救回來，然後又毀了。這個黃色和我這個直男一樣太直了。當顏色疊在一起的時候不一定要直接顯示上面的顏色，可以把兩個疊再一起的顏色做一些運算得出不同的數值。比如說我們可以用乘法把兩個顏色乘在一起得到一個很暗的結果（下面最右邊的圖）中文叫做色彩增值，而英文叫做 multiply 乘法就白話很多。以下是幾個不同混合模式的效果：\n可以看出明明是同樣的顏色相疊但整個出來的感覺差很多對吧！\n而要在 CSS 使用混合模式也很簡單，語法是\n1mix-blend-mode: normal; 2mix-blend-mode: multiply; 3mix-blend-mode: screen; 4mix-blend-mode: overlay; 5mix-blend-mode: darken; 6mix-blend-mode: lighten; 7mix-blend-mode: color-dodge; 8mix-blend-mode: color-burn; 9mix-blend-mode: hard-light; 10mix-blend-mode: soft-light; 11mix-blend-mode: difference; 12mix-blend-mode: exclusion; 13mix-blend-mode: hue; 14mix-blend-mode: saturation; 15mix-blend-mode: color; 16mix-blend-mode: luminosity; 要死記這些語法代表的顏色很難，建議大家都可以測試玩看看。這裡給大家一個線上的測試工具\n我們來實際應用看看吧，這是一個簡單的數字範例。可以看出 mix-blend-mode 讓你的顏色堆疊有著更多的可能，不只是半透明而已，還有顏色互相堆疊渲染的效果。\nhttps://codepen.io/edit-mr/pen/jOXayXa\n1\u0026lt;h1\u0026gt; 2 09:41 3 \u0026lt;div class=\u0026#34;mix\u0026#34;\u0026gt;09:41\u0026lt;/div\u0026gt; 4\u0026lt;/h1\u0026gt; 1body { 2 background: linear-gradient( 3 90deg, 4 rgba(2, 0, 36, 1) 0%, 5 rgba(9, 9, 121, 1) 35%, 6 rgba(0, 212, 255, 1) 100% 7 ); 8 color: rgba(255, 255, 255, 0.6); 9 display: flex; 10 align-item: center; 11 justify-content: center; 12 height: 100svh; 13 font-size: 10vw; 14} 15.mix { 16 mix-blend-mode: plus-lighter; 17} 18* { 19 margin: 0; 20} 我有自己復刻一個網頁版的 StandBy，有興趣的可以去逛逛或加入書籤喔。\n你可以看出 mix-blend-mode 讓你的顏色堆疊有著更多的可能，一開始黑色的陰影也變得五彩斑斕。不過如果是圖片的話最好還是希望設計師可以弄到直接可以丟上來的狀態，因為這個屬性在很多情況下會罷工，又很難 debug；而且顯示出來的效果多少和Photoshop裡面也有一點點出入，所以如果是圖片的話最好還是調好比較好，不管是對於瀏覽器還是對於你都會比較輕鬆。這是我在上一個案子用血換的教訓。\n以上就是我今天的分享，歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-9/","section":"post","tags":["HTML","CSS"],"title":"Day9 給你五彩斑斕的黑: mix-blend-mode"},{"body":" 今天這一篇是一個很色的冷知識分享。可以讓你調出很冷的顏色。\n你平常用 CSS 都在怎麼表示顏色呢？是使用 RGB 還是 HEX 碼呢？不管你是使用哪一種他們都是使用三個數字表達每種顏色通道（紅、綠、藍）要多亮。由於每個通道都可以有256種可能的值（從00到FF），所以一個Hexadecimal顏色碼可以表示的顏色總數為256 x 256 x 256 = 16,777,216 種顏色。\n人類的眼睛可以分辨約700萬種顏色，很明顯這些顏色很不夠用對吧！\n應該說隨著瀏覽器和螢幕的發展，螢幕的色域越來越廣，是超過 RGB 能表達的，讓我們可以看到更亮眼跟絢麗的色彩。而且每一間公司出場的螢幕顏色多少有點不一樣，而且科技一直在進步，誰知道發明新的單位什麼時候會淘汰。於是惠普與微軟於1996年一起開發了 sRGB 色彩空間。\n圖片來源:維基共享資源\n看我們突然多出好多顏色可以用了！但是人類對色的慾望是用無止境的，一下就發現不夠用了。尤其是藍色的部分很多印刷能夠印出來的顏色在螢幕上根本顯示不出來。於是又跑出Adobe RGB等等更多標準…\n所以我到底要怎麼打啦？ CSS支援以下幾個色彩空間\nsRGB色彩空間：hsl()hwb()rgb() CIELAB色彩空間：lab()lch() Oklab色彩空間：oklab()oklch() 他們都有自己的規則，而今天我要講的是不管是什麼色彩空間都可以使用的屬性：\n1color: color 呃沒錯，真的是這樣…\n以下是如何使用color() 的一些基本知識：\n基本語法 首先，讓我們看一下color() 函數表示法的基本語法：\n1color(colorspace c1 c2 c3[ / A]) colorspace你要使用的色彩空間，例如srgb，display-p3，rec2020等等。 c1，c2，c3：這些是數字，百分比值或關鍵字none，用於指定在所選色彩空間中的組件值。 A（選擇性）：這是不透明度，用於指定元素的透明度，其中1對應於100％的不透明度。 選擇適當的色彩空間 根據您的需求，選擇適當的色彩空間非常重要。不同的色彩空間適合不同的情境。例如，display-p3 可以用於支援廣色域的螢幕，而 srgb 可能更適合一般的情況。\n使用示例 以下是一些使用 color() 函數表示法的示例：\n1/* 在sRGB色彩空間中指定紅色 */ 2color(srgb 1 0 0); 3 4/* 在display-p3色彩空間中指定橙色，同時設置透明度為50% */ 5color(display-p3 1 0.5 0 / 0.5); 媒體特性檢測 要在您的CSS中使用color() 函數表示法，您還需要確保瀏覽器支援您所選擇的色彩空間。這可以通過 color-gamut CSS 媒體特性來檢測。這將有助於確保您的設計在不同設備上呈現一致的外觀。\n1/* 檢測是否支援display-p3色彩空間 */ 2@media (color-gamut: p3) { 3 /* 在此使用display-p3色彩空間中的顏色 */ 4 color(display-p3 1 0.5 0); 5} 其實也不用這麼麻煩，把 HEX 碼寫在上面，這些高級的屬性寫在下面，如果瀏覽器看得懂的話他自然就會選下面的啦\n總之，color() 函數表示法是一個強大的工具，它使網頁設計師能夠更精確地控制顏色的呈現方式，並考慮不同色彩空間的因素。讓你的網站可以更刺眼 ，更能抓住使用者的目光，留下深刻的印象。\n以上就是我今天的分享，歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-8/","section":"post","tags":["CSS"],"title":"Day8 滿足你的色域! color: color"},{"body":"CSS 的濾鏡屬性是一個非常實用且可以瞬間讓一個網頁看起來很厲害的功能。讓你可以以各種方式修改和調整圖像和元素的呈現方式，也可以讓元素模糊，或者是直接改變圖示顏色等等。今天我們將深入探討CSS filter 屬性，解釋其各種功能以及如何使用它來創建引人注目的效果。\n現在，讓我們來看一些CSS filter 屬性的常見用法：\n1. 模糊（Blur） 模糊效果可以用來模糊圖像或元素，創建出柔和的背景效果或是陰影效果。你可以通過調整模糊半徑的值來控制模糊的程度，例如：\n1/* 模糊半徑為5像素 */ 2filter: blur(5px); 冷知識：正方形 blur 可以變圓形\n2. 亮度（Brightness） 這不用解釋吧，讓它變更明亮或更暗。值為100%時保持原樣，大於100%將增加亮度，小於100%則減少亮度，例如：\n1/* 增加亮度至150% */ 2filter: brightness(150%); 3. 對比度（Contrast） 對比度效果可以增加或減少圖像的對比度，使畫面更鮮明或柔和。值為100%時保持原樣，大於100%將增加對比度，小於100%則減少對比度，例如：\n1/* 增加對比度至200% */ 2filter: contrast(200%); 4. 灰度（Grayscale） 灰度效果將圖像轉換為灰階，使其變成黑白圖像。值為100%時完全灰階，0%時保持原色，例如：\n1/* 轉換為完全灰階 */ 2filter: grayscale(100%); 5. 反轉顏色（Invert） 反轉顏色效果可以將圖像的顏色反轉，使白色變為黑色，黑色變為白色。值為100%時完全反轉，0%時保持原色，例如：\n1/* 完全反轉顏色 */ 2filter: invert(100%); 6. 飽和度（Saturate） 飽和度效果可以讓畫面更加鮮豔或更加淡化。值為100%時保持原飽和度，大於100%增加飽和度，小於100%減少飽和度，例如：\n1/* 增加飽和度至200% */ 2filter: saturate(200%); 7. 色彩轉換（Hue-rotate） 旋轉圖像的色相。它的值以度數表示，例如：\n1/* 旋轉色相90度 */ 2filter: hue-rotate(90deg); 8. 透明度（Opacity） 透明度效果控制圖像或元素的不透明度。值為0時完全透明，1時完全不透明，例如：\n1/* 使元素變得半透明 */ 2filter: opacity(0.5); 為什麼不直接使用 opacity 屬性? 我自己的想法是如果你已經要使用 filter 屬性屬性的話寫在一起可以更明確的表達在為了達成同一個效果，否則直接使用 opacity 就好了。\n9. 遮罩（Drop-shadow） 這個效果可以在圖像或元素周圍添加陰影，以使其看起來浮在其他元素之上。你可以指定陰影的偏移、模糊半徑、顏色等，例如：\n1/* 添加陰影效果 */ 2filter: drop-shadow(5px 5px 10px rgba(0, 0, 0, 0.5)); 10. 多重效果 您可以將多個 filter 屬性組合在一個規則中，以同時應用多個效果，例如：\n1/* 同時應用多個效果 */ 2filter: grayscale(50%) brightness(150%) blur(3px); 這樣，你可以根據具體需求混合和匹配這些效果，創建出獨特的視覺效果，使網頁更具創意和吸引力。\n11. 自定義濾鏡 除了上述內置的濾鏡效果，您還可以使用自定義的 SVG 濾鏡效果。這需要定義一個 SVG 濾鏡元素，然後將其引用到 filter 屬性中。這個就有一點複雜了，不在本文的討論範圍，但提供了更高度可定制性，有興趣的話可以自己研究看看。\n用一個顏色製作漸層 finter 在製作漸層很實用，可以讓你只需要選擇一個顏色就能生成不錯看的漸層。\nhttps://codepen.io/edit-mr/pen/GRPyNYY\n1:root { 2 --color: blue; 3} 4 5body { 6 background: var(--color); 7 min-height: 100svh; 8 margin: 0; 9} 10body::after { 11 display: block; 12 width: 100%; 13 height: 100svh; 14 content: \u0026#34;\u0026#34;; 15 background: linear-gradient(var(--color), transparent); 16 filter: hue-rotate(-60deg) brightness(3); 17} 你可以看到我先設定了背景顏色，接著建立一個偽元素，並且設定他的背景為漸層。一半是設定的顏色，一半是透明。接著使用 filter 來調整顏色，我讓亮度高一點然後色相旋轉一下讓顏色淺一點。這樣就能夠做出漸層的效果囉。\n這些都是 CSS filter 屬性的一些常見和進階功能。通過組合這些效果，你可以為網站的元素創建出各種視覺效果，無論是圖像處理還是動畫，都能夠實現。我們會在之後的文章繼續講你可以怎麼玩 filter 屬性。\n歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-7/","section":"post","tags":["HTML","CSS","JS"],"title":"Day7 幫我開濾鏡 filter"},{"body":"在使用 CSS 做網站時幾乎一定會使用到 position 屬性，不過你真的知道它的原理和使用方式嗎？雖然乍看之下感覺很複雜但其實超簡單，你只需要幾分鐘就能完全理解了。\n語法 1position: 屬性 Static - 該怎樣就怎樣 預設屬性，該在哪裡在哪裡，區塊元素佔整排，行內元素繼續往右。\n通常不需要特別設定，除非其他 CSS 把他設定到別的然後你想要改回來。\nRelative - 解鎖偏移（相對位置） 設定成 relative 的元素可以解鎖使用 top, bottom, left, right 屬性，讓它看起來往某個地方移動一點點。但是還是佔據原本的位置。\nAbsolute - 在哪都行（相對位置） 設定成 absolute 的元素會變成像是一張貼紙一樣貼在網頁上，所以原本的位置不在佔據。你一樣可以使用 top, bottom, left, right 屬性來定位元素。它定位的位置（也就是設定 top:0; left:0; 最左上角的位置）會變成外面不是 position: static 的元素。最常見的使用方法是先在外面使用 relative，然後裡面放入 absolute 就可以完成置中等各種定位。\nFixed - 卡在畫面上 設定 Fixed 的元素會直接以螢幕的左上角為定位點進行定位，並且無論怎麼滾動畫面都會待在哪裡。最常見的使用時機是網頁右下角回到最上面的按鈕，或者是煩人的分享按鈕。\n範例 來一個範例讓大家分辨它們不同的效果\nhttps://codepen.io/edit-mr/pen/rNoYOKZ 1\u0026lt;div class=\u0026#34;sun\u0026#34;\u0026gt;Fixed\u0026lt;/div\u0026gt; 2\u0026lt;div class=\u0026#34;cloud\u0026#34;\u0026gt;Static\u0026lt;/div\u0026gt; 3\u0026lt;div class=\u0026#34;cloud relative\u0026#34;\u0026gt;Relative\u0026lt;/div\u0026gt; 4\u0026lt;div class=\u0026#34;building\u0026#34;\u0026gt;Relative 5 \u0026lt;div class=\u0026#34;roof\u0026#34;\u0026gt;Absolute\u0026lt;/div\u0026gt; 6\u0026lt;/div\u0026gt; 1body { 2 background: lightblue; 3 text-align: center; 4 font-weight: 800; 5} 6.sun { 7 width: 100px; 8 height: 100px; 9 background: yellow; 10 border-radius: 50%; 11 position: fixed; 12 right: 30px; 13 top: 30px; 14} 15.cloud { 16 width: 300px; 17 height: 100px; 18 left: 20%; 19 background: white; 20 border-radius: 30px 20px 100px 50px; 21} 22.relative { 23 position: relative; 24} 25.building { 26 width: 300px; 27 height: 1000px; 28 background: gray; 29 position: relative; 30 left: 50%; 31} 32.roof { 33 position: absolute; 34 top: 0; 35 left: 50%; 36 width: 100px; 37 height: 70px; 38 background: #000; 39 margin-top: -70px; 40 color: #fff; 41} 在這裡你可以看到\n太陽設定為 fixed，所以就算滾輪滾動也不會改變位置。 第一朵雲因為沒有設定 position，所以就是預設的 static，所以它會在原本的位置。雖然他有設定 left: 20%; 但是因為他是 static 所以沒有效果。 第二朵雲設定為 relative，所以他會在原本的位置，但是可以使用 top, bottom, left, right 來偏移位置。 建築物設定為 relative，所以他會在原本的位置，我們使用 right 來偏移到正中間。可以看到它是元素左邊在最中間，因為對齊點是左上角。 裡面的黑色屋頂設定為 absolute，所以他會以外面的 relative 為對齊點，並且不佔據原本的位置。我們使用 top: 0; left: 50%; 來定位他，但這樣會讓他在建築物裡面，因此我們可以使用 margin-top: -70px; 來把他拉上去。 實際用途 CSS Position 在網頁設計中當然不只是這樣畫畫，他是非常實用的。以下是一些實際用途：\n懸浮按鈕：當你想在網頁上添加一個固定在一側的懸浮按鈕，以便用戶可以輕鬆回到頁首或執行其他動作時，可以使用 fixed 定位方式。 訊息提示框：當你需要在頁面的特定位置顯示一個訊息或提示時，可以使用 absolute 定位方式。這樣你可以輕鬆控制提示框的位置和顯示時間。 圖片輪播：在網頁上創建圖片輪播時，你可以使用 relative 或 absolute 定位方式，使圖片在特定位置輪播顯示。 懸浮菜單：如果你想在網站的一個區域添加一個懸浮菜單，以便用戶可以訪問不同的頁面或功能，可以使用 fixed 定位方式，讓菜單保持可見性。 對話框：當需要彈出對話框或模態框時，通常會使用 fixed 或 absolute 定位方式，以確保它出現在用戶的視線範圍內並居中顯示。 圖像縮放效果：如果你希望用戶可以點擊圖像進行放大或縮小，可以使用 absolute 定位方式，將放大的圖像放在螢幕中央，然後用戶可以通過單擊關閉它。 自定義滾動條：你可以使用 fixed 定位方式來創建自己的自定義滾動條，以增強網頁的外觀和交互性。 這些只是我列出幾個常見的使用方法，我們不管是在前面幾天或者是接下來的文章都一直會使用 position 語法，因此熟悉這篇文章的內容非常重要。\n如果還是不清楚或是需要範例都歡迎提出，也歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-6/","section":"post","tags":["HTML","CSS"],"title":"Day6 你怎在這? 攻克 Position"},{"body":"假設你今天想製作這個載入動畫…\nhttps://codepen.io/edit-mr/pen/YzdzvdV\n可以看出來每個方塊的縮放速度是一樣的，只是越往右下就越有延遲對吧。昨天我們學到可以在 animation 設定延遲，其實也可以在 animation-delay 個別設定。讓我們來一步步用前面幾天學到的知識做出這個動畫吧。\n用 flex 切版 在想要怎麼切板時可以尋找找齊排列的矩形來群組。以下是我想到的切版方式。\n不知道這樣你知道如何下手了嗎?\n我們先寫HTML。emmet縮寫如下。\n1main\u0026gt;(.left\u0026gt;(.wheelBox\u0026gt;.wheel*2)+.box\u0026gt;div*25)+.right\u0026gt;.wheel*3 2\u0026lt;!-- 外框裡面 左邊 裝滾輪 裡面兩個 再一個裝按鈕 25個 右邊 三個滾輪--\u0026gt; CSS 設定一下寬高、形狀、與排列方式\n提示: border-radius 設定大於等於 50% 即可生成圓形\n1.box div, 2.wheel { 3 background-color: #000; 4} 5body { 6 height: 100vh; 7 display: flex; 8 justify-content: center; 9 align-items: center; 10} 11main { 12 width: 300px; 13 border: 4px solid #000; 14 display: flex; 15 border-radius: 20px; 16 padding: 10px; 17} 18.wheel { 19 width: 70px; 20 height: 70px; 21 border-radius: 50%; 22} 23.box, 24.right, 25.wheelBox { 26 display: flex; 27 justify-content: center; 28 align-items: center; 29 gap: 10px; 30 flex-wrap: wrap; 31 padding: 10px; 32} 33.wheelBox { 34 justify-content: space-between; 35 padding: 10px 20px; 36} 37.box div { 38 width: 28px; 39 height: 28px; 40 border-radius: 3px; 41 transform: scale(1); 42 animation: 1.5s ease-in-out infinite zoom; 43} 這樣就有靜態的外觀了\n方塊得動畫我們設成\n1animation: 1.5s ease-in-out infinite zoom; 代表他會無限重複，每次1.5秒。我們來建立 zoom 的動畫吧，我們先縮小、放大、然後維持在原尺寸直到動畫結束。\n1@keyframes zoom { 2 0% { 3 transform: scale(1); 4 } 5 20% { 6 transform: scale(0.7); 7 } 8\t40% { 9 transform: scale(1); 10 } 11} 重複的CSS可以縮寫在一起，像這樣\n1@keyframes zoom { 2 0%, 3 40% { 4 transform: scale(1); 5 } 6 20% { 7 transform: scale(0.7); 8 } 9} 你就會得到一個同時縮放的動畫。我們希望它可以有海浪滾動的感覺，所以越右下角延遲應該要越大。\n我們在 HTML 用行內 CSS 個別設定元素的延遲就可以了。可以使用 Emmet 生成再微調。\n1\u0026lt;div class=box\u0026gt; 2 \u0026lt;div style=\u0026#34;animation-delay: .0s\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 3 \u0026lt;div style=\u0026#34;animation-delay: .1s\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 4 \u0026lt;div style=\u0026#34;animation-delay: .2s\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 5 \u0026lt;div style=\u0026#34;animation-delay: .3s\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 6 \u0026lt;div style=\u0026#34;animation-delay: .4s\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 7 \u0026lt;div style=\u0026#34;animation-delay: .1s\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 8 \u0026lt;div style=\u0026#34;animation-delay: .2s\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 9 \u0026lt;div style=\u0026#34;animation-delay: .3s\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 10 \u0026lt;div style=\u0026#34;animation-delay: .4s\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 11 \u0026lt;div style=\u0026#34;animation-delay: .5s\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 12 \u0026lt;div style=\u0026#34;animation-delay: .2s\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 13 \u0026lt;div style=\u0026#34;animation-delay: .3s\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 14 \u0026lt;div style=\u0026#34;animation-delay: .4s\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 15 \u0026lt;div style=\u0026#34;animation-delay: .5s\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 16 \u0026lt;div style=\u0026#34;animation-delay: .6s\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 17 \u0026lt;div style=\u0026#34;animation-delay: .3s\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 18 \u0026lt;div style=\u0026#34;animation-delay: .4s\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 19 \u0026lt;div style=\u0026#34;animation-delay: .5s\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 20 \u0026lt;div style=\u0026#34;animation-delay: .6s\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 21 \u0026lt;div style=\u0026#34;animation-delay: .7s\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 22 \u0026lt;/div\u0026gt; 這樣就能夠做出最上面的動畫啦! 如果你跟我一樣使用 Firefox Developer Edition，在偵錯工具可以看到動畫時間軸曲線。\n再來一個小練習吧，來做一個圓圈載入 loading 動畫\n圓圈 Loading 動畫 https://codepen.io/edit-mr/pen/LYMZeZE?editors=1100\n有點像 Windows 更新動畫。首先我們先來製作圓圈。我畫了一張圖希望讓你更好理解。\n我們把一個正方形放在畫面中間，並在裡面放入一個圓形。只要讓正方形旋轉裡面的圓形就會做圓周運動。我們只需要多疊幾個，並設定動畫的延遲及持續時間即可做出這個動畫。\n旋轉動畫很簡單：\n1@keyframes spin { to { transform: rotate(360deg) } } 在正方形上面套用，讓他無限旋轉。預設速度 ease 又漸入漸出效果。\n1animation: spin 2s infinte 我有在正方形裡面再包一層正方形，讓我可以讓每個正方形再旋轉一點，使每一個的開始點和結束點不太一樣。所有的參數你都可以調整看看。\nHTML Emmet如下：\n1.loading\u0026gt;(div[style=\u0026#34;animation-delay: calc(.1s * $)\u0026#34;]\u0026gt;div[style=\u0026#34;transform:rotate(calc(-15deg * $))\u0026#34;])*8 以上就是我今天的分享，歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-5/","section":"post","tags":["HTML","CSS"],"title":"Day5 載入中… Animation-delay"},{"body":"今天我們要來玩玩 CSS 動畫。CSS動畫有兩種:\n@keyframes - 動作效果 transition - 轉場效果 我們今天都拿 PowerPoint 來舉例，雖然感覺現在的學生都快只認識 Canva 了(順帶一提 Canva 就是 CSS 動畫)\n你可以想像 @Keyframes 是 PowerPoint的動畫\n而且是一載入網頁就執行。當然我們可以透過 JavaScript 來指定執行的時間(比如說滾動到元素的時候)\n而Transition是轉場裡面的轉化效果\n當元素的外觀因為各種原因 CSS 被改變(比如說滑鼠滑過，JavaScript 設定，打開 F12 亂搞)，會平滑的轉換過去。我們先來講 Transition 因為他比較簡單。語法如下\n1transition: 要改的屬性 持續時間 速度曲線 延遲; 2transition: background 4s ease-in-out 1s; 每一個屬性都可以分開設定，但真的不用跟自己過意不去。有興趣的連結下收\ntransition-delay transition-duration transition-property transition-timing-function 每一個屬性都可以分開設定，也可以省略一些屬性不寫。比如說\n1transition: background 1s; 你可以在後面用逗號分隔其他元素\n1transition: background 1s, color 2s; 秒數也可以用毫秒 ms，但我習慣使用秒因為比較短。如果是零點幾零可以省略。比如說以下幾個都是一樣效果\n1transition: background 500ms; 2transition: background 0.5s; 3transition: background .5s; /* 是不是看起來超舒服! */ 以下是一個按鈕範例。你可以看到放大屬性 scale 有設定 transition 所以會漸變，而背景顏色則沒有。\nhttps://codepen.io/edit-mr/pen/mdaPYLv\n1\u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;按鈕\u0026lt;/a\u0026gt; 1a:hover { 2 background-color: #ffffff4a; 3 transform: scale(1.2); 4} 5 6a { 7 transition: transform 0.3s ease-out; 8 /* 以下只是裝飾 */ 9 display: block; 10 color: #fff; 11 text-decoration: none; 12 font-family: sans-serif; 13 font-size: 5em; 14 border: #fff solid 5px; 15 padding: 1rem; 16 text-align: center; 17 width: 3em; 18} 19 20body { 21 background: #000; 22 min-height: 100svh; 23 /* 昨天講的置中 */ 24 display: flex; 25 justify-content: center; 26 align-items: center; 27} 記得設定 display:none 不會有淡出效果，請用 opacity:0; 然後 pointer-event: none; 以防止誤觸。\n下面是一個設定 Width 的範例\nhttps://codepen.io/edit-mr/pen/RwEamev\n1a::after { 2 transition: width .5s ease-out; 3 content: \u0026#34;\u0026#34;; 4 height: 2px; 5 display: block; 6 background: red; 7 width: 0em; 8} 9a:hover::after,a:active::after { 10 width: 100%; 11} 12/* 以下只是裝飾 */ 13a { 14 display: block; 15 color: #fff; 16 text-decoration: none; 17 font-family: sans-serif; 18 font-size: 5em; 19 text-align: center; 20 cursor: pointer; 21} 22body { 23 background: #000; 24 min-height: 100svh; 25 /* 昨天講的置中 */ 26 display: flex; 27 justify-content: center; 28 align-items: center; 29} @keyframes 要使用 keyframes 我們需要先建立一個動畫，再套用到元素上。他的語法是\n1@keyframes 動畫名稱{ 2 0% { 3\t/* 要套用的CSS */ 4 } 5\t30% { 6\t/* 要套用的CSS */ 7 } 8/* ...(中間可以放更多) */ 9 100% { 10\t/* 要套用的CSS */ 11 } 12} 以第一天我們做的汽車動畫為例。想要從最左邊移動到中間，也就是 left 從0變到50%。動畫可以這樣寫:\n1@keyframes drive { 2\t0% { 3 left: 0; 4 } 5 100% { 6 left: 50%; 7 } 8} 如果是從0%~100%可以寫 from 和 to\n1@keyframes drive { 2\tfrom { 3 left: 0; 4 } 5 to { 6 left: 50%; 7 } 8} 因為我們本來 left 就在0了所以可以省略。只有一行CSS也分號也可以省略\n1@keyframes drive { 2 to { 3 left: 50% 4 } 5} 最後再套用到元素上就好啦~\n1animation: drive 3s forwards; https://codepen.io/edit-mr/pen/NWeKpjj CSS Animation 的語法如下\n1/* @keyframes 持續時間 | 速度曲線 | 延遲 | 次數 | 方向 | 填充模式 | 播放狀態 | 名稱 */ 2animation: 3s ease-in 1s 2 reverse both paused slidein; 3 4/* 持續三秒，延遲一秒 */ 5animation: 3s linear 1s slidein; 6/* 和上面一樣，順序可以自由變換，我自己習慣這樣寫比較好讀 */ 7animation: slidein 3s linear 1s; 8/* 這樣效果也一樣，記得前面的是時長，後面是延遲 */ 9animation: slidein linear 3s 1s; 10 11/* 多重動畫 */ 12animation: 13 3s linear slidein, 14 3s ease-out 5s slideout; 速度曲線 我們在前面不管是設定 transition 還是 animation 都有時間曲線可以設定。可以根據你的需求做調整，也可以使用 cubic-bezier() 來自訂曲線。你可以使用這個網站生成看看，不過我覺得內建的已經很夠用了。\n圖片來源: Max\n設定速度曲線可以讓你的動畫更流暢，不會有突然爆走的感覺，也可以讓動畫更有質感。對於超連結 hover 做特效建議可以設定成 ease-out ，因為滑鼠動畫通常大家會希望有即時反應，但又不希望突然結束。\n以上就是我今天的分享，歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-4/","section":"post","tags":["HTML","CSS"],"title":"Day4 自己動! @keyframes 與 Transition"},{"body":"當你拿到一張設計圖要照著做出來你的第一反應是什麼呢？是直接套 bootstrap 再說嗎？但我幾乎所有的切版**只要是整齊能畫出網格的，我都會使用flex。**而這個網格也不一定是正方形，只要是矩形就可以了。\n什麼意思呢？假設 Google 拿了一張首頁的設計圖給我要我照著做出來（假設）\n那麼我會先看出來整個頁面被包在一個和螢幕一樣大的 flex 方框，垂直排列。而排完剩餘的空間全部給一個空白的方框。而上面的 nav 目錄方框裡面分左右兩個方框，靠兩側對齊。\n當然這沒有正確答案，但你可以發現其實只用 flex 就可以完成所有的切版作業了。因此讓我們先來認識他的基本語法吧。\nFlex 基本語法 要使用 flex 很簡單，在 HTML 請你用一個箱子包住幾個元素。比如說我建立一個 \u0026lt;section\u0026gt; 包著幾個 \u0026lt;div\u0026gt; ，並設個背景顏色方便查看，同時附上昨天學到的快捷鍵。\n1\u0026lt;!-- section\u0026gt;div*4 --\u0026gt; 2\u0026lt;section\u0026gt; 3 \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; 4 \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; 5 \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; 6 \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; 7\u0026lt;/section\u0026gt; 1section { 2 background: #191d88; /* bg #191d88 */ 3 padding: 5px; /* p5 */ 4} 5 6div { 7 width: 100px; /* w100 */ 8 height: 100px; /* h100 */ 9 background: #ffc436; /* bg #ffc436 */ 10 margin: 20px; /* m20 */ 11} 因為 div 是區塊元素 (display: block) 所以元素都會換行，而這很重要因為這樣我們才能設定他的寬高。但如果我們加上 display: flex 就可以讓他們並排。\n我們把外面包著大家的藍色元素叫做外容器，裡面叫做內容器。我們可以在外容器的CSS設定裡面的東西怎麼排。\n方向 flex-direction 1section{ 2 flex-direction: row; /* 預設左到右 */ 3 flex-direction: row-reverse; /* 右到左 */ 4 flex-direction: column; /* 上到下 */ 5 flex-direction: column-reverse; /* 下到上 */ 6} 比如說我設成 row-reverse 就會從右到左排。\n超過換行 flex-wrap 如果不設定的話瀏覽器會硬擠成一排。\n你可以加上 flex-wrap: wrap 來解放他。所有值如下\n1flex-wrap: nowrap; /* 不換行 */ 2flex-wrap: wrap; /* 太寬換行 */ 3flex-wrap: wrap-reverse; /* 換行但從下到上排 */ flex-flow 這是 flex-direction 和 flex-wrap 的縮寫，所以只要在這前後帶上相對應的值即可。\n1.flex-container { 2 flex-flow: \u0026lt;\u0026#39;flex-direction\u0026#39;\u0026gt; || \u0026lt;\u0026#39;flex-wrap\u0026#39;\u0026gt; 3} 水平對齊 justify-content 元素要對齊哪裡。注意如果你設定 flex-direction: column; 就是垂直對齊方向。這裡使卡伯斯製作的示意圖，非常清楚。\n1justify-content: flex-start | flex-end | center | space-between | space-around; 垂直對齊 align-items 你懂得，和上面相反。如果你設定 flex-direction: column; 就是水平對齊方向。\nflex-start 靠開始位置、 flex-end 靠結束位置、 center 致中、 strech 拉到一樣高、 base-line 會找文字的位置對齊。\n多行對齊 align-content 是上一個屬性的多行版本，比較少用，但排列方式也有多一些，但注意 stretch 在高度被限制的情況下不會正常伸展。\n1align-content: flex-start | flex-end | center | space-between | space-around | stretch; 內元件設定 我們會再內元件(黃色方塊)設定的 CSS 不多。我們可以使用 align-self: flex-end 設定單獨一個元素的特別往另一邊靠，也可以設定假設排完有多的空間要給誰。\nflex-grow: 剩下空間方給他幾份，預設值為 0，如果設置為 0 則不會縮放，1以上就大家來分。 flex-shrink: 反之，當空間分配還不足時的當前元件的收縮性，預設值為 1，如果設置為 0 則不會縮放。 flex-basis: 元件的基準值，可使用不同的單位值。 比如說以下是一個頁首，使用 flex-grow 把剩下的空間都給中間。\nhttps://codepen.io/edit-mr/pen/ZEVWaqq\n你可以使用 order 屬性來設定順序，前到後放入整數，支援負值。但我從來沒有用到過，都是直接在 HTML 改，不過還是提供給大家。\n如果你不熟悉 flex 的話你可以到 Flexbox Froggy 這個網站，用遊戲的方式了解 flex。(然後提示是可以直接按，不用慢慢輸入喔)\n你也可以使用今天所學到的語法複製一個 Google 的網頁。重點在排版所以按鍵的陰影和顏色可以直接打開開發者工具查看喔。我先做了一個範例提供大家參考，也能實現搜尋功能。如果有任何問題也歡迎留言。\n範例網站 | 原檔HTML | 原檔CSS\n以上就是我今天的分享，歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-3/","section":"post","tags":["HTML","CSS"],"title":"Day3 用 Flex 切遍天下"},{"body":"記得我在國一寫HTML的時候，傻傻的在那裡打小於、h1、大於、標題、小於、斜線、大於。我的朋友甚至發現了一個偷吃步就是先打好一堆大於小於，然後再填空。\n既然HTML 和 CSS 都長那樣，這種繁瑣的操作早就可以交給電腦來解決。所以今天我要和你分享如何使用 Emmet 快速的打 HTML 以及 CSS\nEmmet 可以做什麼呢？比如說我們想要建立一個一級標題，我們只需要先輸入 h1 再按下 Tab 即可，所有的標籤都可以這樣做。\n不過 emmet 不只是幫你省打兩個大於小於的時間，他還有很多的語法可以供你使用。這裡我寫出幾個我最常使用的技巧。\n基本 HTML5 架構 - ! 只要按下驚嘆號並按下 tab 就會自動生成一個基本的 HTML5 架構，非常方便。\n添加class - . 比如說我想建立一個 img 圖片元素，並加上一個 class 叫做 avatar，我只需要打\n1img.avatar 即可生成 \u0026lt;img *src*=\u0026quot;\u0026quot; *alt*=\u0026quot;\u0026quot; *class*=\u0026quot;avatar\u0026quot;\u0026gt;。而如果要建立的是一個div元素，因為平常大家太長用 div 了，直接打 .avatar 就可以了\n包在裡面 - \u0026gt; 比如說我想要建立一個 li 清單包著一個超連結 a 元素，那麼只需要打\n1li\u0026gt;a 即可生成 \u0026lt;li\u0026gt;\u0026lt;a *href*=\u0026quot;\u0026quot;\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;。可以無限往下包\n以及 - + 就跟 CSS 選取器 + 一樣，就是加在後面。比如說標題後面常接文章，我們就可以打\n1h2+p 生成 \u0026lt;h2\u0026gt;\u0026lt;/h2\u0026gt;\u0026lt;p\u0026gt;\u0026lt;/p\u0026gt;\n乘以 - * 比如說我們要建立清單，你可以打 li*3\n可以搭配前面的大於符號，效果如下\n1\u0026lt;!-- ul\u0026gt;li*3 --\u0026gt; 2 \u0026lt;ul\u0026gt; 3 \u0026lt;li\u0026gt;\u0026lt;/li\u0026gt; 4 \u0026lt;li\u0026gt;\u0026lt;/li\u0026gt; 5 \u0026lt;li\u0026gt;\u0026lt;/li\u0026gt; 6 \u0026lt;/ul\u0026gt; 括號 - () 就說你想的那樣。延續前面的例子,假設你要生成三個li元素，而每個都是超連結，你不能只打 li\u0026gt;a*3，因為這樣會變成一個li元素裡面有三個超連結。不過這時我們只需要加上括號就可以了\n1\u0026lt;!-- ul\u0026gt;(li\u0026gt;a)*3 --\u0026gt; 2 \u0026lt;ul\u0026gt; 3 \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; 4 \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; 5 \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; 6 \u0026lt;/ul\u0026gt; 內文 - {} 比如說剛才我們製作了一個目錄，但裡面我們想要先插入一點字，只需要加上中括號之間打內文就可以了\n1\u0026lt;!-- a{連結}*3 --\u0026gt; 2\u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;連結\u0026lt;/a\u0026gt;\u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;連結\u0026lt;/a\u0026gt;\u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;連結\u0026lt;/a\u0026gt; 插入索引值 - $ 比如說你想要內文分別是連結1，連結2，連結3，那麼你可以打\n1\u0026lt;!-- a{連結$}*3 --\u0026gt; 2\u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;連結1\u0026lt;/a\u0026gt;\u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;連結2\u0026lt;/a\u0026gt;\u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;連結3\u0026lt;/a\u0026gt; 再來一個範例，今天我們要輸入五個 li 標籤，標籤的 class name 分別為 list-1、list-2、list-3、list-4、list-5，輸入 li.list$*5 就可以了。\n如果要從不是1的數開始計算可以在 $ 後面補上一個 @ 告訴它從哪裡開始。比如說要從 5 開始就輸入 li.list$@5*5\n如果你想要編號自動補0的話可以多打 $ 。幾個 $ 就是幾位數，比如說 $$ 就是從01開始數\n這兩個我可以說是從來沒用過，但還是補充給大家\n屬性 - [] 今天你想要建立三個輸入框，並且強調他是數字輸入框，你可以把屬性直接打在中括號裡面\n1input[type=\u0026#34;number\u0026#34;] 有些人因為覺得HTML很難打很難維護因此使用 haml, slim, pug, 甚至是 Markdown 來取代 HTML…然後再用編譯器轉回HTML。我自己是覺得HTML格式都長一樣很整齊，算是非常好維護，但是每一個語言都有他自己的優勢在，有的能夠少打一些字，有的能和別的程式語言更好的溝通所以才會存在。大家只要找到自己最習慣的方式就好了。\n快速的打 CSS 應該大部分的人會發現你打 CSS 時， VS Code 會猜測你可能要打的詞，並且你只需要按 tab 就會自動完成。比如說你想換顏色，輸入 c 就會自動選擇 color，按 tab 就會自動打好。然而由於他是按照字母排得，有一些字需要幾乎打完才能選，甚至是可能會預設輸入錯誤的值。比如說你想設定 display，按下 d 並按 tab 竟然出現的是 display: inherit。我就問一年全世界有超過10個人會這樣打嗎？還需要刪除重新打，非常麻煩。\n不過 VS Code自動選字很聰明的地方是**你不需要照著字母順序打，且可以同時打屬性。**比如說如果你想輸入 display: flex 你只需要輸入 df 按 tab 就可以了。我是不知道你覺得怎麼樣啦，我是覺得很帥可以讓我瞬間打完一堆常用的 CSS。\n使用加號可以同時打好幾個屬性。以我最常使用的 flex 致中為例\n1display: flex 2justify-content: center; 3align-item: center; 可以直接打 dc+jcc+aic 就結束了。當然，同一行 CSS 有不一樣的打法，你只要找到你習慣好打的就可以了。\n你也許有看過有人打 w100 來生成 width: 100px ，不過預設的px單位可以說是越來越少用。它的原理和上面一樣就是你先打值也是可以的，比如說你想要 H1 標題變成預設字體三倍大，你可以打 fz3re。\n打fz是因為不管是 fo 變 font: optional, fn 變 font: none, ft 變 font-stretch: normal, fs 變 font-style: italic, fi 變 font: inherit, fe 變 font-emphasize\n最後補充一下，百分比%可以打 p。比如說50p 就是50%。\n你可以找你最常使用的幾款 CSS 語法記一下，再搭配 Copilot 就整個飛起來了。\n希望今天的分享對你有幫助，我自己還會搭配 Copilot 以及 Copilot Chat 一起使用，可以更進一步的提升你的效率。如果你們有興趣想聽船長是怎麼帶我飛的可以在留言去告訴我，也歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-2/","section":"post","tags":["HTML","CSS"],"title":"Day2 如何打的更快 | Emmet \u0026 預測輸入"},{"body":"哈囉大家好我是毛哥EM，歡迎來到 【不用庫 也能酷 - 玩'轉 CSS \u0026amp; Js 特效 】\n在這30天裡面我會先帶大家複習一些許多人搞不懂但很重要的語法，接者將揭開如何以最精簡的代碼，實現從簡單到複雜的特效，讓元素變得生動有趣。同時，我們也將挑戰自己，使用純JavaScript實現無需依賴庫的互動，從而提高網站效能和速度。\n基本上如果你有追蹤且照著順序讀下來大部分的內容都會滿輕鬆的。而如果你是一位大神的話也歡迎沒事來逛逛，搞不好你會找到你沒聽過的各種冷知識喔w\n無論你是前端初學者還是經驗豐富的開發者，這個系列都將帶給你嶄新的思維。帶你製作令人驚艷的網站。\n背景 第一天來講一下為什麼我要來寫這個系列。我從小學三年級開始玩 Wix（類似 WordPress 或 Google Site 的視覺化網頁編輯器），做網頁就像做簡報一樣拉一拉就好了。不過做出來的網頁預設載入了一大堆厚重的函式庫，明明只是淡入淡出還需要GSAP。，載入6、7秒都算正常發揮。當時雖然不會 HTML 但按 F12 也能看出機器生成的程式碼又臭又長。加上 Wix 網站會有很醜的廣告橫幅，裡面充滿了各種付費解鎖功能，還有 RWD 非常難弄，讓我決定從此走向手刻這條不歸路…\n然而並不只是機器生成的程式碼才有載入問題，在現代網頁函式庫的使用也是非常氾濫的。像是明明只是顯示號碼牌的網頁還要套 Bootstrap，因為懶得打 document.querySelector()而安裝 jQuery，甚至打開 Awwwards 隨便找一個得獎的網站都要放一個載入動畫，似乎在洗腦你好的網站就是要等待的。\n也許是我這個剛要升上高二的菜鳥不太會用函式庫，但自己做除了載入更快以外和可自訂性也比較高。只要熟悉效果後面的原理自己做是不會比較慢的。\n用庫就不酷了嗎? 然而不一定所有東西都是手刻才是最好的選擇。比如像是顯示 3D 模型的 three.js、手機擴增實境功能的 ar.js 都不是自己能夠輕鬆手刻的。現成的函式庫除了幫你省時以外大多瀏覽器相容性都不錯。你可以根據你自己開發和學習的成本取的一個甜蜜點。**做網站的方式千百種，只要能傳遞資訊和給使用者好體驗就是好網站。**不過對於簡單單一功能的函式庫，或是只需要大函式庫裡面的單一功能，那麼自己寫除了能省去學習及開發成本，也能避免一些衝突的問題。比如說這是一台車，並用以下程式把它致中。\n1.car{ 2\tposition: absolute; 3\tleft: 50%; 4\ttop: 50%; 5\ttransform: translate(-50%, -50%); 6} 我使用Animate.CSS想要製作一個車開進來的效果，只需要加入一個class就可以了…\nhttps://codepen.io/edit-mr/pen/bGObqWq\n等等我們的定位怎麼跑掉啦? 仔細一看原來 Animate.css 也是使用 transform 屬性來製作動畫，所以我們互相衝突了。\n當然你可以為了使用 Animate.css 所有的 CSS 都不使用 transform 屬性，但其實自己寫也沒有多麻煩喔，你只需要先把我們原本的 left: 50 改成出發點 0 ，製作動畫 @keyframes drive { to { left: 50% } ，然後套用到車子上就可以了。同時你對於車要動多快，加速度，時間點都可以自由地掌握。\nSee the Pen Car Move by Edit Mr. (@edit-mr) on CodePen. 我寫這一個系列並不是期待所有人都開始排斥函式庫，而是希望就算你要使用函式庫你也可以大致知道背後的原理，就像你不該先學習 React 再學習 JavaScript 一樣。這樣你除了走得更踏實以外，遇到問題需要微調也可以知道從何下手，而不是只會貼上範例程式。\n如果你認同我的想法的話歡迎追蹤這個系列，也歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技。而如果你不會HTML和CSS但因為某種原因你讀到這裡的話，歡迎訂閱我新開的YouTube頻道：網棧。\n我是毛哥EM，讓我們明天再見。\n","link":"https://emtech.cc/post/2023ironman-1/","section":"post","tags":["HTML","CSS","JS"],"title":"Day1 相見歡 - 庫就不酷嗎？"},{"body":"大家都認識 Twitter 的藍色小鳥，但近期的 Logo 更改卻引起了不少爭議，許多用戶都不喜歡 iPhone 和 iPad 上面的 X。若你也是其中一員，別擔心！我將向大家介紹一個全網唯一且不需捷徑跳轉的方法，讓你在 iOS 設備上將 Twitter 換回原本的 Logo，而且這個方法不會有煩人的通知強迫你再看一次 Logo，甚至可以把原本的X軟體直接刪除。讓我們一步步來看如何實現吧！\n安裝教學 想要一個原本 Twitter 的 Logo，你可以安裝我自製的這個描述檔。\n首先請你到我的 GitHub 頁面點擊Twitter Logo.mobileconfig下載我的描述檔。 點擊後你的瀏覽器會友善的提醒你正在下載描述檔，選擇確定。\n接著請你到設定。在最上面就可以看到他提示你安裝描述檔。 請你點選安裝，上面會警告這個描述檔沒有經過簽署，因為是我自己臨時做的。只要你是從我的 GitHub 頁面下載的且作者是 Edit Mr. 就不用擔心。如果你想確認的話可以點擊 More Details 查看描述檔內容。\n安裝好之後你就會看到你的主畫面出現藍色小鳥 Logo了！沒錯就是那麼簡單。點擊後就會直接顯示網頁版的 Twitter ，因此你也可以直接刪除原本的X軟體，釋放手機空間。我個人認為在iPad上面比 App 還好用呢!排版更有效利用空間。而且在App會被要求用 email 登入，在這個版本甚至可以使用 Google 或 Apple 等方式。 不過要注意這個Twitter的Web App需要網路才可以使用，無過誰看Twitter不用網路嘛\n透過以上的方法，你可以將 Twitter 換回原本的 Logo，並享受更貼近原始體驗的使用感受。\n如果你覺得這篇文章有幫助到你歡迎在Instagram或Google新聞追蹤毛哥EM資訊密技。如果你有任何問題，歡迎直接到毛哥EM資訊密技的Instagram私訊我，我很樂意協助解決你的問題。\n","link":"https://emtech.cc/post/twitter-logo/","section":"post","tags":["自製"],"title":"iOS如何把Twitter換成原本Logo?全網唯一不用捷徑!沒有跳轉!"},{"body":"哈囉大家好，我是毛哥EM，歡迎來到網棧。\n在我們開始之前讓我先簡單介紹什麼是VSCode。VSCode是一個整合式開發環境Integrated Development Environment（簡稱IDE）。因為寫程式需要同時用到很多工具，包括寫程式的文字編輯器，終端機，瀏覽器等。這時如果你有一個軟體可以做到所有的功能，還可以在需要其他功能時直接下載擴充，是不是十分的方便！\n安裝軟體 首先請你到 Visual Studio Code 官網下載並安裝Visual Studio Code。打開安裝檔並一直下一步即可。如果顯示的版本不正確的話請你點擊箭頭選擇正確的作業系統版本。\n建立網站 進到VSCode中會顯示歡迎畫面，你可以選擇你喜歡的主題顏色佈置。我們直接來試著架設一個網頁，首先請你先開啟一個資料夾，如果沒有的話你可以建立一個。比如說我建立了一個叫做資料夾的資料夾。在VSCode中我建議你開啟資料夾而不是單一檔案，除了切換檔案比較方便以外，有一些功能也需要開啟資料夾才能使用。\n我們在資料夾建立一個檔案，命名叫做index.html。VSCode完全支援Emmet語法，我們輸入!並按下tab就會建立一個基本的HTML架構。沒錯，這才是完整的HTML，我們之前打在Codepen的HTML應該要打在\u0026lt;body\u0026gt;裡面。第一排的\u0026lt;!DOCTYPE html\u0026gt; 是在告訴瀏覽器使用最新的HTML5，\u0026lt;head\u0026gt;是放使用者看不到的網頁資訊，而\u0026lt;body\u0026gt;就是頁面內容。讓我來嘗試打開這個HTML檔案。點擊文件並且按下alt+shift+r或是點擊右鍵選擇在檔案總管開啟。雙擊使用瀏覽器打開。\n你可以把視窗往螢幕的右側頂就會填滿右半部，左半部選擇VSCode即可完成左右畫面切割。對於製作網頁即時預覽非常方便。\n擴充功能 Live Server - 即時預覽 不過你可以發現每次編輯完存檔後右邊的瀏覽器都需要重新整理，非常麻煩，而且如果你使用久了，你會發現很多網站功能會失效。因此我建議你安裝一個擴充功能叫做Live Server。切換到擴充功能分頁並且安裝後，點擊右下角的Go Live就會自動架設本地的網頁伺服器，並顯示你的網頁。只要編輯完按control+S存檔就會即時同步更新。\nIndent Rainbow - 縮排彩虹 我建議你安裝一個擴充功能叫做Indent Rainbow - 縮排彩虹。他會幫你用不同的顏色標記每個縮排，在閱讀複雜文件時非常有用。\nVS Code Pets - 養隻寵物吧 一個人寫程式非常孤獨，但是你可以在VSCode裡養寵物。下載VSCode Pets擴充功能你就可以在VSCode視窗裡面養寵物，且我有把它翻譯成中文（對了，如果你看不慣英文介面VSCode也有繁體中文擴充功能可以安裝），你可以在設定裡改變寵物大小，場地背景以及開啟丟球模式。點擊+可以生成更多寵物，讓他們陪伴你度過痛苦的寫程式時光。\nNight Owl - 看起來舒服的主題 一直看著同一個畫面長時間會感到膩和煩躁。一個好看的主題可以讓你的眼睛更舒服。我十分喜歡Night Owl這個主題，對於不同資料型態的顏色和字體區分讓我開發起來很有效率，且長時間注視不會不舒服。\nCopilot / Tabnine - 讓AI助你一臂之力 我還建議你安裝GitHub Copilot。他會在你寫程式的時候預測你之後要打的內容，可以大幅加速你開發的效率。不過Copilot對於非學生是需要付費的，如果你有的話可以登入你的GitHub帳號驗證。如果沒有的話，使用Tabnine也有不錯的效果。你在寫程式的時候，他自己就會幫你猜下一行。你也可以透過註解要求他生成指定的內容比如說這裡我要求他生成一個質感設計的按鈕。\nMaterial Desig Icon - 好看圖示 最後我推薦你安裝一個圖示的擴充功能，它會給不同種類的檔案不同形狀的符號，讓你更輕鬆的找到檔案。我自己是使用Material Design Icon，我覺得滿好看的。\n總結 好啦，以上就是我對VSCode的分享。我們還剩下git的功能還沒有提到，讓我們下禮拜再繼續聊。\n週一早上六點，我會在YouTube和各大Podcast平台不定時更新。如果你喜歡文字版，也歡迎在Instagram和Google新聞追蹤毛哥EM資訊密技。 我是毛哥EM，讓我們下週再見！\n","link":"https://emtech.cc/post/webpallet-4/","section":"post","tags":["HTML"],"title":"VS Code 教學與你值得擁有的擴充功能"},{"body":"","link":"https://emtech.cc/series/%E7%B6%B2%E6%A3%A7/","section":"series","tags":null,"title":"網棧"},{"body":"哈囉大家好，我是毛哥EM，歡迎來到網棧。今天我要讓你10分鐘學會所有常用的CSS語法\nCSS的功能是來裝飾HTML的，因此這部影片假設你已經會使用Codepen和HTML了，如果還沒有的話建議你先去看EP.2 十分鐘完結HTML喔。有一些部分可能比較難理解，但我相信你只要多練習幾次就可以了。\n簡單的CSS 首先請你先建立一個h1標題。\n1\u0026lt;h1\u0026gt;我是標題\u0026lt;/h1\u0026gt; 如果你想讓它變成藍色的話你可以這樣打CSS\n1h1 { 2color: blue; 3} 這樣就可以了，你可以試試看改成其他顏色，例如紅色、綠色、黃色等等。\n接下來我們要來改變字體大小，你可以這樣打\n1h1 { 2color: blue; 3font-size: 50px; 4} 我們來看一下CSS的結構。h1是選擇器，代表我們要選擇的元素，而color和font-size是屬性，代表我們要改變的屬性，blue和50px是屬性質，代表我們要改成的值。選擇器有很多種，我們來看一下最常用的幾種。\n選擇器 元素選擇器: 比如說h1就是選擇所有的h1元素 所有後代: 比如說*就是選擇所有的元素 後代選擇器: 比如說 nav a就是選擇所有nav裡面的a元素 親代選擇器: 比如說 ol \u0026gt; li 就是選擇所有ol裡面的li元素。而如果是ol裡的li裡的li就不會被選到。 群組選擇器: 比如說 nav, a就是選擇所有nav元素和a元素 相鄰兄弟: 比如說 h1 + p就是選擇h1正後方的那一個p元素 一般兄弟: 比如說 h1 ~ p就是選擇h1後面的所有p元素 屬性選擇器: 比如說 a[href=\u0026quot;https://twitter.com\u0026quot;]就是選擇所有連結到twitter首頁的a元素 屬性網址包含某字是使用星號: a[href*=\u0026quot;tuts\u0026quot;] (比如說nettuts.com、net.tutsplus.com、tutsplus.com) 屬性開頭是使用上箭頭caret符號: a[href^=\u0026quot;http\u0026quot;] 屬性結尾是使用錢符號: [href$=\u0026quot;.jpg\u0026quot;] 權重 當有兩個CSS是在描述同一個元素，那們瀏覽器要聽誰的呢?這個時候我們就會看權重。有兩個規則\n權重越高，就越有權力 你女朋友說你很醜，早餐店阿姨說你是帥哥，那麼你應該很醜，因為女朋友權重比較重。\n權重從高到低分別是\nID 選擇器 類別選擇器、屬性選擇器、偽類選擇器(如:root) 元素選擇器、偽元素選擇器 任何元素選擇符*沒有權級 記得是可以相加的喔，這裡有一個計算機，如果不確定的話可以試試看。\n如果你想要讓你的樣式宣告比較有權力，你可以使用!important，但是這個方法不是很好，但是如果真的沒辦法讓你的樣式宣告生效的話，你可以使用這個方法。\n權重如果相等，後寫的樣式宣告會蓋過先前的樣式宣告 就像你女朋友在剛交往時很愛你，但是後來你變得很醜，所以她就不愛你了。那麼他不愛你了，因為要以後面的為主。\n各種單位 接下來我們來看一下各種單位。CSS有很多種單位，我們來看一下最常用的幾種。\n顏色 今天假設你想表示紅色，你可以使用以下幾種方式，都是一樣的效果\n1h1 { 2color: red; /* 顏色名稱 */ 3color: #ff0000; /* 16進位HEX碼 */ 4color: rgb(255, 0, 0); 5color: rgba(255, 0, 0, 1); /* RBG加上A透明度 */ 6color: hsl(0, 100%, 50%); /* HSL分別代表色相、飽和度、亮度 */ 7color: hsla(0, 100%, 50%, 1); /* HSL加上A透明度 */ 8color: color(display-p3 1 0 0 / 1); /* 使用color可以顯示RGB不能表示的顏色，我們之後再來討論 */ 9} 大小 接下來是大小單位\n1h1 { 2font-size: 100px; /* px是像素 */ 3font-size: 10rem; /* rem是相對於系統設定的字體大小 */ 4font-size: 10em; /* em是相對於父元素的字體大小 */ 5font-size: 10vw; /* 10vw是相對於螢幕寬度10% */ 6font-size: 10vh; /* 10vh是相對於螢幕高度的10% */ 7font-size: 10vmin; /* vmin是相對於螢幕寬度和高度的最小值的百分比 */ 8font-size: 10vmax; /* vmax是相對於螢幕寬度和高度的最大值的百分比 */ 9font-size: 10%; /* %在不同時候的意思不太一樣，但原則上就是你想的那樣...嗯對 */ 10} width跟height的%基準是父層 line-height以本身文字行高為基準 接下來我們來有效率的一次認識所有常用的CSS語法吧\n裝飾文字 語法直接全上!\n1h1 { 2 color: red; /*顏色*/ 3 font-size:1em; /*字體大小*/ 4 letter-spacing: 10px; /*字體間距*/ 5 line-height: 1.5; /*行高。通常會用數字代表正常高的倍數 */ 6 font-weight: 500; /*字體粗細，數字最大900，越大越重，預設*/ 7 text-decoration:underline; /*底線，最長是用none來把超連結醜醜的底線移除*/ 8 font-style:italic; /*斜體*/ 9 Opacity:0.5; /*不透明度*/ 10 text-align:center; /*文字對齊方向*/ 11 font-family:arial, sans-serif; /*字體，如果第一個沒有就依序往後*/ 12} font-weight font-weight是字體粗細，有以下幾種寫法\n1/* 關鍵字 */ 2font-weight: normal; 3font-weight: bold; 4 5/* 比較級關鍵字 */ 6font-weight: lighter; 7font-weight: bolder; 8 9/* 絕對的數值 */ 10font-weight: 100; 11font-weight: 400; /* 正常 */ 12font-weight: 700; /* 粗 */ 13font-weight: 900; text-decoration text-decoration是裝飾文字，有以下幾種寫法:\n1text-decoration: underline; /*底線*/ 2text-decoration: overline red; /*上線並且是紅色*/ 3text-decoration: none; /*沒有裝飾*/ 4text-decoration-color: #ff00ff; /*裝飾的顏色*/ 背景 background-color background-color是背景顏色\n1background-color: #ff0000; background-image background-image是背景圖片，可以用url()來指定圖片位置\n1background-image: url(cloud.png); 2background-repeat: no-repeat; 3background-size: cover; /* 寬填滿 */ 4background-size: contain; /* 高填滿 */ 5 6background-position: top left; 7background-position: 20% 40%; /* 從左上開始算 */ 8 9background-attachment: scroll; /* 不動但可以往下滾 */ 10background-attachment: fixed; /* 卡住不動 */ 11background-attachment: local; /* 一起動 */ 漸層 漸層的邏輯可以參考我的網頁漸層指引(然後你可以順便按讚追蹤)\n語法可以直接寫多個顏色，在空白後寫佔的比例。\n1background: linear-gradient(#333, #333 50%, #eee 75%, #333 75%); 這個比例可能跟你想像的不太一漾，漸層開始的位置是0%，漸層結束的地方是100%。你寫的百分比代表你寫的位置的顏色，顏色間會自動平分，如果沒有寫就會自動平分。前面可以加入關鍵字表示漸層方向。12點是0度，依序循轉漸進。\n1background: linear-gradient(#e66465, #9198e5); 2background: linear-gradient(0.25turn, #3f87a6, #ebf8e1, #f69d3c); 3background: linear-gradient(217deg, rgba(255,0,0,.8), rgba(255,0,0,0) 70.71%), ![](https://i.imgur.com/XUupJaf.png) border 邊框。分成border-top,border-bottom, border-left, border-right，或是使用border一次指定所有的\n1border-style: solid; /* 花邊，Solid是預設的直線 */ 2border-width: 10px; /* 寬度 */ 3border-color: #00ff00; /*邊框顏色 */ 4border: solid 10px hsl(0 ,100%, 100%); /* 縮寫 */ border-radius 圓角。單位可以是半徑或著是百分比。所以如果你設成50%就會變成圓形。如果有兩格值就是上下和左右，四個就是上右下左。\n1border-radius: 四個角; 2border-radius: 左上角與右下角 右上角與左下角; 3border-radius: 左上角 右上角 右下角 左下角; 4border-top-left-radius: 10%; outline outline位置在border的外緣，但不佔用元素的任何空間。原則上我通常不會想用到它，因為border比較好用。 outline不能夠聲明單邊樣式，它一定是圍繞呈現的。\noutline的形狀可以不規則，它會順著border邊緣顯示，不一定得是矩形。可是目前大多數的瀏覽器不支援該特性。實際上驗證之下會發現outline並不會去適應border-radius的圓弧。\n1outline-style | outline-width | outline-color | outline-offset Box-sizing 可以指定元素大小的計算方式。\n1box-sizing:content-box; // 把寬度範圍指定給內容物的空間 2box-sizing:border-box; // 把寬度範圍指定給整個邊框到邊框之間的空間。 所以在 block 元素中只要設定 box-sizing:border-box; 就不用另外再計算padding、border 的寬度造成 width 賦予的值不直覺。\n假設 width:300px, padding 就算加了 20px, border 加了4px，寬度依舊是300px。\ndisplay CSS的Display屬性可以改變元素對外所參與的佈局環境（outer display type），白話文就是元素怎麼排。\ninline: 像文字一樣左到右上到下，不能決定寬高 block: 佔滿\u0026lt;body\u0026gt;整排，下一個東西會換行 contents: 只有contents area的box，只顯示內容文字。 inline-block: 保持像block一樣得特性，可以設長寬等等，但一樣從左到右排 display: none Bang不見 block 是有面積的，可以設定寬跟高 inline 設定寬高無效，可以設定 padding 的左右值，上下值無效，無法被撐開。 inline-block 同時擁有兩種 display 的特性，可以設定寬高，但也可以與其他元素並排。 如果使用 inline-block(像是 a 或 li 設定)，標籤之間會有空白字元約 4~5px\n也可以為元素創造內部的佈局環境，提供後代元素佈局的規則（inner display type）。對內創造的佈局例如：\nflex\n彈性盒佈局，該屬性值的元素本身對外仍參與normal flow，可是內部環境為獨立的flex formatting context。 grid\n格線佈局，該屬性值的元素本身對外仍參與normal flow，可是內部環境為獨立的彈性盒佈局grid formatting context。 這些我們之後會再細細討論。\nfloat 用法 常見用法像是文字繞圖片的特效。none是正常排，left就是去左邊，right是去右邊。\nnone left float是我比較少用的CSS，因為會遇到一些問題比如說float collapse\n當然解決方法很多，列幾個\n元素的float參數不為none 元素的position參數為absolute或fixed 元素的display為inline-block overflow參數不為visible的block元素 display參數為flow-root的元素 Clear 1clear: left|right|both; 可以讓左/右不會重疊到\nPosition 功能是設定物件定位時所要的參考對像。可以用的有\n1position:static | relative | absolute | fixed | sticky; static 原始定位 inline往右，block往下\nreletive 相對定位 我原本該在哪裡位置就佔著，但我可以看起來要往右/下...\nabsolute 絕對定位 會以reletive的位置來定位，接著再用top left bottom right排。有一個口決:父相子絕，就是外面用relative,裡面用absolute。\nfixed 貼著視窗，卡在那裡，原本位置不再佔據。\nsticky 以自己為基準，卡在那裡，但sticky元素仍然in flow，元素佔位會保留。\nTransform 原本位置佔著，但是可以做出各種效果如rotate 旋轉\nTransform: translate 可以改變元素定位的參考位置，最常見的是把參考點變成元素正中間，方便定位。\n1transform: translate(單位或百分比, 單位或百分比); 2transform: translateX(單位或百分比); 3transform: translateY(單位或百分比); 單位值為多少就平移多少，然後transform支援負值\n1.translate { 2 background-color: pink; 3 transform: translate(100px, -50px); 4} translate的百分比基準是自己的width跟height\n來一個推方塊範例\n1.outer { 2 position: relative; 3} 4 5img { 6 position: absolute; 7 top:50%; 8 left: 50%; 9} 再來往左上推: transform: translate(-50%, -50%);\n就做到致中的效果啦\ntransition 轉場 當元素因為各種原因改變屬性質，比如說javascript改的或著是因為元素被點擊等等。會在指定時間平滑的切換過去，做出簡單的動畫。\n1transition: 屬性 轉換時間 延遲執行動畫的時間 速度; 2 3transition:all .3s 0s ease;// 設定全部 0.3秒轉換 沒有延遲 ease為預設值 4transition: padding .3s 0s, background-color 1s 1s; // 可以各別設定，用逗號分開，並用延遲時間設定出現的先後順序 任何屬性都可以設定transition，比如說文字段落滑過要變色也可以。\noverflow 假設元素超過了框框的大小。可能是父原素的大小有可能是超過了螢幕的大小。這時候我們可以使用overflow屬性來決定要怎麼處理。最常用的是hidden隱藏、auto自動還有scroll，也就是顯示滾動軸。\n1/* Keyword values */ 2overflow: visible; /* 可突出 */ 3overflow: hidden; 4overflow: clip; /* 禁止所有滾動 */ 5overflow: scroll; 6overflow: auto; 7overflow: overlay; /* 不佔空間的auto */ 8overflow: hidden visible; Media Media可以告訴瀏覽器在不同的螢幕大小該如何呈現。這個是基本的語法。\n1@media screen and (條件) and (條件)...{ // 判斷式，用在screen螢幕的媒體 2} 語法有很多不同的寫法，我決定教你一個雖然是最近出來，但是絕對是最好理解的屬性。\n1@media (height \u0026gt; 600px) { 2h1{ 3font-size:2em; 4} 他的意思是說假設螢幕寬度大於600像素，那麼大標題就要以正常字體的兩倍大顯示。\n偽類 偽類可以讓我們針對特定的元素狀態或條件應用樣式，這使得我們可以更好地控制和美化網頁的外觀。\n在CSS中，偽類以冒號（:）開頭，並在選擇器後面添加。它們可以根據元素的特定狀態或其他條件應用樣式，例如當滑鼠懸停在元素上方時，或當元素是其父元素的第一個子元素時。\n以下是一些常見的CSS偽類：\n:hover：當滑鼠懸停在元素上方時應用的樣式。這是一個常見的偽類，常用於添加互動效果，例如當滑鼠懸停在按鈕上時改變其背景顏色。 :active：當元素被激活時應用的樣式。通常用於按下按鈕或鏈接時，以顯示按下效果。 :visited：應用於已訪問過的連結的樣式。這使得訪問過的連結可以與未訪問的連結區分開來。 :first-child：選擇父元素的第一個子元素。這使得我們可以針對列表中的第一個元素或表格中的第一列應用特定的樣式。 :nth-child()：選擇父元素中特定位置的子元素。這個偽類允許我們按照一定的模式選擇元素，例如 :nth-child(2n) 可以選擇所有偶數位置的元素。 比如說你想要元素在滑鼠放在上面時往上移一點，有選牌得感覺，你可以這樣打\n1.card:hover{ 2 transform: translateX(-10px); 3} 4 5這只是偽類的一小部分，還有其他更多的偽類可供使用。使用偽類，我們可以根據特定的條件和狀態來微調網頁的樣式，使其更具交互性和吸引力。 6 7 8## 偽元素 9 10最後我們來談談偽元素 11跟偽類的差異在於，偽類是基於真實存在的元素去選取不存在的class，而偽類則是基於存在的元素，創出一個虛擬的元素。它的選擇符是::雙冒號。 12 13直接看範例，你們就懂了 14 15```html 16\u0026lt;p\u0026gt;大家好\u0026lt;/p\u0026gt; 1p::before { 2 content: ”哈囉“; 3} 哈囉大家好\n沒錯就是這麼簡單，通常我們會拿它來做視覺效果。比如說在開啟新分頁的超連結旁邊放一個小小的箭頭符號。\n總結 好啦，今天我們介紹了許多不同的CSS屬性。這些已經是最常用的屬性了，但礙於篇幅我們有一些沒有講的很詳細。如果你想知道更多的屬性，可以到MDN查詢。下一週我們要來介紹如何使用VSCode這個酷酷的「整合式開發環境」。\n每週一早上六點，我們會在YouTube和各大Podcast平台不定時更新。如果你喜歡文字版，也歡迎在Instagram和Google新聞追蹤毛哥EM資訊密技。 我是毛哥EM，讓我們下週再見！\n","link":"https://emtech.cc/post/webpallet-3/","section":"post","tags":["CSS"],"title":"EP.3 10分鐘 基本CSS教學"},{"body":"iOS 17 與 iPadOS 17 在今年 6/6 號發佈，而隔天就開放 developer beta 版給我們使用了，可以說是最快的一次。儘管在發佈會上 iPadOS 的篇幅並不多，但多了很說實用的小更新，以及介面質感的大提升。發布會上沒有提到一次 Ai，但但滿滿的都是人工智慧和深度學習。\n毛哥我這兩天很忙，使用 iPad Pro M1 的量非常大。從基本的文書處裡到複雜的影片剪輯都有使用到。因此經過了所有功能完整的體驗，我來跟大家分享一下我的心得。讓我們開始吧。\n系統更新時間 這一次的更新不算太久，整個過程大約30分鐘，進度條跑了兩次，都是到1/3就直接跳到滿了。\n鎖定畫面更新 首先是鎖定畫面的更新，這次的更新移植了iOS 16 的自訂功能，讓鎖定畫面變得更加的有質感。\n首先是鎖定畫面的小工具，小工具的位置會由上往下排，但是我比較喜歡在中間的感覺所以我自己使用 Scriptable 寫了點程式做了個透明小工具(之後再來出教學)。\n整體來說我覺得非常好看。提醒事項可以直接打勾互動，非常方便。不過需要先解鎖，所以不用擔心誤觸或是別人亂按。\n直過來背景上方會逐漸變暗來凸顯時間，我覺得處裡的非常好，不會太過於突兀。而播放音樂時也和 iOS16 一樣可以點擊封面放大。\n背景桌布由逍遥吖提供\n背景可以套用各種濾鏡，但是我覺得原本就很好看了，所以就沒有套用其他的濾鏡了。\n本來是想要測試人物微微遮住時鐘的偽立體效果，但是似乎插畫雖然在圖片長按可以去背但是在鎖定畫面上還是會被遮住，有點可惜。\n有趣的是內建的行星都不會突出首先是鎖定畫面的小工具，小工具的位置會由上往下排，但是我比較喜歡在中間的感覺所以我自己使用 Scriptable 寫了點程式做了個透明小工具(之後再來出教學)。\n無邊記 無邊記是我自己非常喜歡的一款筆記軟體，不管是拿來做筆記、與朋友討論專案、或者是在寫程式時放在旁邊做運算都非常方便。在這次 iPadOS 更新中多了一些小功能：\n心智圖 這次加入了心智圖的功能，可以建立形狀之後，拉線條往4周再建立不同的形狀。只需要點擊右下角流程圖按紐即可。隱藏格點的按紐改到他的右邊，不過我自己是習慣開著，字比較不容易寫歪。\n尺規 \u0026amp; 水彩 以前在截圖編輯時還可以使用尺規，但在這裡既然沒有辦法使用。現在終於有了，可以控制旋轉角度畫出直線。且顏色選擇變得更方便。畫圖形長按會自動變成幾何圖形。\n最後無邊記還新增了水彩筆刷和鋼筆。我覺得還蠻好看的，不管是塗鴉還是標記重點都很有質感。兩個筆刷皆支援感斜感壓，副廠筆也可以。\n翻譯 翻譯變得更精準且介面重新設計過。之前常常遇到語言辨識錯誤的情況完全改善了。\n輔助使用 標籤 就是按紐右邊多出了一個標籤，個人覺得實用性不高。\n按鈕形狀 理論上應該是按紐會出現形狀，但是我測試了很久都沒有出現，不知道是不是我用的方法不對，還是這是一個 bug。\n增加對比 可以增加對比度，讓顏色更鮮明，在光線亮的環境下可以看得更清楚。\n個人聲音 這個功能是可以輸入文字，iPad會幫你唸出來。效果很好，且任何字他都會念。我最常拿來使用的場景是請這個附身幫我重複朗讀我的英文辯論講稿。官方有說個人聲音可以在別人打電話來你不方便打電話的時候代替你說，但目前還沒有支援中文。\n如果你想要建立個人聲音請到輔助功能設定。建立個人聲音需要念166句英文，上面寫15分鐘但我用正常語速實際念了半小時。\n(正好下午是英文辯論賽，也許我拿MVP他也有功勞吧)\n聲音念完可以下載下來。個人聲音建立深度學習需要時間(大約一整天)，且要一邊沖著電才會訓練。\n效果不錯但是還是聽得出來不是真人，但已經很接近了，可以聽的出來它是想模仿誰。\n敏感內容 現在開啟 Safari 進入無痕模式，以及瀏覽相簿垃圾桶會需要先通過FaceID才會開啟。且可以再設定如果別人發送訊息的內容有敏感內容會自動遮蓋，點擊後才會顯示。支援Airdrop, iMessage, 和影音訊息。不過我平常沒有在看敏感內容所以就留給大家自己體驗了。\nSiri 直接念 Siri 就可以了，不用念Hey Siri。不過我已經唸習慣了所以平常還是會嘿一下。感覺 Siri 反應有稍微變慢，但還算勉強能夠接受。\nBug 整體使用起來沒有太大問題，電池耗電無明顯提升。但是還是有一些小問題，原則上不影響使用。例如使用iPad 會有些背景圖片螢幕轉了但圖片忘記轉，小工具不能用拉的，幕前調度超過五個剛開始會死機，後來就是把最後面的移走。還有更新後出現很多沒連接過的藍芽裝置，偶爾卡頓跑版，都是小問題偶爾出現不影響使用。\n我也要玩iOS17! 如果你也想要跟我一起受災可以參考我寫的這片文章。\n我遇到軟體問題 我有整理翻譯官方釋出錯誤及解決分案可以提供參考\n如果你覺得這篇文章有幫助到你歡迎在Instagram或Google新聞追蹤毛哥EM資訊密技。如果你有任何問題，歡迎直接到毛哥EM資訊密技的Instagram私訊我，我很樂意協助解決你的問題。\n","link":"https://emtech.cc/post/ipados17/","section":"post","tags":["ios"],"title":"iPadOS 17 真實心得 官方沒講的秘密，質感體驗的大升級（不斷更新）"},{"body":"iOS17在6/6號發佈，且在昨天釋出測試版。以下是我整理出來目前Apple官方釋出遇到的問題及解決方案，希望能幫助到你。\n如果你想知道要如何提前預覽iOS17，你可以參考我寫的這片文章。資訊是我從Apple的開發者資料整理而成，我會在這兩天發布我iPadOS 17的使用心得，敬請期待\n問題整理 iOS \u0026amp; iPadOS 17 Beta Release Notes\n一般 已知問題\n安裝了大量應用程式的設備在更新文件系統格式時會顯示帶有進度條的蘋果標誌，時間會延長一段時間。這是升級到 iOS 17 beta 的第一次遷移。 (109431767) Accelerate 框架 新功能\n更新包括： Spatial 為 Spatial 角度類型引入三角函數功能 為 Spatial 旋轉引入球面線性插值 為 Spatial 旋轉引入擺盪-扭曲分解 BNNS 引入 BNNSRandomFillCategoricalFloat，用於以事件概率從分類分布中填充張量的隨機值 引入最近鄰居計算 vImage 引入 vImageConvolveFloatKernel_ARGB8888，用於對每通道 8 位、4 通道交錯影像應用卷積，使用 32 位浮點權重 引入 vImageSepConvolve_ARGB8888，用於對每通道 8 位、4 通道交錯影像應用可分離卷積 將泛洪填充、透視變換和新的查找表變換添加到 vImage.PixelBuffer (105830806) 無障礙功能 已知問題\nVoiceOver 可能無法在某些文本字段中朗讀預測文本。 (108858169) 解決方法：用戶可以在設置應用中暫時禁用預測文本。 創建個人語音後，您可能無法選擇此語音用於現場演講。 (109580709) 解決方法：重新啟動設備，然後再試一次。 AirPlay 已知問題\niPad Pro (10.5 英吋) 或 iPad Pro (第二代 12.9 英吋) 目前不支援 AirPlay 鏡像。使用 iPad 作為 Mac 的擴展顯示器可能也會受到影響。 (109683501) AirPods 已知問題\n在 iOS 和 macOS 的設置中，按住 AirPods 按鈕只會將噪音控制旋轉保存在本地設備上。 (110266311) 使用 macOS 回答 iOS 的 FaceTime 通話並使用 AirPods 軸，可能會處於無法靜音的狀態。 (110266339) 解決方法：重新啟動機器。 macOS 上的 Spotify 應用程式會自動將 iOS 上的 Spotify 音頻路由到無聲。 (110266347) 在 Adaptive Audio 的教學卡片中，AirPods 的顏色可能在深色模式下反轉。 (110266361) 應用程式意圖 已知問題\n在 Shortcuts 應用程式中，DeprecatedAppIntent 協議可能不會將 App Intent 標記為已棄用。 (103277731) Widget 配置和 Shortcuts 編輯器中顯示的 UI 可能不會遵守陣列 @Parameter 的大小。 (109050453) Widget 配置、專注過濾器和 Shortcuts 編輯器可能無法配置某些測量維度。 (109114787) Apple Studio Display 已知問題\n在播放音頻時拔下 Apple Studio Display 可能導致顯示器繼續循環播放最後一秒的音頻。 (105232584) 解決方法：將顯示器重新插入設備數秒，直到循環播放的音頻停止。或者，將顯示器斷電數秒。 輔助存取 新功能\n輔助存取提供了另一種 iOS 使用體驗。可以在「設定」\u0026gt;「無障礙」\u0026gt;「輔助存取」中配置並啟用輔助存取。要結束輔助存取，請三次點擊側邊或主頁按鈕，然後輸入配置的退出密碼。 (109227206) 已知問題\n在通話中，結束通話按鈕可能無法使用。 (107597320) 解決方法：強制重置設備。 音頻編解碼器 棄用功能\n不再支援 QDesign 音頻編解碼器 (qdmc 和 qdm2) 和 Qualcomm PureVoice 音頻編解碼器 (qclp 和 qclq)。 (82414419) 身份驗證服務和密碼鍵 新功能\n憑證提供者 API 已擴展以支援密碼鍵。憑證提供者可以保存並提供應用程式和網站的密碼鍵。 (83501802) ASSettingsHelper 允許密碼管理器應用程式直接打開「設定」視圖，以啟用系統範圍的自動填充密碼和密碼鍵登錄的憑證提供者擴展。ASSettingsHelper 還允許驗證碼 (TOTP) 應用程式直接打開「設定」視圖，以配置打開驗證碼設定連結的應用程式。 (106351958) AVFoundation 已知問題\nAVCaptureDevice 的屬性 userPreferredCamera 和 systemPreferredCamera 的描述狀態：「此屬性始終返回一個存在的設備。」這些屬性在應用程式啟動期間的短暫時間內會返回 nil。 (109424245) 解決方法：使用鍵值觀察，並在提供第一個非 nil 結果後開始對該屬性的更改作出回應。 CarPlay 已知問題\n在與 CarPlay 斷開連接後，當其他信息仍可見時，地圖可能會呈現空白地圖視圖。此問題不會影響 CarPlay Dashboard 中的 Apple 地圖。(109433602) 解決方法：從 CarPlay 斷開連接至少 8 分鐘，或者強制退出並重新啟動地圖應用程式。 行動網路 已知問題\n在切換「設定」\u0026gt;「行動網路」\u0026gt;「行動數據」後，第六代 iPad（Wi-Fi + 行動網路）可能會顯示「無服務」。(109705637) 解決方法：重新啟動設備。 登記 已知問題\n如果設備設定了登記並且設備離線，可能會發生所要求與登記接收者共享的內容與實際共享的內容不一致。(108265124) Siri 的通告可能會重複播報部分來自登記的通知。(109409441) 會話結束後，狀態可能解除關聯，留下一個可見的即時活動。(110066137) 解決方法：開始和結束新的登記將清除即時活動。 登記目前不支援中國地區。(110069236) 內容快取 已知問題\n在「設定」中，目前的內容快取狀態可能無法正確顯示。(109496539) 內容限制 已知問題\nSiri 的「明確語言過濾器」無法啟用以下地區的設定：he-IL 和 tr-TR。(109157875) eSIM 轉移 已知問題\n在使用「從附近的 iPhone 轉移」進行 eSIM 轉移時，如果使用不同的 iCloud 帳戶或者沒有 iCloud 帳戶的設備之間進行轉移，可能會失敗。(109543664) 解決方法：在嘗試轉移 eSIM 之前，確保兩個設備都登錄到相同的 iCloud 帳戶。 Apple TV 上的 FaceTime 已知問題\n如果 Apple TV 通過以太網連接，則無法使用訪客配對功能。(107163191) 解決方法：通過 Wi-Fi 連接 Apple TV。 如果手機已經作為連接的攝像頭，並且在接聽 FaceTime 呼叫後切換到 Apple TV，可能會導致呼叫中斷。(107187159) 解決方法：先從 Apple TV 斷開手機，然後再切換呼叫。 通過點擊「切換到手機」將 FaceTime 呼叫從 Apple TV 轉移到 iPhone 可能會導致呼叫中斷。(108810085) 解決方法：要將呼叫轉移到 iPhone，首先結束呼叫，然後從 iPhone 重新開始呼叫。 在從 iPhone 移到 Apple TV 的通話中，可能會出現重複的參與者。(110087471) 尋找我的iPhone 已知問題\n對於在「尋找我的iPhone」中共享多個項目的用戶，使用安全檢查停止項目共享可能會失敗。(110141887) 解決方法：在「尋找我的」中停止共享項目。 Foundation 新功能 引入了 TermOfAddress，用於描述在語言中應該如何稱呼某人。這可以與自動語法協議一起使用，以在英語、西班牙語、葡萄牙語、法語、意大利語和德語中使用首選的代名詞和語法協議來引用人。(99745330) Foundation 現在支持使用 agreeWithConcept Markdown 屬性對一個分離的短語進行語法協議。(102595293) 模擬器上的健康應用程式 已知問題\n默認的模擬器地區設置為不帶國家代碼的 en-001。在模擬器上的健康應用程式中，缺少臨床健康記錄和與醫生共享的功能。(109408273) 解決方法：將模擬器地區設置為加拿大，然後切換回 en-US。 健康藥物 已知問題\n跟進通知可能無法按預期顯示，通知可能在鎖定屏幕上意外消失。(109246855) 之前存檔的藥物可能會意外出現在活躍的藥物時間表中，並觸發提醒。(110029786) 解決方法：將受影響的藥物從存檔中添加到活躍的藥物列表，然後重新存檔該藥物。 家庭 已知問題\n在新的家庭中，通過從附近的配件列表中選擇配件來配對第一個 Matter 配件會失敗。(109905770) 解決方法：通過掃描「添加配件」卡上的 QR 碼來配對第一個 Matter 配件。可以使用附近的配件列表配對其他 Matter 配件。 實時語音信箱 已知問題\n不能共享實時語音信箱。(105513708) 即使設備設置為靜音模式，語音信箱仍會播放。(110112187) 本地化 已知問題\n一些內容可能以英語顯示。有些字符串可能被截斷。(109393568) 鎖定模式 已知問題\n如果在啟用鎖定模式之前選擇了 2G 蜂窩服務（設置 \u0026gt; 蜂窩網絡），則鎖定模式可能無法在所有蜂窩網絡上禁用 2G。(109406777) 解決方法：如果不想在鎖定模式下啟用 2G 蜂窩服務，請選擇其他蜂窩選項，例如 3G、4G、LTE 或 5G，以確保在鎖定模式下禁用 2G。 郵件 已知問題\n郵件無法從使用 NAMESPACE 擴展的 IMAP 服務器中獲取新郵件。(109102644) 解決方法：遇到此問題的 Fastmail 用戶應將傳入郵件服務器設置更改為 imap.fastmail.com。 地圖 已知問題\n在 SwiftUI 中，如果將線性漸變筆劃與 MapPolyline 一起使用，可能會忽略指定的漸變顏色。(106152300) 在使用地圖時，Xcode 會發出運行時警告：\u0026quot;不允許在視圖更新中發布更改。\u0026quot;(106174743) 在某些縮放級別下，選定的 MKMarkerAnnotationView 的標題可能會重疊其他標記的標題。(109491779) 媒體 新功能\n在 macOS 和 iPadOS 上添加了對受管控媒體源的支持，並在 iOS 上作為預覽支持。(30320350) 網絡 新功能\n在運行 iOS 17 測試版的 iPhone 和 iPad 設備支持加入有線 802.1X 網絡。運行 tvOS 17 測試版的 Apple TV 設備也支持加入Safari 已知問題 Safari在隱私瀏覽模式下可能會使用本地模型提供搜索建議。搜索詞不會從設備發送到搜索提供商。（105606453） 在iPhone縱向模式下，如果之前沒有使用智能搜索字段進行搜索，當聚焦於智能搜索字段時，Safari可能會意外退出。（109685060） 解決方法：在橫向模式下至少進行一次使用智能搜索字段的搜索。 設置個人資料顏色可能不會反映在起始頁面背景上。（109742827） 創建新的Safari個人資料時，擴展可能會意外打開或關閉。（109796433） 解決方法：通過Safari設置管理該個人資料中打開和關閉的擴展。 獨立的Safari個人資料可能會在搜索界面中顯示其他個人資料的歷史記錄結果。（109798974） 屏幕使用時間 已知問題\n在更新到iOS 17測試版後，屏幕使用情況和應用限制、允許使用的應用以及勿擾模式設置將丟失。（109910575） 設置 已知問題\n在\u0026quot;設置\u0026quot;\u0026gt;\u0026quot;通用\u0026quot;\u0026gt;\u0026quot;關於本機\u0026quot;中，可用存儲可能與\u0026quot;設置\u0026quot;\u0026gt;\u0026quot;通用\u0026quot;\u0026gt;\u0026quot;[iPhone，iPad]存儲\u0026quot;中報告的存儲使用不一致。\u0026quot;設置\u0026quot;\u0026gt;\u0026quot;通用\u0026quot;\u0026gt;\u0026quot;[iPhone，iPad]存儲\u0026quot;中報告的存儲使用是準確的。（109051437） SKAdNetwork 已知問題\n開發者複製的後向傳遞可能無法發送或包含錯誤的轉化值或粗略轉化值。（109471751） Stage Manager 已知問題\n在使用Stage Manager時，打開切換器的手勢無法工作。（109580340） StandBy 已知問題\n如果刪除應用程序且其小部件位於StandBy小部件堆棧中，刪除的應用程序小部件不會被刪除。 解決方法：手動從StandBy小部件堆棧中刪除小部件。 StandBy中的小部件在Downtime模式或受屏幕使用時間限制時顯示內容。（105255640） StandBy模式下亮度滑塊無效。（106203217） 在紅色模式下，太陽時鐘不可讀。（108919386） StandBy小部件庫中的小部件可能顯示裁剪的內容。（108924188） 在編輯StandBy中的小部件時，無法看到來電提醒。 解決方法：退出編輯模式以查看來電。 StoreKit 新功能\n您可以使用新的showManageSubscriptions(in:) API和訂閱組ID一起顯示用戶擁有的訂閱以及該組中提供的其他計劃選項。（87853800） 用戶可以訪問新的Product.SubscriptionInfo.Status.all序列 好的，繼續使用繁體中文。\nStoreKit 已知問題\n在購買項目時，可能會出現內購提示框無法關閉的問題。（108132703） 解決方法：嘗試關閉應用並重新打開，或者重新啓動設備。 購買項目後，恢復購買可能無法正確還原購買。（105255551） 解決方法：嘗試關閉應用並重新打開，或者重新啓動設備。 購買項目後，應用可能無法正確更新用戶的訂閱狀態。（108132761） 解決方法：嘗試關閉應用並重新打開，或者重新啓動設備。 當用戶在購買過程中取消交易時，可能會導致訂閱狀態不正確。（108132769） 解決方法：嘗試關閉應用並重新打開，或者重新啓動設備。 系統 已知問題\n在某些情況下，設備可能會在進行某些特定操作時意外重啓。（107150618） 解決方法：嘗試關閉應用並重新打開，或者重新啓動設備。 在某些設備上，使用Face ID可能會導致設備重啓。（108195348） 解決方法：嘗試關閉應用並重新打開，或者重新啓動設備。 在某些情況下，設備可能會在後台運行應用程序時重新啓動。（108195472） 解決方法：嘗試關閉應用並重新打開，或者重新啓動設備。 這些是我能找到的與iOS 17測試版相關的已知問題。如果你覺得這篇文章有幫助到你歡迎在Instagram或Google新聞追蹤毛哥EM資訊密技。如果你有任何問題，歡迎直接到毛哥EM資訊密技的Instagram私訊我，我很樂意協助解決你的問題。\n","link":"https://emtech.cc/post/ios17-problem/","section":"post","tags":["ios"],"title":"所有iOS \u0026 iPadOS 17 Beta問題整理"},{"body":"哈囉大家好，我是毛哥EM，歡迎來到網棧。今天我要讓你5分鐘學會所有常用的HTML語法。\nHTML叫做超文本標記語言(Hyper Text Markup Language)。故名思義就是標記一下文字，要記得HTML主要功能不是為了裝飾，目的是讓瀏覽器知道這個是什麼。比如說Google想知道網站標題會去找裡面的\u0026lt;h1\u0026gt;；而給盲人用的語音閱讀器在看到\u0026lt;strong\u0026gt;會加重語氣。裝飾文字是CSS的工作，下禮拜就來講）\n不過讓我們先來實際寫寫看HTML再來慢慢探討這些大道理。首先請你再瀏覽器輸入pen.new。輸入之後你會看到三個輸入框方別讓你輸入HTML,CSS,和JavaScript，還有底下的預覽區域。這個網站叫做CodePen，是一個可以讓大家互相分享網頁作品的網站。平常做網站時可以來這裡尋找靈感，或是參考別人的作法。\n首先這是一段文字。如果你想要讓它成為粗體的話請你在兩邊加入 \u0026lt;b\u0026gt; 和 \u0026lt;/b\u0026gt;。就像word一樣，B代表了bold。那麼我們把隔壁幾個鄰居也搬過來吧\n\u0026lt;i\u0026gt;是斜體(Italic)、 \u0026lt;u\u0026gt; 是底線(Underline)、而 \u0026lt;s\u0026gt; 是劃掉(Strike)。不過這幾個都只是好看而已，對於瀏覽器來說沒什麼意義，因此我比較建議你使用 \u0026lt;strong\u0026gt; 來增加重要性，而語氣轉折或想區別強調文字時使用 \u0026lt;em\u0026gt; (emphasis)。\n今天假設你建立了一個 \u0026lt;h1\u0026gt; 元素，代表一級標題(header)，但是你還想增加一個屬性告訴瀏覽器說這是一個中文的標題，這時你可以這樣打: \u0026lt;h1 lang=\u0026quot;zh-TW\u0026quot;\u0026gt; 意思是說這是一段繁體中文的標題。前面這一串我們叫做開始標記，後面的 \u0026lt;/h1\u0026gt;叫做結束標記。lang叫做屬性，而zh-TW是屬性質。\nHTML就是這樣建立一個又一個地”元素” (element) 。因為寫HTML時你需要一直重複打大於小於符號很麻煩，你知道工程師都是很懶的，所以Сергей Чикуёнок發明了emmet。假如說你想建立一個\u0026lt;h1\u0026gt;元素你只需要打h1然後按tab就可以了。\n為了方便操作我們把輸入框放到左邊，然後選一個好看的配色，然後讓我們一次認識所有常見HTML吧!順帶一題我也會告訴你這些HTML語法原本的英文單字，可能會讓你比較好理解。\n文字 以下是常的文字元素。\n1\u0026lt;p\u0026gt;段落 2 \u0026lt;b\u0026gt;粗體\u0026lt;/b\u0026gt; 3 \u0026lt;i\u0026gt;斜體\u0026lt;/i\u0026gt; 4 \u0026lt;s\u0026gt;刪除線\u0026lt;/s\u0026gt; 5 \u0026lt;u\u0026gt;底線\u0026lt;/u\u0026gt; 6 H\u0026lt;sup\u0026gt;+\u0026lt;/sup\u0026gt; 7CO\u0026lt;sub\u0026gt;2\u0026lt;/sub\u0026gt; 8\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;元素代表段落區塊(paragraph)。\u0026lt;b\u0026gt;是粗體(bold)、\u0026lt;i\u0026gt;是斜體(italic)、\u0026lt;s\u0026gt;是劃掉(strike)、\u0026lt;u\u0026gt;是底線(underline)。\u0026lt;sup\u0026gt;是上標(superscript)、\u0026lt;sub\u0026gt;是下標(subscript)。你可以記super在上面，而訂閱按鈕Subscribe在影片下方等你去按。\n粗體斜體刪除線 底線 H+ CO2\n空白 換行 也許你有發現，在HTML中一個以上的tab、空格、換行都視為一個空格，因此你可以自由地排版保持程式的簡潔。但是如果你想要換行的話，你可以使用\u0026lt;br\u0026gt;元素換行，\u0026lt;hr\u0026gt;插入分隔線(Horizontal Rule)。而如果你想要插入一個空白的話，你可以使用\u0026amp;nbsp;。\n1橫線\u0026lt;hr /\u0026gt; 2換行\u0026lt;br /\u0026gt; 這兩個是插入一個元素而不是指定範圍，因此習慣後面會用/\u0026gt;結尾，但如果你要打\n或瀏覽器也看得懂。HTML是一種\u0026quot;好啦我看得懂就好\u0026quot;的語言，因此你就算用大寫，或著是屬性引號不加也沒關係，但是為了你和你的朋友之後維護起來不會那麼累我還是建議你遵守慣例。\n標題 接下來是標題。標題有六種大小，分別是\u0026lt;h1\u0026gt;、\u0026lt;h2\u0026gt;、\u0026lt;h3\u0026gt;、\u0026lt;h4\u0026gt;、\u0026lt;h5\u0026gt;、\u0026lt;h6\u0026gt;。\n1\u0026lt;h1\u0026gt;H1\u0026lt;/h1\u0026gt; 2\u0026lt;h2\u0026gt;H2\u0026lt;/h2\u0026gt; 3\u0026lt;h3\u0026gt;H3\u0026lt;/h3\u0026gt; 4\u0026lt;h4\u0026gt;H4\u0026lt;/h4\u0026gt; 5\u0026lt;h5\u0026gt;H5\u0026lt;/h5\u0026gt; 6\u0026lt;h6\u0026gt;H6\u0026lt;/h6\u0026gt; 建議從\u0026lt;h1\u0026gt;開始依序做使用，保持完整的架構。\n無序清單 無序清單是用\u0026lt;ul\u0026gt;元素建立的，而清單內的每一個項目都是\u0026lt;li\u0026gt;元素。\n1\u0026lt;ul\u0026gt; 2 \u0026lt;li\u0026gt;a\u0026lt;/li\u0026gt; 3 \u0026lt;li\u0026gt;b\u0026lt;/li\u0026gt; 4 \u0026lt;li\u0026gt;c\u0026lt;/li\u0026gt; 5\u0026lt;/ul\u0026gt; a b c 有序清單 有序清單是用\u0026lt;ol\u0026gt;元素建立的，而清單內的每一個項目都是\u0026lt;li\u0026gt;元素。\n1\u0026lt;ol\u0026gt; 2 \u0026lt;li\u0026gt;a\u0026lt;/li\u0026gt; 3 \u0026lt;li\u0026gt;b\u0026lt;/li\u0026gt; 4 \u0026lt;li\u0026gt;c\u0026lt;/li\u0026gt; 5\u0026lt;/ol\u0026gt; a b c 巢狀清單 而清單裡可以有清單，只要把清單放在\u0026lt;li\u0026gt;元素裡就可以了。\n1\u0026lt;ul\u0026gt; 2 \u0026lt;li\u0026gt;玉米濃湯\u0026lt;/li\u0026gt; 3 \u0026lt;li\u0026gt;鮪魚吐司\u0026lt;/li\u0026gt; 4 \u0026lt;li\u0026gt;薯條 5 \u0026lt;ul\u0026gt; 6 \u0026lt;li\u0026gt;鹽味\u0026lt;/li\u0026gt; 7 \u0026lt;li\u0026gt;胡椒鹽\u0026lt;/li\u0026gt; 8 \u0026lt;li\u0026gt;番茄醬\u0026lt;/li\u0026gt; 9 \u0026lt;/ul\u0026gt; 10 \u0026lt;/li\u0026gt; 11 \u0026lt;/ul\u0026gt; 玉米濃湯 鮪魚吐司 薯條 鹽味 胡椒鹽 番茄醬 超連結 假設你想要連結到某個網站，你可以使用\u0026lt;a\u0026gt; (anchor)元素，並在href(hypertext reference)屬性中指定連結的網址，而在\u0026lt;a\u0026gt;元素中間的文字就是連結的文字。\n1\u0026lt;a href=\u0026#34;連結\u0026#34;\u0026gt;顯示文字\u0026lt;/a\u0026gt; 比如說我們要連結到Google首頁，我們可以這樣寫:\n1\u0026lt;a href=\u0026#34;https://www.google.com\u0026#34;\u0026gt;Goolge\u0026lt;/a\u0026gt; Google\n連結也可以連結到同一個網頁的某個位置。我們可以幫元素建立id並只要在href屬性中指定位置的id就可以了，而在\u0026lt;a\u0026gt;元素中間的文字就是連結的文字。\n1\u0026lt;a href=\u0026#34;#image\u0026#34;\u0026gt;顯示文字\u0026lt;/a\u0026gt; 2\u0026lt;h3 id=\u0026#34;image\u0026#34;\u0026gt;圖片\u0026lt;/h3\u0026gt; 圖片 如果你想要插入圖片，你可以使用\u0026lt;img\u0026gt; (image)元素，並在src (source)屬性中指定圖片的來源，alt( alternative text)屬性中填入圖片的敘述。如果圖片無法顯示時就會使用這個替代文字，而Google也會透過這個文字了解圖片內容。\n1\u0026lt;img src=\u0026#34;來源\u0026#34; alt=\u0026#34;文字敘述\u0026#34;\u0026gt; 比如說這個是從Google首頁抓下來的圖片，我們可以這樣寫:\n1\u0026lt;img src=\u0026#34;https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\u0026#34; alt=\u0026#34;Google\u0026#34;\u0026gt; 而連結的文字也可以是圖片，只要把\u0026lt;img\u0026gt;元素放在\u0026lt;a\u0026gt;元素裡就可以了。\n1\u0026lt;a href=\u0026#34;https://www.google.com/\u0026#34;\u0026gt; 2 \u0026lt;img src=\u0026#34;https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\u0026#34; alt=\u0026#34;Google\u0026#34;\u0026gt; 3\u0026lt;/a\u0026gt; 表格 表格是用\u0026lt;table\u0026gt;元素建立的，而表格內的每一排都是\u0026lt;tr\u0026gt;(table row)元素，而每一個格子都是\u0026lt;td\u0026gt;(table data)元素，而表格的標題則是\u0026lt;th\u0026gt;(table header)元素。\n1\u0026lt;table\u0026gt; 2 \u0026lt;tr\u0026gt; 3 \u0026lt;th\u0026gt;國家\u0026lt;/th\u0026gt; 4 \u0026lt;th\u0026gt;首都\u0026lt;/th\u0026gt; 5 \u0026lt;th\u0026gt;人口\u0026lt;/th\u0026gt; 6 \u0026lt;th\u0026gt;語言\u0026lt;/th\u0026gt; 7 \u0026lt;/tr\u0026gt; 8 \u0026lt;tr\u0026gt; 9 \u0026lt;td\u0026gt;USA\u0026lt;/td\u0026gt; 10 \u0026lt;td\u0026gt;Washington D.C.\u0026lt;/td\u0026gt; 11 \u0026lt;td\u0026gt;309 million\u0026lt;/td\u0026gt; 12 \u0026lt;td\u0026gt;English\u0026lt;/td\u0026gt; 13 \u0026lt;/tr\u0026gt; 14 \u0026lt;tr\u0026gt; 15 \u0026lt;td\u0026gt;Sweden\u0026lt;/td\u0026gt; 16 \u0026lt;td\u0026gt;Stockholm\u0026lt;/td\u0026gt; 17 \u0026lt;td\u0026gt;9 million\u0026lt;/td\u0026gt; 18 \u0026lt;td\u0026gt;Swedish\u0026lt;/td\u0026gt; 19 \u0026lt;/tr\u0026gt; 20\u0026lt;/table\u0026gt; 國家 首都 人口 語言 USA Washington D.C. 309 million English Sweden Stockholm 9 million Swedish 你可以使用\u0026lt;thead\u0026gt; (table header), \u0026lt;tbody\u0026gt; (table body) 和 \u0026lt;tfoot\u0026gt; (table footer) 元素來區分表格的不同部分，這樣有助於瀏覽器和搜尋引擎了解表格的結構。\n1\u0026lt;table\u0026gt; 2 \u0026lt;thead\u0026gt; 3 \u0026lt;tr\u0026gt; 4 \u0026lt;th\u0026gt;項目\u0026lt;/th\u0026gt; 5 \u0026lt;th\u0026gt;金額\u0026lt;/th\u0026gt; 6 \u0026lt;/tr\u0026gt; 7 \u0026lt;/thead\u0026gt; 8 \u0026lt;tbody\u0026gt; 9 \u0026lt;tr\u0026gt; 10 \u0026lt;td\u0026gt;iPhone 11\u0026lt;/td\u0026gt; 11 \u0026lt;td\u0026gt;$24,900\u0026lt;/td\u0026gt; 12 \u0026lt;/tr\u0026gt; 13 \u0026lt;tr\u0026gt; 14 \u0026lt;td\u0026gt;AirPods\u0026lt;/td\u0026gt; 15 \u0026lt;td\u0026gt;$6,490\u0026lt;/td\u0026gt; 16 \u0026lt;/tr\u0026gt; 17 \u0026lt;tr\u0026gt; 18 \u0026lt;td\u0026gt;iPad Pro\u0026lt;/td\u0026gt; 19 \u0026lt;td\u0026gt;$25,900\u0026lt;/td\u0026gt; 20 \u0026lt;/tr\u0026gt; 21 \u0026lt;/tbody\u0026gt; 22 \u0026lt;tfoot\u0026gt; 23 \u0026lt;tr\u0026gt; 24 \u0026lt;th\u0026gt;總金額\u0026lt;/th\u0026gt; 25 \u0026lt;td\u0026gt;$57,290\u0026lt;/td\u0026gt; 26 \u0026lt;/tr\u0026gt; 27 \u0026lt;/tfoot\u0026gt; 28\u0026lt;/table\u0026gt; 項目 金額 iPhone 11 $24,900 AirPods $6,490 iPad Pro $25,900 總金額 $57,290 表格來自 Fooish 程式技術，因為我懶得打。\n合併儲存格: colspan 和 rowspan 屬性 (attributes) 合併表格可以利用 和 標籤上的 colspan 和 rowspan 屬性，colspan 是用來水平合併多行 (column) 的儲存格，rowspan 則用來垂直合併多列 (row) 的儲存格。\n1 2 3 4 5 6 7 輸入框 接下來是輸入框，輸入框是用\u0026lt;input\u0026gt;元素建立的，而\u0026lt;input\u0026gt;元素有很多種類，我們可以用type屬性來指定，比如說我們要建立一個文字輸入框，我們可以這樣寫:\n1\u0026lt;input type=\u0026#34;text\u0026#34;\u0026gt; 如果給他加入value屬性，就可以預設輸入框的內容了:\n1\u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;Hello World!\u0026#34;\u0026gt; 而如果我們要建立一個密碼輸入框，我們可以這樣寫:\n1\u0026lt;input type=\u0026#34;password\u0026#34;\u0026gt; 輸入的內容會被隱藏，而且會用星號或圓點代替。\n如果我們要建立一個勾選框，我們可以這樣寫:\n1\u0026lt;input type=\u0026#34;checkbox\u0026#34;\u0026gt; 如果我們要建立一個單選框，我們可以這樣寫:\n1\u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;color\u0026#34; value=\u0026#34;red\u0026#34;\u0026gt; red\u0026lt;br\u0026gt; 2\u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;color\u0026#34; value=\u0026#34;green\u0026#34;\u0026gt; green\u0026lt;br\u0026gt; 3\u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;color\u0026#34; value=\u0026#34;blue\u0026#34;\u0026gt; blue red\ngreen\nblue\n記住，radio是只能選一個的，就想你的收音機一樣，你一次只能聽一個頻道。我們在HTML裡面會使用name屬性來指定一組單選框，這樣瀏覽器才知道這些單選框是一組的。而value代表了選擇他的值，比如說我們選擇了red，那麼瀏覽器就會把red的值傳給伺服器。\nHTML還有很多種輸入框，比如說日期、時間、檔案、顏色等等，足夠我們花一個影片介紹。你可以參考我之前做的這個筆記來預習。\n互動元素 接下來我們要來介紹幾個有趣的互動元素\n按鈕 按鈕是用\u0026lt;button\u0026gt;元素建立的，我們可以在裡面放入文字或圖片，比如說:\n1\u0026lt;button\u0026gt;Click me!\u0026lt;/button\u0026gt; Click me!\niframe iframe是用來嵌入網頁的，比如說我們要嵌入YouTube影片，你可以到YouTube影片的分享裡面，點選嵌入，然後複製貼上到你的網頁裡面:\n1\u0026lt;iframe width=\u0026#34;560\u0026#34; height=\u0026#34;315\u0026#34; src=\u0026#34;https://www.youtube.com/embed/lOecpIqOjjY\u0026#34; title=\u0026#34;YouTube video player\u0026#34; frameborder=\u0026#34;0\u0026#34; allow=\u0026#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\u0026#34; allowfullscreen\u0026gt;\u0026lt;/iframe\u0026gt; Audio Audio是用來播放音樂的，我們可以用\u0026lt;audio\u0026gt;元素建立，然後用src屬性指定音樂的網址:\n1\u0026lt;audio src=\u0026#34;https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3\u0026#34; controls\u0026gt;\u0026lt;/audio\u0026gt; 如果加入controls屬性，就會顯示播放器，讓使用者可以控制音樂的播放。\nVideo Video是用來播放影片的，我們可以用\u0026lt;video\u0026gt;元素建立，然後用src屬性指定影片的網址:\n1\u0026lt;video src=\u0026#34;https://www.w3schools.com/html/mov_bbb.mp4\u0026#34; controls\u0026gt;\u0026lt;/video\u0026gt; 同樣的如果加入controls屬性就可以讓使用者控制影片的播放。\ndiv 最後我們要來介紹HTML5的版面。我們在建立網站時，通常會把網站分成幾個區塊，比如說標題、導覽列、內容、側邊欄、頁尾等等來方便我們做排版。因此你可以使用\u0026lt;div\u0026gt;元素來建立這些區塊，比如說你想建立一個提示框你可以這樣寫:\n1\u0026lt;div\u0026gt; 2 \u0026lt;h2\u0026gt;注意\u0026lt;/h2\u0026gt; 3 \u0026lt;p\u0026gt;感謝你的注意\u0026lt;/p\u0026gt; 4\u0026lt;/div\u0026gt; 注意 感謝你的注意\nHTML5 版面 但是div元素只是一個區塊，並沒有說明這個區塊是什麼，因此我們可以使用HTML5的版面來建立這些區塊。HTML5的版面是用\u0026lt;header\u0026gt;、\u0026lt;nav\u0026gt;、\u0026lt;main\u0026gt;、\u0026lt;section\u0026gt;、\u0026lt;article\u0026gt;、\u0026lt;aside\u0026gt;、\u0026lt;footer\u0026gt;元素建立的，我們可以用這些元素來建立版面。比如說我們要建立一個網站的版面，我們可以這樣寫:\n1\u0026lt;header\u0026gt; 2 \u0026lt;h1\u0026gt;網站標題\u0026lt;/h1\u0026gt; 3\u0026lt;/header\u0026gt; 4\u0026lt;nav\u0026gt; 5 \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;連結1\u0026lt;/a\u0026gt; 6 \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;連結2\u0026lt;/a\u0026gt; 7 \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;連結3\u0026lt;/a\u0026gt; 8\u0026lt;/nav\u0026gt; 9\u0026lt;main\u0026gt; 10 \u0026lt;section\u0026gt; 11 \u0026lt;article\u0026gt; 12 \u0026lt;h2\u0026gt;第一篇文章\u0026lt;/h2\u0026gt; 13 \u0026lt;p\u0026gt;文章內容\u0026lt;/p\u0026gt; 14 \u0026lt;/article\u0026gt; 15 \u0026lt;article\u0026gt; 16 \u0026lt;h2\u0026gt;第二篇文章\u0026lt;/h2\u0026gt; 17 \u0026lt;p\u0026gt;文章內容\u0026lt;/p\u0026gt; 18 \u0026lt;/section\u0026gt; 19 \u0026lt;aside\u0026gt; 20 \u0026lt;h2\u0026gt;側邊欄\u0026lt;/h2\u0026gt; 21 \u0026lt;p\u0026gt;側邊欄內容\u0026lt;/p\u0026gt; 22 \u0026lt;/aside\u0026gt; 23\u0026lt;/main\u0026gt; 24\u0026lt;footer\u0026gt; 25 \u0026lt;p\u0026gt;網站頁尾\u0026lt;/p\u0026gt; 26\u0026lt;/footer\u0026gt; 這些元素本身都和div一樣只是把元素群組起來，不會有任何視覺效果。但是可以幫入瀏覽器和搜尋引擎了解這些區塊的用途，也能讓別人更容易Google到你得內容。\n總結 好啦，今天我們介紹了許多不同的HTML元素。這些已經是最常用的元素了，如果你想知道更多的元素，可以到MDN查詢。下一週我們要來介紹CSS來裝飾我們的網頁。\n每週一早上六點，我們會在YouTube和各大Podcast平台不定時更新。如果你喜歡文字版，也歡迎在Instagram和Google新聞追蹤毛哥EM資訊密技。 我是毛哥EM，讓我們下週再見！\n","link":"https://emtech.cc/post/webpallet-2/","section":"post","tags":["HTML","CSS","JavaScript"],"title":"EP.2 5分鐘完結HTML"},{"body":"哈囉大家好，我是毛哥EM，歡迎來到網棧。今天我們要來聊聊什麼是網站\n相信大家看過Word檔對吧，Word檔是要用Microsoft Word打開的文件，副檔名是.docx\n而網頁是一個要透過「瀏覽器」開啟的文件，副檔名通常是.html\n讓我們來做一個實驗。請你建立一個文字檔案並輸入一些內容，接著把這個檔案的附檔名改成html（比如說a.html）。雙擊打開之後你看，一個網頁就做好了。沒錯就是這麼簡單。但是如果只有純文字的話實在是太無聊了，因此一個網頁通常會使用多個檔案及不同的程式語言組成。\n和Word不一樣的地方是word會把所有的圖片、文字格式設定等資料全部包在一個資料夾並且包裝成一個.docx檔，而網站會把這些檔案們分開存放好讓你可以輕鬆編輯每個項目。\n網站架構 一個網頁通常是由HTML、CSS和JavaScript所組成，它們分別有著不同的工作。假設網頁是一個人的話，HTML就是他的骨架，CSS就是他的皮膚和衣服，而JavaScript就是他的大腦。以毛哥EM資訊密技為例，如果把網頁的JavaScript拿掉，就不能使用複製按鈕了，如果把CSS拿掉，整個網頁就會變得很單調且難以閱讀，而如果把HTML拿掉，網頁就會變成一個空白的白紙。而網站中所有的檔案都會放在一個資料夾中，你可以到Github上面查看毛哥EM資訊密技的根目錄，裡面有著許多的檔案，而index.html就是這個網站的首頁。\n然而這個資料夾如果只是在你自己的電腦裡別人是無法取得的，因此你需要一個人一直站在一個地方，當有人來想要拿檔案的時候就遞給他，而這個人就叫做「伺服器」。伺服器通常是一台主機（也就是你的電腦），他的工作就是當使用者提出請求 (Request)的時候給予回應 (Response)。記住在網路上無論如何伺服器都會回應你，除了回應檔案以外也會回應一個代碼。比如說200代表成功 (OK)，常見的404代表找不到 (Not Found)，403代表不允許 (Forbidden)。除此之外還有很多很多代碼，基本上大部分你都不希望會看到。你可以在\u0026lt;http.cat\u0026gt;或\u0026lt;http.dog\u0026gt;看看這些代碼代表的意義。\n網站是如何傳遞資料的？ 接下來我們來看一下網站是如何傳遞資料的。我喜歡把網路比喻成在寄包裹。今天你想把你的請求傳給伺服器之前，你有幾個東西需要做選擇。\n交通工具 首先是你要使用什麼交通工具，不同的交通工具有不同的特性。當我們輸入網址載入網站時使用的交通工具叫做「GET」，我喜歡叫他腳踏車。腳踏車的特點是他很簡單，也可以傳遞資料，但是資料會放在網址中。以Google為例，網址google.com/search?q=毛哥EM就把q=毛哥EM，也就是搜尋毛哥EM的意思傳給Google的伺服器，而Google也把對應的檔案給回傳回來。而且沒錯，回傳的HTML不一定是本來就存在的，也有可能是剛才才建立出來的。網址技術上可以無限量的傳遞資料，就像腳踏車原則上可以無限往上堆東西，但是我們通常在傳一比較大的資料的時候不會這麼做反之我們會選擇使用post這個交通工具，而我喜歡叫他貨車。貨車最棒的地方式是他可以把東西存放在Body，也就是後面的貨櫃。這樣經過的人除非把你的箱子撬開，不然不會知道裡面裝了些什麼。\n交通規則 而接下來我們要來選擇的是我們要走哪一條道路。不同的道路有不同的交通規則，而常見的交通規則有HTTP、HTTPS、SSH。我們目前最常見的是HTTPS，他是加密過的HTTP協定，可以確保傳輸過程中你的貨櫃不會被撬開。\n送到哪裡? IP、網域、與DNS 經過這一番努力我們已經準備好要出發了，但是我們要送到哪裡呢？網路上的地址叫做IP位址。目前有IPV4還有因為地址不夠用了而被發明有英數混合的IPV6。但是這一大串數字實在太難記了，因此你可以購買一個網域。這個網域就像是臺北市信義區西村里8鄰信義路五段7號太難記了，但台北101就好記很多。因此會一個類似電話簿的東西叫做DNS，他會紀錄所有不同網域對應的IP位址。而當我們輸入網址想要去找伺服器之前我們的瀏覽器都會先去DNS找看看這個網站實際的地址。\nDNS是大家都可以建立的。比如說中華電信或是Google都有他們的DNS伺服器可以讓你做使用。\n網址的最後通常會有一個.com或.net等等的後綴，這個後綴絕大部分沒有特別規定，但有一些大家的習慣，比如說.com是商業網站，.net是網路服務網站，.org是非營利組織網站等等。\n伺服器 就像前面說的，當伺服器收到你的請求時，他會根據你的請求去進行處理，並且把處理結果回傳給你，包括狀態碼和各種資料。由此你可以發現要製作一個網頁不只需要有人設計好看的網頁，還需要有人設計伺服器的邏輯，並且把資料存放在伺服器上。前面編寫我們可以直接看到結果的工程師我們叫做前端工程師，而編寫後面我們看不到的伺服器的工程師我們叫做後端工程師。\n我們會先從前端開始學習，因為它比較容易上手，而且可以馬上看到結果。但是你不用擔心，因為現在已經有很多平台幫你架設好後端，你只需要把你的HTML,CSS,JavaScript以及其他檔案上傳到這些平台上，你的網頁就可以部屬了。\n我們下禮拜就會開始實作HTML。每週一早上六點，我會在YouTube和各大Podcast平台同步更新。如果你喜歡文字版歡迎到毛哥EM資訊密技閱讀，也歡迎在Instagram和Google新聞追蹤毛哥EM資訊密技。\n我是毛哥EM，讓我們下週再見！\n","link":"https://emtech.cc/post/webpallet-1/","section":"post","tags":["HTML","CSS","JavaScript"],"title":"EP.1 什麼是網站?"},{"body":"EP.0 歡迎來到網棧 哈囉大家好，我是毛哥EM，歡迎來到網棧。這是毛哥EM資訊密技的全新系列，我們將討論各種網頁設計的技術與技巧。\n在前面的五集中，我會講解什麼是網頁，並快速帶大家認識HTML、CSS、JavaScript，還有如何架設網站。接下來我深入討論每一個細節，以及如何做出各種效果與功能。\n每週一早上六點，我會在YouTube和各大Podcast平台不定時更新。如果你喜歡文字版歡迎到毛哥EM資訊密技閱讀，也歡迎在Instagram和Google新聞追蹤毛哥EM資訊密技。\n我是毛哥EM，讓我們下週再見！\n","link":"https://emtech.cc/post/webpallet-0/","section":"post","tags":["自製","HTML","CSS","JavaScript","Github","GAS"],"title":"EP.0 歡迎來到網棧"},{"body":"本文將教授如何使用程式製作一個簡單的點名網頁。透過這個點名系統，你可以方便地管理你的學生出席狀況，並且隨時查詢歷史出席紀錄。我們將使用 Google Apps Script, GitHub 和 Google Sheets 來建立這個點名系統。我敢保證即使你完全不會程式也可以在5分鐘內完成。本文會詳細說明從建立 Google Sheets 到部屬網頁的步驟，並提供完整的程式碼和演示網頁。\n我在兩年前曾經寫過一篇【GAS】自製點名系統，出乎意料地幫助到許多人，所以我決定重新寫一次，比上次更容易製作和操作，也更好看一些(我覺得啦)。\n範例網頁 首先，我們先來看一下最終的成果。這是我們要製作的點名系統的演示網頁。你可以點擊這裡查看完整的演示網頁。他有以下幾個功能\n點名:點擊學生姓名，即可完成點名 新增學生:輸入學生姓名點擊新增按鈕，即可新增學生 查詢歷史出席紀錄:輸入學生姓名點擊查詢按鈕，即可查詢歷史出席紀錄 好了，我們現在就開始製作這個點名系統吧w\n步驟一：建立 Google Sheets 文件 首先，我們需要建立一個 Google Sheets 文件，用於存儲學生的出席情況。在這個文件中，我們可以添加學生名稱、出席時間、剩餘課堂等信息。\n請打開我建立的這個範例文件並建立副本\n這樣Google Sheet就做好了。請複製這個文件的ID，我們稍後會用到。ID就是網址中的一長串字母和數字，比如說這個試算表:\n1https://docs.google.com/spreadsheets/d/1m0F6pOejN-ldKFIrFwssmoEPB3EPDmSQJKEPr9T88-E/edit#gid=0 它的ID就是1m0F6pOejN-ldKFIrFwssmoEPB3EPDmSQJKEPr9T88-E。\n步驟二：建立 Google Apps Script 現在，我們需要建立一個 Google Apps Script，用於向 Google Sheets 文件中添加和讀取數據。請在網址輸入script.new，進入 Google Apps Script 編輯器。接著貼上我的這一串程式。請把第一行的雙引號裡面換成剛才複製的ID。\n1const id = \u0026#34;1m0F6pOejN-ldKFIrFwssmoEPB3EPDmSQJKEPr9T88-E\u0026#34; 2 3function doGet(e){let t=e.parameter,a=SpreadsheetApp.openById(id).getSheets();switch(t.type){case\u0026#34;call\u0026#34;:if(!t.time)return ContentService.createTextOutput(!1);return a[0].appendRow([t.name,t.time,t.remain]),ContentService.createTextOutput(!0);case\u0026#34;list\u0026#34;:var r=a[1].getRange(2,1,a[1].getLastRow()-1,a[1].getLastColumn()).getValues().filter(e=\u0026gt;\u0026#34;\u0026#34;!==e[0]).map(e=\u0026gt;({name:e[0],left:e[2]}));return ContentService.createTextOutput(JSON.stringify(r)).setMimeType(ContentService.MimeType.JSON);case\u0026#34;search\u0026#34;:var[n,...r]=a[0].getDataRange().getValues();let[u,i,p]=n,s=n.indexOf(u),m=n.indexOf(i),c=n.indexOf(p),l=r.filter(e=\u0026gt;e[s]===t.name).map(e=\u0026gt;({time:e[m],left:e[c]}));return ContentService.createTextOutput(JSON.stringify(l)).setMimeType(ContentService.MimeType.JSON);case\u0026#34;new\u0026#34;:let f=a[1].getLastRow()+1;return a[1].appendRow([t.name,`=COUNTIF(\u0026#39;紀錄\u0026#39;!A:A,A${f})`,`=D${f}-B${f}`]),ContentService.createTextOutput(!0);default:return ContentService.createTextOutput(\u0026#34;別亂撞我～\u0026#34;)}} 我們需要把它部屬成網頁，請點擊左上角的部屬，新增部屬作業，選擇部屬為網頁應用程式。執行身分選自己(我)，誰可以存取選所有人。接著點擊部屬，複製網頁應用程式網址。比如說:\n1https://script.google.com/macros/s/AKfycbzxqGIMBbLkCka2aveltdVHYtdG-k_X98qzSd_V9MHDxWaOYXFwZgE3rRHDzCakzTxs/exec 步驟三：建立網頁 請你在任意一個網頁代管服務，比如說Vercel,Github Pages, Gitlab Pages, Netlify等等，建立一個網頁。接著在網頁中貼上以下程式碼。\n如果你沒有使用過這些服務，可以參考以下教學:\n使用 Github Pages部屬網頁 請先註冊帳號，你可以參考以下影片:\n在 Instagram 查看這則貼文 毛哥EM資訊密技（@em.tec.blog）分享的貼文\n部屬網頁有兩個辦法。選一個就可以了\n用戶名.github.io 第一個是影片說明的方法，就是建立一個叫做用戶名.github.io的倉庫，然後建立一個index.html的檔案並貼上以下程式。\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html lang=\u0026#34;zh-TW\u0026#34;\u0026gt; 3 4\u0026lt;head\u0026gt; 5 \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; 6 \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; 7 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; 8 \u0026lt;title\u0026gt;簡易點名系統\u0026lt;/title\u0026gt; 9 \u0026lt;meta name=\u0026#34;theme-color\u0026#34; content=\u0026#34;3B4252\u0026#34; /\u0026gt; 10 \u0026lt;style\u0026gt; 11 h1 { 12 /* 標題顏色 */ 13 color: var(--nord7) 14 } 15 16 body { 17 /* 背景顏色 */ 18 background-color: var(--nord0) 19 } 20 21 body { 22 /* 可選顏色 */ 23 --nord0: #2E3440; 24 --nord1: #3B4252; 25 --nord2: #434C5E; 26 --nord3: #4C566A; 27 --nord4: #D8DEE9; 28 --nord5: #E5E9F0; 29 --nord6: #ECEFF4; 30 --nord7: #8FBCBB; 31 --nord8: #88C0D0; 32 --nord9: #81A1C1; 33 --nord10: #5E81AC; 34 --nord11: #BF616A; 35 --nord12: #D08770; 36 --nord13: #EBCB8B; 37 --nord14: #A3BE8C; 38 --nord15: #B48EAD; 39 --black: #000; 40 --line: #4C566A 41 } 42 43 main, 44 nav { 45 display: flex 46 } 47 48 .call button, 49 button:hover { 50 background-color: var(--nord2) 51 } 52 53 button, 54 section\u0026gt;div { 55 background-color: var(--nord1); 56 box-shadow: rgba(0, 0, 0, .2) 0 0 .5rem 57 } 58 59 main, 60 section\u0026gt;div { 61 padding: 1rem; 62 width: 100% 63 } 64 65 footer, 66 footer a { 67 color: var(--nord4) 68 } 69 70 .search button, 71 button, 72 input, 73 section\u0026gt;div { 74 box-shadow: rgba(0, 0, 0, .2) 0 0 .5rem 75 } 76 77 body, 78 button, 79 h2, 80 html { 81 text-align: center 82 } 83 84 * { 85 padding: 0; 86 margin: 0; 87 box-sizing: border-box; 88 font-family: Arial, \u0026#34;微軟正黑體\u0026#34;, Helvetica, sans-serif; 89 color: var(--nord6) 90 } 91 92 body, 93 html { 94 min-height: 100% 95 } 96 97 main { 98 flex-direction: column; 99 height: 100vh; 100 height: 100dvh; 101 max-width: 500px; 102 margin: 0 auto 103 } 104 105 nav { 106 justify-content: space-between 107 } 108 109 button { 110 display: block; 111 height: 50px; 112 width: calc(1/3*100% - 1rem); 113 line-height: 50px; 114 border-radius: 1rem; 115 text-decoration: none; 116 border: none; 117 cursor: pointer; 118 transition: background-color .2s ease-in-out 119 } 120 121 #call, 122 .search, 123 footer { 124 display: flex 125 } 126 127 .call button { 128 width: calc(1/4*100% - 1rem); 129 margin: .5rem 130 } 131 132 button:hover { 133 filter: brightness(1.2) 134 } 135 136 button:active { 137 background-color: var(--nord3); 138 filter: brightness(1.5) 139 } 140 141 section { 142 flex-grow: 1; 143 margin: 1rem 0; 144 position: relative 145 } 146 147 footer { 148 justify-content: flex-end; 149 align-items: flex-end 150 } 151 152 section\u0026gt;div { 153 border-radius: 1rem; 154 overflow-x: hidden; 155 overflow-y: auto; 156 position: absolute; 157 height: 100%; 158 transition: opacity .5s ease-in-out 159 } 160 161 #add, 162 #history { 163 opacity: 0 164 } 165 166 #call { 167 z-index: 2; 168 flex-wrap: wrap; 169 justify-content: space-between 170 } 171 172 .search { 173 justify-content: center; 174 align-items: center 175 } 176 177 .search button, 178 input { 179 height: 2rem; 180 width: 50%; 181 border-radius: .5rem; 182 border: transparent; 183 padding: 0 1rem; 184 background-color: var(--nord3); 185 color: var(--nord4) 186 } 187 188 h2, 189 table { 190 width: 100% 191 } 192 193 input:focus { 194 outline: transparent 195 } 196 197 .search button { 198 margin-left: 1rem; 199 width: auto; 200 line-height: 100% 201 } 202 203 table { 204 border-collapse: collapse; 205 margin-top: 1rem 206 } 207 208 tr { 209 border-bottom: 1px solid var(--line) 210 } 211 212 td { 213 padding: .5rem 214 } 215 216 h2 { 217 margin-top: 2rem; 218 font-weight: 600 219 } 220 221 #status { 222 margin: .5rem 0 1rem; 223 color: var(--nord13); 224 font-size: 1.3rem 225 } 226 \u0026lt;/style\u0026gt; 227\u0026lt;/head\u0026gt; 228 229\u0026lt;body\u0026gt; 230 \u0026lt;main\u0026gt; 231 \u0026lt;h1\u0026gt;簡易點名系統\u0026lt;/h1\u0026gt; 232 \u0026lt;h2 id=\u0026#34;status\u0026#34;\u0026gt;歡迎使用\u0026lt;/h2\u0026gt; 233 \u0026lt;nav\u0026gt; 234 \u0026lt;button onclick=\u0026#34;searchA()\u0026#34;\u0026gt;查詢紀錄\u0026lt;/button\u0026gt;\u0026lt;button onclick=\u0026#34;callA()\u0026#34;\u0026gt;點名\u0026lt;/button\u0026gt;\u0026lt;button 235 onclick=\u0026#34;addA()\u0026#34;\u0026gt;新增學生\u0026lt;/button\u0026gt; 236 \u0026lt;/nav\u0026gt; 237 \u0026lt;section\u0026gt; 238 \u0026lt;div id=\u0026#34;history\u0026#34;\u0026gt; 239 \u0026lt;div class=\u0026#34;search\u0026#34;\u0026gt; 240 \u0026lt;input type=\u0026#34;text\u0026#34;\u0026gt;\u0026lt;button\u0026gt;搜尋\u0026lt;/button\u0026gt; 241 \u0026lt;/div\u0026gt; 242 \u0026lt;table\u0026gt; 243 \u0026lt;thead\u0026gt; 244 \u0026lt;tr\u0026gt; 245 \u0026lt;td\u0026gt;時間\u0026lt;/td\u0026gt; 246 \u0026lt;td\u0026gt;剩下課堂\u0026lt;/td\u0026gt; 247 \u0026lt;/tr\u0026gt; 248 \u0026lt;/thead\u0026gt; 249 \u0026lt;tbody\u0026gt; 250 \u0026lt;/tbody\u0026gt; 251 \u0026lt;/table\u0026gt; 252 \u0026lt;/div\u0026gt; 253 \u0026lt;div id=\u0026#34;call\u0026#34;\u0026gt; 254 \u0026lt;h2\u0026gt;載入中\u0026lt;/h2\u0026gt; 255 \u0026lt;/div\u0026gt; 256 \u0026lt;div id=\u0026#34;add\u0026#34;\u0026gt; 257 \u0026lt;div class=\u0026#34;search\u0026#34;\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34;\u0026gt;\u0026lt;button\u0026gt;新增\u0026lt;/button\u0026gt;\u0026lt;/div\u0026gt; 258 \u0026lt;/div\u0026gt; 259 \u0026lt;/section\u0026gt; 260 \u0026lt;footer\u0026gt;\u0026lt;a href=\u0026#34;edit-mr.github.io/\u0026#34;\u0026gt;毛哥EM\u0026lt;/a\u0026gt;製作 | \u0026lt;a href=\u0026#34;https://emtech.cc/post/roll-call\u0026#34;\u0026gt;教學\u0026lt;/a\u0026gt; 261 \u0026lt;/footer\u0026gt; 262 \u0026lt;/main\u0026gt; 263 \u0026lt;script\u0026gt; 264 //部屬連結放這裡 265 var url = \u0026#34;https://script.google.com/macros/s/AKfycbzxqGIMBbLkCka2aveltdVHYtdG-k_X98qzSd_V9MHDxWaOYXFwZgE3rRHDzCakzTxs/exec\u0026#34;; 266 const [history, call, add] = [\u0026#34;history\u0026#34;, \u0026#34;call\u0026#34;, \u0026#34;add\u0026#34;].map(t =\u0026gt; document.getElementById(t)), searchA = () =\u0026gt; { history.style.opacity = 1, history.style.zIndex = 2, call.style.opacity = add.style.opacity = 0, call.style.zIndex = add.style.zIndex = 1 }, callA = () =\u0026gt; { history.style.opacity = add.style.opacity = 0, history.style.zIndex = add.style.zIndex = 1, call.style.opacity = 1, call.style.zIndex = 2 }, addA = () =\u0026gt; { history.style.opacity = call.style.opacity = 0, history.style.zIndex = call.style.zIndex = 1, add.style.opacity = 1, add.style.zIndex = 2 }; fetch(url + \u0026#34;?type=list\u0026#34;).then(t =\u0026gt; t.json()).then(t =\u0026gt; { let e = document.getElementById(\u0026#34;call\u0026#34;); e.innerHTML = \u0026#34;\u0026#34;, t.forEach((t, n) =\u0026gt; { let a = document.createElement(\u0026#34;button\u0026#34;); a.textContent = t.name, a.id = `student-${n + 1}`, a.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { rollCall(t.name, t.left, n + 1) }), e.appendChild(a) }) }).catch(t =\u0026gt; console.error(t)); const status = document.getElementById(\u0026#34;status\u0026#34;); function rollCall(t, e, n) { status.innerHTML = `${t} 點名中...`; var a = new Date, a = a.toLocaleString(\u0026#34;zh-TW\u0026#34;, { year: \u0026#34;numeric\u0026#34;, month: \u0026#34;2-digit\u0026#34;, day: \u0026#34;2-digit\u0026#34;, hour: \u0026#34;numeric\u0026#34;, minute: \u0026#34;numeric\u0026#34;, second: \u0026#34;numeric\u0026#34;, hour12: !0 }).replace(\u0026#34;-\u0026#34;, \u0026#34;/\u0026#34;).replace(\u0026#34; \u0026#34;, \u0026#34; \u0026#34;); fetch(url + `?type=call\u0026amp;name=${t}\u0026amp;time=${a}\u0026amp;remain=${e}`).then(a =\u0026gt; { a.ok ? (status.innerHTML = `${t} 已點名成功！剩餘課堂：${e - 1}`, document.getElementById(\u0026#34;student-\u0026#34; + n).style.backgroundColor = \u0026#34;var(--nord14)\u0026#34;) : (status.innerHTML = `${t} 已點名失敗！剩餘課堂：${e}`, document.getElementById(\u0026#34;student-\u0026#34; + n).style.backgroundColor = \u0026#34;var(--nord11)\u0026#34;) }).catch(t =\u0026gt; { status.innerHTML = `發生錯誤：${t}` }) } const searchBtn = document.querySelector(\u0026#34;#history button\u0026#34;), searchInput = document.querySelector(\u0026#34;#history input\u0026#34;), historyTableBody = document.querySelector(\u0026#34;#history tbody\u0026#34;); searchBtn.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { status.innerHTML = \u0026#34;搜尋中...\u0026#34;; let t = searchInput.value, e = `${e}?type=search\u0026amp;name=${encodeURIComponent(t)}`; fetch(e).then(t =\u0026gt; t.json()).then(t =\u0026gt; { let e = document.querySelector(\u0026#34;#history table tbody\u0026#34;); e.innerHTML = \u0026#34;\u0026#34;, t.forEach(t =\u0026gt; { let n = document.createElement(\u0026#34;tr\u0026#34;), a = document.createElement(\u0026#34;td\u0026#34;), l = document.createElement(\u0026#34;td\u0026#34;); var r = new Date(t.time); a.textContent = r.toLocaleString(\u0026#34;zh-TW\u0026#34;, { year: \u0026#34;numeric\u0026#34;, month: \u0026#34;2-digit\u0026#34;, day: \u0026#34;2-digit\u0026#34;, hour: \u0026#34;numeric\u0026#34;, minute: \u0026#34;numeric\u0026#34;, second: \u0026#34;numeric\u0026#34;, hour12: !0 }).replace(\u0026#34;-\u0026#34;, \u0026#34;/\u0026#34;).replace(\u0026#34; \u0026#34;, \u0026#34; \u0026#34;), l.textContent = t.left, n.appendChild(a), n.appendChild(l), e.appendChild(n), status.innerHTML = \u0026#34;搜尋完成\u0026#34; }) }).catch(t =\u0026gt; status.innerHTML = t) }); const addBtn = document.querySelector(\u0026#34;#add button\u0026#34;), addInput = document.querySelector(\u0026#34;#add input\u0026#34;); addBtn.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { let t = addInput.value; t \u0026amp;\u0026amp; (status.innerHTML = \u0026#34;新增中...\u0026#34;, fetch(`${url}?type=new\u0026amp;name=${encodeURIComponent(t)}`).then(t =\u0026gt; status.innerHTML = \u0026#34;新增成功\u0026#34;).catch(t =\u0026gt; { status.innerHTML = t })) }); 267 \u0026lt;/script\u0026gt; 268 269\u0026lt;/body\u0026gt; 270 271\u0026lt;/html\u0026gt; 請把第265行的雙引號裡面換成剛才複製的網頁應用程式網址，然後按下儲存。這樣你的網頁就完成了！你可以到網址https://你的Github帳號.github.io/來使用你的網頁。\nUse this template 第二個方式也很簡單，請先到這個Github倉庫並點擊右上角的Fork，或是Use this template。倉庫名稱Repository name會成為你的網址(例如：https://你的Github帳號.github.io/倉庫名稱)，然後點擊Create repository from template。\n請點擊檔案index.html並點擊右上角的鉛筆按鈕編輯， 把第265行的雙引號裡面換成剛才複製的網頁應用程式網址，然後按下儲存。\n然後再到你的倉庫裡面，點擊Settings，然後點擊左邊的Pages，把Branch改成main，然後按下Save，就完成了！\n好啦，現在你的網頁就完成了！你可以到網址https://你的Github帳號.github.io/倉庫名稱來使用你的網頁。\n自訂 這樣你的網頁就建立完成且可以使用了。如果你想客製化顏色的話可以修改CSS。比如說如果你想改標題你可以修改第13行\n1color: var(--nord7) 你可以改成任何顏色，例如：color: red，或是color: #ff0000，或是color: rgb(255, 0, 0)。\n你可以Google colorpicker 選取顏色，然後把HEX或是RGB的數字貼上去。\n或是你可以使用預設的Nord顏色組。使用方式就是預設那樣，只要修改數字就好了。對應的顏色如下:\n--nord0: #2E3440;\n--nord1: #3B4252;\n--nord2: #434C5E;\n--nord3: #4C566A;\n--nord4: #D8DEE9;\n--nord5: #E5E9F0;\n--nord6: #ECEFF4;\n--nord7: #8FBCBB;\n--nord8: #88C0D0;\n--nord9: #81A1C1;\n--nord10: #5E81AC;\n--nord11: #BF616A;\n--nord12: #D08770;\n--nord13: #EBCB8B;\n--nord14: #A3BE8C;\n--nord15: #B48EAD;\n希望你喜歡這個網頁！如果你覺得這篇文章有幫助到你歡迎在Instagram或Google新聞追蹤毛哥EM資訊密技。如果你有任何問題，歡迎直接到毛哥EM資訊密技的Instagram私訊我，我很樂意協助解決你的問題。\n","link":"https://emtech.cc/post/rol-call/","section":"post","tags":["自製","HTML","CSS","JavaScript","Github","GAS"],"title":"自製免費點名系統 - 複製貼上就能成為工程師"},{"body":"","link":"https://emtech.cc/series/%E8%A4%87%E8%A3%BD%E8%B2%BC%E4%B8%8A%E5%B0%B1%E8%83%BD%E6%88%90%E7%82%BA%E5%B7%A5%E7%A8%8B%E5%B8%AB/","section":"series","tags":null,"title":"複製貼上就能成為工程師"},{"body":"平常討論事情有時會需要臨時做筆記或馬上呈現內容給大家，但常又不是使用自己的電腦，且網路及環境很差。因此，我製作了這一個好看輕量的線上markdown編輯器。不只直覺好用，且會額外將成果顯示在獨立視窗，可直接全屏投影到第二螢幕上，呈現更好的效果避免被偷看其他分頁。最方便是開會還有上課要對答案可以快速清楚地打讓出來呈現。\nCrossDown 網站: https://edit-mr.github.io/CrossDown/ Github: https://github.com/Edit-Mr/CrossDown 好不容易忙完午休沒事，就花了下午下課時間搞出來了它。分享給大家，希望大家喜歡。\nCrossDown是一個簡潔而實用的Markdown編輯器，它可以在窗口中快速編輯和預覽Markdown文本。CrossDown的主要優點是它的輕量化和易用性。它具有極簡的設計，能夠在編輯和預覽之間無縫切換，同時提供了一些有用的功能，如Markdown格式化和Ctrl+鍵快捷鍵等。CrossDown使用了一些新技術，例如窗口之間的通訊，以實現其獨特的跨窗口顯示功能。\nCrossDown的介面非常簡單，由一個編輯區域和一個預覽區域組成。您可以在編輯區域中編寫Markdown文本，同時在預覽區域中查看您的編輯結果。它還具有一個可以打開新窗口的按鈕，以便您可以將預覽區域放在一個獨立的窗口中，使您可以在多個屏幕上同時查看您的Markdown文本。如果你沒有打開獨立窗口，編輯時按鈕會抖動提醒你。\nCrossDown的另一個重要功能是它的Markdown格式化和快捷鍵。您可以使用Ctrl+B、Ctrl+I、Ctrl+U和Ctrl+Shift+S等快捷鍵對選定的文本進行格式化，也可以使用Ctrl+K快捷鍵添加超鏈接。這使得編寫Markdown文本更加容易且高效。\n它還支持淺色和暗色主題，可以根據系統首選的顏色方案進行自動切換，或是於右上角手動作切換。\n總體而言，CrossDown是一個簡單而強大的Markdown編輯器，非常適合臨時需要編寫和預覽Markdown文本。它的輕量化和易用性使其成為一個不錯的選擇，尤其是當您需要投影Markdown文本時。\n","link":"https://emtech.cc/post/crossdown/","section":"post","tags":["自製"],"title":"【自製】CrossDown - 一個輕量化跨窗口顯示的Markdown編輯器"},{"body":"","link":"https://emtech.cc/tags/youtube/","section":"tags","tags":null,"title":"YouTube"},{"body":"大家都知道，錫蘭的 YouTube 訂閱數因為某些原因顯示不太準確。但現在，我有了一個好消息：我開發了一個程式，可以輕鬆自動修正它！想知道怎麼做嗎？繼續往下看！\n首先，請先安裝油猴（Tampermonkey）這個擴充功能。您可以在 Chrome、Edge 或 Firefox 的擴充功能商店下載它。接著，到 Greasy Fork 網站安裝我開發的程式即可。有時 YouTube 會顯示錯誤，這時您只需要重新整理頁面就好了。\n如果您擔心我會不會盜取您的個人資料，那麼別擔心！在您安裝程式時，您可以查看程式碼，以確保您的資料是安全的。不過程式碼非常簡潔，有些難以閱讀，所以這裡提供比較好閱讀的版本。\n1(function () { 2 function modifySubscriberCount() { 3 var subscriberCountElem = document.getElementById(\u0026#34;subscriber-count\u0026#34;); 4 var channel = document.getElementById(\u0026#34;channel-handle\u0026#34;); 5 var channelName = document.getElementById(\u0026#34;text\u0026#34;); 6 var subCount = document.getElementById(\u0026#34;owner-sub-count\u0026#34;); 7 if (subscriberCountElem \u0026amp;\u0026amp; channel) { 8 observer.disconnect(); 9 if (channel.innerText == \u0026#39;@xilanceylan\u0026#39;) { 10 var subscriberCountText = subscriberCountElem.innerText; 11 if (subscriberCountText.indexOf(\u0026#34;K\u0026#34;) \u0026gt; -1) var replacedText = parseInt(subscriberCountText.replace(\u0026#34;K\u0026#34;, \u0026#34;\u0026#34;)) / 10 + \u0026#34;T\u0026#34;; else 12 var replacedText = subscriberCountText.replace(\u0026#34;萬\u0026#34;, \u0026#34;兆\u0026#34;).replace(\u0026#34;万\u0026#34;, \u0026#34;兆\u0026#34;); 13 subscriberCountElem.innerText = replacedText; 14 15 } 16 } else if (subCount \u0026amp;\u0026amp; channelName) { 17 observer.disconnect(); 18 if (channelName.innerText == \u0026#39;錫蘭Ceylan\u0026#39;) { 19 var subscriberCountText = subCount.innerText; 20 var replacedText = subscriberCountText.replace(\u0026#34;萬\u0026#34;, \u0026#34;兆\u0026#34;).replace(\u0026#34;万\u0026#34;, \u0026#34;兆\u0026#34;); 21 subCount.innerText = replacedText; 22 } 23 } 24 } 25 modifySubscriberCount(); 26 window.addEventListener(\u0026#34;popstate\u0026#34;, modifySubscriberCount); 27 var observer = new MutationObserver(function (mutations) { 28 mutations.forEach(function (mutation) { 29 modifySubscriberCount(); 30 }); 31 }); 32 observer.observe(document.body, { childList: true, subtree: true }); 33})(); 不過你可能會說\u0026quot;喔我沒有讀過大學，我看不懂\u0026quot;，沒關係我也沒有，但你可以請ChatGPT解釋給你聽。\n現在，您可以輕鬆地修正錫蘭 YouTube 的訂閱數，成為網路上的大王。\n","link":"https://emtech.cc/post/ceylan-sub-fix/","section":"post","tags":["YouTube","自製"],"title":"用擴充功能輕鬆修正錫蘭 YouTube 的訂閱數"},{"body":"","link":"https://emtech.cc/categories/css/","section":"categories","tags":null,"title":"CSS"},{"body":"隨著網頁設計的發展，圖示上色效果已成為許多網站和應用程式中不可或缺的元素之一。然而，手動編輯每個圖示的色彩是一個繁瑣的任務，因此我進行了一些搜尋製作了這個CSS濾鏡生成器。\n前提 這篇文章假設你有基本的CSS能力\nCSS濾鏡生成器 開發者:毛哥EM(我) 程式類型:免費開源網站 網站位置:毛哥EM的基地 這個濾鏡生成器網頁讓你輸入顏色或使用顏色選擇器，然後生成CSS filter原始碼，讓你輕鬆地創造出完美的圖示上色效果。只需將原始碼複製並粘貼到你的CSS樣式表中，就可以在你的網站上應用這些美麗的效果。\n此外，我們的濾鏡生成器網頁還提供了預覽功能，並且隨時進行修改。上半部分顯示的是CSS background-color真實顏色，下半部分則是應用了濾鏡效果的圖示，兩個顏色範圍都很大且互相貼著，如果對結果不滿意，只需點擊一下“生成濾鏡”按鈕，即可獲得新的濾鏡原始碼。\n需要注意的是，使用時圖示必須是黑色。如果不是，你可以在filter屬性中添加brightness(0) saturate(100%)，先將它們塗黑。\n希望這個CSS濾鏡生成器能夠節省你的時間並讓你的網站圖示更加美觀和獨特。如果你覺得這篇文章有幫助到你歡迎在Instagram或Google新聞追蹤毛哥EM資訊密技\n","link":"https://emtech.cc/post/css-filter/","section":"post","tags":null,"title":"CSS濾鏡生成器:輕鬆製作網頁圖示上色效果"},{"body":"你是否有群組充滿著垃圾訊息？用Line Bot\u0026amp;Line Notify轉發重要訊息給自己！不用程式經驗，複製貼上就好了！\n影片教學\n原理 機器人在群組收到訊息，過濾不要的，再讓Line Notfy轉傳訊息到群組或私訊給你。\nLINE bot 至Line Developers =\u0026gt; 新增或選取Provider =\u0026gt; Create a new channel =\u0026gt; Message API。\n* Messaging API 底下的 Webhook 等一下我們要填入，非常重要。\n生成Line Notify仗權 Line Notify是個比較冷門但是非常好用的工具。我們可以透過他來從第三方(如你的網站、或是ios捷徑)無限量的廣播訊息到指定的群組，或是單獨發給你。\nhttps://notify-bot.line.me/my/ =\u0026gt; 發行權杖 =\u0026gt; 把那一串複製下來，等一下要用。\n要給Line看這一串他才知道要傳送信息到哪裡。使用Line Notify而不是Line機器人的原因是免費版的官方帳號一個月只能傳送500則訊息，但Line Notify則沒有限制。\n* 記得換成電腦板模式 權杖名稱是顯示在 【 】 中的文字，建議越短越好避免洗版\n建立API(Google App Script) Google App Script 開發者:Google 類型:免費網站（可付費升級） 網址:script.google.com\n請建立一個新的專案並貼上以下內容。記得貼上記得貼上Line Notify Token。\n1// 定義一個名為 \u0026#39;doPost\u0026#39; 的函數，該函數帶有一個名為 \u0026#39;e\u0026#39; 的參數。 2function doPost(e) { 3 4 // 從傳入的 POST 請求中解析出文本消息。只要是傳給機器人的訊息都會被解析出來。 5 var message = JSON.parse(e.postData.contents).events[0].message.text; 6 7 // 從傳入的 POST 請求中解析出使用者 ID。 8 var id = JSON.parse(e.postData.contents).events[0].source.userId; 9 10 // 如果沒有 ID，則返回。你可以在這裡加入你的過濾條件。 11 if (!id) return; 12 13 // 設置 Line Notify API 的權杖。 14 var token = \u0026#34;YOUR_LINE_NOTIFY_TOKEN\u0026#34;; 15 16 // 設置 POST 請求的選項。 17 var options = { 18 \u0026#34;method\u0026#34;: \u0026#34;post\u0026#34;, 19 \u0026#34;payload\u0026#34;: { 20 \u0026#34;message\u0026#34;: id + \u0026#34;\\n\u0026#34; + message // 這裡是要傳送的訊息，我們第一行放了發送者的id，第二行放了訊息本身。可以自行修改。 21 }, 22 \u0026#34;headers\u0026#34;: { 23 \u0026#34;Authorization\u0026#34;: \u0026#34;Bearer \u0026#34; + token 24 } 25 }; 26 27 // 發送 POST 請求到 Line Notify API。會傳給剛才設定的權杖指定的群組或私人訊息。 28 UrlFetchApp.fetch(\u0026#34;https://notify-api.line.me/api/notify\u0026#34;, options); 29} 我們在傳送的訊息同時添加了發送者的id。如果你想要塞選訊息的話請修改第四行if裡面的參數\n!id - 全部（預設） id==\u0026quot;某人id\u0026quot; - 不要某人 id!=\u0026quot;某人id\u0026quot; - 只要某人 id!=\u0026quot;某人id\u0026quot; || id!=\u0026quot;某人id\u0026quot; - 只要某一群人 小叮嚀 為避免程式碼站太多空間，可能會部分隱藏。請記得展開或直接複製。 做好了之後點擊執行▶️，你會需要授予你的程式讀取資料的權限。因為你寫的程式沒有被Google驗證過所以會顯示不安全，但我相信你不會把你的帳號搞爆，對吧。執行後會看到錯誤，這是正常的，因為我們直接執行沒有給他訊息。\n接下來我們要部署它，讓它成為一個網站來讓我們抓。這裡選擇網頁應用程式，所有人都以你的身份讀取。按下部署就可以囉~\n這裡我們把部署的網址複製起來。如果要做修改除了按儲存之外要記得重新部署成新版本才會更新喔。\n將這個部屬的網址貼到剛才Webhook的地方就完成了\n","link":"https://emtech.cc/post/line2notify/","section":"post","tags":["自製","JavaScript","GAS"],"title":"【GAS】用Line Bot\u0026Line Notify轉發群組訊息給自己"},{"body":"Vim 是一款非常流行的文本編輯器，在 Unix 系統中非常受歡迎。如果您正在尋求一款快速、高效和功能強大的文本編輯器，那麼 Vim 可能是您的最佳選擇。\n在本文中，我們將提供一些快速上手 Vim 的技巧，以幫助您快速熟悉這款編輯器。\n安裝 下面是各平台安裝 Vim 的步驟：\nWindows 前往 Vim 官方網站下載最新版本的 Windows 安裝包並執行安裝程式，並按照提示進行安裝。當然你也可以使用choco等套件管理器安裝\n1choco install vim 在命令提示字元中運行 vim 以啟動 Vim\nAndroid Termux 1pkg install vim MacOS 1brew install vim Linux 1sudo apt-get install vim 基本操作 如果您想打開 Vim，只需在終端機中輸入以下命令：\n1$ vim [filename] 如果您想創建一個新文件，可以將文件名放入命令中。如果您想編輯現有文件，可以將文件名作為參數傳遞給命令。\n一旦您進入 Vim，您將看到一個空白文件。如果您想進行編輯，需要進入“編輯模式”。要進入編輯模式，只需按下i鍵。此時，您將可以在文件中輸入文本。\n要退出編輯模式，只需按下“Esc”鍵。此時，您將回到“命令模式”。在命令模式中，您可以使用各種命令，例如保存文件、退出 Vim 等。\n保存和退出 如果您想保存更改並退出 Vim，只需在命令模式中輸入以下命令：:wq\n如果您不想保存更改，可以使用以下命令：:q!\n其他常用指令 以下是一些常用的 Vim 指令：\n:w - 保存文件 :q - 退出 Vim :w [filename] - 將文件另存為 [filename] :x - 保存文件並退出 Vim dd - 刪除光標所在的行 u - 撤消上一個操作 ctrl + r - 還原上一個撤銷的操作 yy - 複製光標所在的行 p - 在光標下面粘貼複製的文本 : [行數] - 跳到文件中的第 [行數] 行 / [內容] - 在文件中搜索 [內容] Vim 的命令很多，但只需要熟悉一些常用指令即可快速操作。希望這篇文章能對您快速上手 Vim 有所幫助。如果你覺得這篇文章有幫助到你歡迎在Instagram或Google新聞追蹤毛哥EM資訊密技\n","link":"https://emtech.cc/post/vim/","section":"post","tags":["終端機"],"title":"【終端機】快速上手 Vim"},{"body":"","link":"https://emtech.cc/tags/android/","section":"tags","tags":null,"title":"Android"},{"body":"赤鬼牛排店之前是使用服務鈴，現在是使用 Samsung Galaxy 的平板進行點餐。想必會有可愛的小朋友拿它來看影片或玩遊戲，而赤鬼基於安全考量後來加了應用程式鎖，而這篇文章就要教你如何破解它開啟你想開的軟體\n警告 此篇文章僅供學術研究用途，任何後果請自負。\n首先假設我們按正方形按鈕想開啟之前開過的APP，會跳到一個叫你輸入密碼的畫面。仔細觀察會發現每次出現輸入密碼都是先開啟你的要開的頁面再跳轉到輸入密碼畫面，且上面還有著廣告，因此我們可以看出它是裝了一個第三方軟體。所以我們只要關閉這個軟體就結束了。\n教學 如果你是安卓使用者應該會知道在應用程式資訊這裡可以強制停止某個軟體，所以只要有辦法按到這個按鈕並點擊確定就可以強制停止這個應用程式了\n進入搜尋 從畫面最上面往下滑兩次開啟通知，並顯示所有按鈕，接著點選搜尋。這時請長按App Lock軟體並點選應用程式資訊（如果沒有出現請先搜尋App Lock）\n這時我們會跳到設定APP，當然，又會出現輸入密碼的畫面。我們就要用這個跳轉的空檔按到強制停止鍵\n雙擊正方形按鈕即會跳到上一個使用的App（也就是設定），接著馬上點選強制停止和確定。你可能會需要多試幾次才能按到，一次按一下就好不要急。\n強制停止之後你的世界就會變得清淨許多，你可以開啟App了。回主畫面會自動開啟點餐畫面，因此如果要選APP可以使用搜尋功能。\n希望這篇文章對你有所幫助，也希望可以讓赤鬼的客量上升（真的很好吃）。如果你覺得這篇文章有幫助到你歡迎在Instagram或Google新聞追蹤毛哥EM資訊密技\n","link":"https://emtech.cc/post/akaonisteak/","section":"post","tags":["Android"],"title":"破解赤鬼牛排店的平板限制"},{"body":"\rOffice 雖然目前有提供免費線上版，且學校都有提供 Office365，但是都一定要使用線上版。除了十分不方便以外許多操作也都受到限制。因此這一篇文章我要來和大家分享一個可以安全啟動 Office 的工具，同時也可以啟用 Windows。適用於所有版本，包括最新的 Office 2022 及 Office 365。\n步驟 1: 下載並安裝 Office 首先請先下載並安裝 Office，這裡提供 2021 官方載點。\n專業增強版\n專業版\n家庭學生版\n家庭企業版\nProject 專業版\nProject 標準版\nVisio 專業版\nVisio 標準版\n下載之後直接點擊setup.exe安裝。\n安裝完之後會提示你可以免費試用或提供金鑰。當然如果你有的話就不會讀這篇文章了，因此我們先關閉軟體，並以使用者管理員身分打開 PowerShell。\n步驟 2: 打開 PowerShell 請以使用者管理員身分打開 PowerShell。你可以在開始選單中找到它，或是在任何地方按下Win+X並選擇Windows 終端機 (管理員)。\n步驟 3: 輸入指令 接著輸入這一串指令並按 enter 來打開這個軟體:\n1irm https://get.activated.win | iex 在 2024/8/31 以前你也可以打這一串。\n1irm https://massgrave.dev/get | iex 這樣就進到軟體介面了。我們要啟用 office 所以請按鍵盤上的 4，然後點擊 2 來啟用 office。如果你要啟用 Windows 可以按 4，如果失敗其他的選項也可以試試看。\n等幾秒就如果出現綠色的\nProduct activation successful\n就代表啟動完成了。可以點擊 0 回到主選單並離開軟體（當然也可以直接關閉視窗）\n再次打開 Office 軟體你就會發現驗證畫面不見了！到關於介面會看到已經成功啟動了。\n如果又出現錯誤說授權到期了只需要再次執行指令就可以囉。\n歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技。如果你有任何問題，都可以在 IG 留言或私訊我。\n","link":"https://emtech.cc/post/massgrave/","section":"post","tags":["windows","Github"],"title":"【開源】快速免費啟用Office及Windows"},{"body":"iOS、iPadOS、還有所有Apple的系統在正式發布之前都會向部分的使用者提供搶先版(Beta Version)讓使用者體驗，來蒐集回饋包括問題回報或是功能建議。這篇文章會教你如何加入Apple的Beta計畫，以及如果不適應要如何離開。\n請注意Beta版可能還會有一些問題（閃退、耗電等），但也可以反過來說原本有的Bug在Beta會先修復。（我有裝置有問題升到Beta就好了過）\n首先請到Apple官網登入Apple ID來加入Beta計畫。如果沒有加入過beta請點選Sign Up，反之Sign In\n並下載對應裝置的描述檔。下載時記得按同意下載描述檔\n接著請到設定，在最上面就可以看到「已下載描述檔」。點擊安裝還有同意後後可能會須要重新啟動，這樣就成功加入Beta計畫啦。\n到設定的一般-軟體更新就可以看到可以更新的最新版本囉（通常是beta結尾）\n如果想要退出Beta的話只要把描述檔刪除就好囉！\n","link":"https://emtech.cc/post/apple-beta/","section":"post","tags":["iOS"],"title":"【iOS】進入/退出Apple Beta的世界 搶先體驗新功能"},{"body":"在Windows11無須依靠第三方軟體，只需要一行指令即可輕鬆取得電池的使用記錄和資訊。\n取得報告方法 首先請進到命令題字元。可按Windows按鍵輸入cmd搜尋。\n接著輸入這行指令\n1powercfg /batteryreport /output \u0026#34;battery.html\u0026#34; \u0026amp;\u0026amp; battery.html 呃對，就這樣，我簡化的很簡單吧\n在「已安裝電池」(Installed Battery)下會給出筆記型電腦所配的鋰電池的設計容量(Design Capacity)和當前實際容量(Full Charge Capacity)，最下方還有循環充電次數(Cycle Count)。\n如果你感興趣的話，還可以通過「電池容量」歷史查看電池實際容量的變化情況，改變充放電習慣。 此外還有最近三天的電池電量使用記錄、電池壽命預估等。\n","link":"https://emtech.cc/post/win-battery-life/","section":"post","tags":["windows"],"title":"【Win11】取得電池報告！查看健康度、充電次數、歷史！"},{"body":"你知道學生在在學期間於全世界皆可使用免費Wifi Eduroam還有Office365嗎?這裡提供完整的操作說明! 這是一個知道的人不會願意告訴你的祕密...\n註冊教育雲 要使用這些服務要先到教育體系單一簽入服務註冊帳號，必須填真實資料。電子郵件名稱可以自己設定，最後都是自訂英文@mail.edu.tw。如果發現已經註冊過可能是國中時就有使用了，忘記密碼就重新設定。\n教育體系單一簽入服務 開發者:教育部 程式類型:官方網站 網址:https://www.sso.edu.tw/register 啟用Eduroam 註冊登入成功看到個人資料底下有一個啟用Eduroam。點擊即可在全台學校免費使用Wi-Fi。帳號就是mail，密碼就是剛才設的。\n微軟 Office 365 教育版 到微軟 Office 365 教育版雲端服務啟用網站啟用Office365。登入即可使用。Office的網站是https://www.office.com/\n記得Office的帳號是自訂英文@ms.edu.tw而不是自訂英文@mail.edu.tw喔!\n建立檔案即可線上編輯共用。共用鍵在右上角藍色按鈕。可輸入共用者Email或直接複製連結 在自己電腦上登入(Windows) 因為學校的帳號其中的用處是讓學校可以集中管理限制某些功能，而學校當然管不到你自己的電腦，所以你可能沒辦法正常登入。\n請到內建軟體Office登入學校帳號。\n連接Wi-Fi 我們學校有一些地方連得到有些地方連不到，圖一圖二我是確定可以的。要教室的無線基地台是方形的才能連eduroam喔\nEduroam 開發者:泛歐洲科研與教育網路協會 服務地區:全球 程式類型:官方網站 官網:https://eduroam.org/(不用到這裡) iPhone \u0026amp; iPad / Windows 10 \u0026amp; 11 「設定」→「Wi-Fi」，找到「eduroam」訊號 如果帳密正確，ios加入後可能會出現憑證的畫面，按「信任」就OK了 Android 「設定」→「Wi-Fi」，找到「eduroam」訊號 「安全性」應該已自動選取「802.1X EAP」 「EAP方法」請選擇「PEAP」 「階段2驗證」選「MSCHAPV2」(目前選「無」也可以過) 「CA憑證」選「不進行驗證」(手機可能會說阿很危險bluhbluh不用理他) 「身分」請填 「自訂英文@mail.edu.tw」 「匿名身分」空白即可 Windows7 有億點點複雜，真的有需要再問我或老師\n","link":"https://emtech.cc/post/edu-office-and-wifi/","section":"post","tags":null,"title":"【學生】免費全球學校Wifi \u0026 Office365教育版"},{"body":"","link":"https://emtech.cc/categories/%E7%B7%9A%E4%B8%8A%E6%95%99%E5%AD%B8/","section":"categories","tags":null,"title":"線上教學"},{"body":"ios的控制中心相較於安卓的開/關複雜許多，這篇文章我將快速介紹這些符號的功能以及如何正確開啟個人熱點別人才收得到。\n如果看到控制中心選項只有四個要長按才會叫出六個完整選項。\n首先最重要的！如下開啟個人熱點別人才收得到？ 個人熱點綠色搭配\n用wifi連：wifi符號一定要是白色！！ 用藍芽（速度很慢）：藍牙開啟 USB：電腦要裝iCloud，個人熱點綠色即可 開啟後不要急著離開，多放個三秒確認有開啟，不然按一下就走有時候不會看成功\n接下來解釋各個顏色的意義\n無色/劃掉代表關閉 相信大家都能理解。如果要關閉WiFi、藍牙要去設定關閉、打開飛航模式、或者是請siri幫忙。對你沒聽錯（要也是看錯），在控制中心關不掉\n藍色/彩色代表開啟 不解釋，開著\n從藍色按一下變白色 這會暫時終斷WiFi及藍牙連線，不過WiFi藍牙依舊開著，不能配對就是了。\n比如說台灣社交距離APP就是透過藍牙技術實現，但實際上兩台裝置並沒有連上，所以讓藍牙呈現白色就好了\n不過在這個模式下手機可能過一下子發現到新Wi-Fi就又連了\n[用專注模式關閉Wi-Fi/藍牙的方法](## 用專注模式關閉Wi-Fi/藍牙)在最下面\n灰色/按不了 手機當機/剛開有時會這樣，等一下就好了。如果是個人熱點無法開啟請確認是不是沒有開行動數據。\nWi-Fi 橋樑 在安卓上可以共用你現在的Wi-Fi給其他設備。也就是說資料會先下載到你的手機再到連接到你的裝置，適用於離太遠或想給朋友朋友的朋友的Wi-Fi時。開啟方式有的是直接開個人熱點，有的是在連線選單單獨一個開關，而在ios...沒這個功能（那還講那麼多）\n以上就是各種顏色的意義。乍看之下好像ios把它搞得很複雜，但用久了發現其實是多了更多選項。習慣就好了\n用專注模式關閉Wi-Fi/藍牙 首先請先在設定建立一個專注模式。內容/通知設定不是重點因為我們只是把它當成一個按鈕而已\n接著到捷徑建立一個自動化操作。條件就是當專注模式被開啟，動作就是關閉藍牙/Wi-Fi。執行前不用詢問，要不要通知就看個人了\n當然你不想用專注模式想放一個按鈕在主畫面也可以\n","link":"https://emtech.cc/post/ios-controls/","section":"post","tags":["ios","捷徑"],"title":"【ios】如何開熱點？你藍牙可能沒關過？帶你看懂比女生還難懂的控制中心！用專注模式關閉Wi-Fi/藍牙！"},{"body":"","link":"https://emtech.cc/tags/%E6%8D%B7%E5%BE%91/","section":"tags","tags":null,"title":"捷徑"},{"body":"","link":"https://emtech.cc/categories/%E7%AD%86%E8%A8%98/","section":"categories","tags":null,"title":"筆記"},{"body":"markdown是我很喜歡的一個寫作格式。不只是寫部落格文章，我自己平常做的筆記很多都是用markdown寫的，大大的提升我的效率和寫作體驗。不過既然都做了不如分享給大家，因此我建立了一個Github倉庫專門存放我的筆記。不過內容就不會像毛哥EM資訊密技那麼完整，且不一定和科技相關，更可能包含專業內容（雖然我不怎麼專業），有一些因為是比賽內容甚至需要知道連結才能開啟。因此大多僅供參考。\nEM\u0026#39;s Notes 開發者:毛哥EM(我) 類型:網站 連結:毛哥EM的基地 希望有幫助到你們wwww\n","link":"https://emtech.cc/post/ems-notes/","section":"post","tags":["自製"],"title":"【新網站】EM's Notes"},{"body":"班上因為又有人確診又有人隔離又開始使用視訊會議，常常被反應黑板看不清楚。明明鏡頭很好、網路不錯、且畫質設定已經調到最高還是一樣。因此我做了一個簡單網站來顯示鏡頭畫面，用螢幕分享畫面的方式讓畫質明顯提升！且黑白不會左右顛倒，不用再去裝擴充外掛！\nEM-SFW (Site for Webcam) 開發者:毛哥EM(我) 程式類型:免費開源網站 網站位置:毛哥EM的基地 縮短網址：is.gd/EMSFW 使用教學 進入https://Edit-Mr.github.io/code/EMSFW(不分大小寫，或輸入縮短網址is.gd/EMSFW也可以）並同意讀取鏡頭。如果忘記網址可以搜尋「EM-SFW」或「毛哥EM」找到網站\n你會看到一個簡單的設定畫面。你可以點擊z來開啟/關閉這個畫面。\n接著到視訊會議軟體分享螢幕畫面。選擇分享分頁且不用分享音訊（因為也沒有）即可。\n超出畫面隱藏 理論上不會超出螢幕畫面，如果真的超出了且切到畫面可以將此功能關閉。滑動滾軸到適當位置。\n圖片模式（預設關閉） 顯示的是即時擷取的影像，因此可以右鍵儲存截圖。不過因此不會顯示運行時間且不能使用字母畫面功能（沒有很重要）\n視訊畫面會被擠壓成視窗大小，適用於鏡頭畫面變形或老師太胖時...\n子母畫面 可以讓你的鏡頭畫面顯示在你的螢幕頂層，讓你可以知道你在鏡頭中長什麼樣。確保大家不會看到NSFW的畫面（所以叫EM-SFW）\n在圖片模式關閉時可以使用子母畫面功能。將鼠標移到畫面上並按下字母畫面按鈕（有時需要先按三個點）\n儲存圖片 在影像模式中可以點擊右鍵並點選儲存圖片來下載當前影像，如老師想儲存他辛辛苦苦寫的黑板。不過儲存的是原始的影像，不會進行翻轉（但比例依舊會被拉長）\n提示 如果你覺得這個免費的網站有幫助到你請分享讓更多人可以有更好的線上上課體驗，讓沒有理由不認真上課\n","link":"https://emtech.cc/post/em-sfw/","section":"post","tags":["自製","視訊會議"],"title":"【視訊會議】EM-SFW - 鏡頭畫質的天花板！黑板不再顛倒/模糊/切割！"},{"body":"","link":"https://emtech.cc/tags/%E8%A6%96%E8%A8%8A%E6%9C%83%E8%AD%B0/","section":"tags","tags":null,"title":"視訊會議"},{"body":"","link":"https://emtech.cc/series/%E7%B7%9A%E4%B8%8A%E6%95%99%E5%AD%B8/","section":"series","tags":null,"title":"線上教學"},{"body":"最後更新：10/6 我整理出C++題目常見的題目並寫出我認為的最佳解(取自西苑高一電腦課)。也有提供一些減少程式碼的常用技巧。如果解不出來到想砸電腦或想只到更簡單的方法可以來看看\n警告 網站終於搶救成功啦!這兩天來更新!這裡的程式僅供參考，請不要偷懶直接複製貼上，小考你不會過的。\n關於有人問我是誰，選單有各種連結。\n目前更新到503 上課只會上到425\n小提示 當然如果你只是想看解答然後像月同學一樣手機開超大聲打音遊可以點我跳到解答\nC語言 如果你忘記C語言的語法想看看可以閱讀這篇文章，不過相信你學過C++就不會想要碰它了。\n減少程式碼的常用技巧 這裡講的是真的少打一點，不是全部縮成一排。減少程式碼可以方便閱讀且在bebug(找錯誤)比較方便\n定義時賦予值 1int a b; 2a=87; 可以簡化成int a=87, b;一行\n在輸出行內進行運算 1a=x+y; 2cout\u0026lt;\u0026lt;a 可以簡化成cout\u0026lt;\u0026lt;x+y;一行\nif else省去大括號 if else裡面如果只有一行指令可以省去大括號{}\n1if(a\u0026gt;b){ 2 cout\u0026lt;\u0026lt;a; 3}else{ 4 cout\u0026lt;\u0026lt;b 5} 可以簡化成if(a\u0026gt;b) cout\u0026lt;\u0026lt;a; else cout\u0026lt;\u0026lt;b;一行\n數學含式庫\u0026lt;math.h\u0026gt; 列出來怕你忘記\nM_E 回傳自然常數 e M_PI 回傳圓周率 π M_SQRT2 回傳根號2 sin(x) cos(x) tan(x) asin(x) acos(x) atan(x) 不解釋bj4 exp(x) 回傳自然常數 e 的 x 次方 pow(x, y) 回傳 x 的 y 次方 pow(x) 回傳10的 x 次方 sqrt(x) 回傳 x 的根號 log(x) 回傳以 e 為底的對數 log10(x) 回傳以10為底的對數 abs(x) 回傳整數 x 的絕對值 fabs(x) 回傳實數 x 的絕對值 題目解答 就..雖然我很貼心還給你了複製鍵...但有問題要問...\n裡面的換行空格是大家的習慣寫法，可以參考。且你會發現雖然空格多一點程式還是比標準答案少\n提醒 裡面有一些東西還沒有教過，有興趣可以問我或是Google。\n目前只更新到308\nCh.1 101.Hello C++ 1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 cout \u0026lt;\u0026lt; \u0026#34;Hello C++\u0026#34;; 6 return 0; 7} 102.BMI 1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 float weight, height, BMI; 6 cin \u0026gt;\u0026gt; weight \u0026gt;\u0026gt; height; 7 BMI = weight / ((height / 100) * (height / 100)); 8 cout \u0026lt;\u0026lt; \u0026#34;BMI為\u0026#34; \u0026lt;\u0026lt; BMI; 9 return 0; 10} Ch.2 201.運算子 提示筆記 先乘除後加減(依照優先順序)\n有括弧的先計算 多個括弧皆使用小括弧。EX:((8+9)-7) 整數跟整數相除的結果為整數 運算子 定義 優先順序 結合律 ++/-- 後置遞增/遞減 2 左 ++/-- 前置遞增/遞減 3 右 +/- 正負號 3 右 * 乘法 5 左 / 除法 5 左 % 餘數(mod) 5 左 +/- 加法/減法 6 左 1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int x, y; 6 cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y; 7 cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; 加 \u0026#34; \u0026lt;\u0026lt; y \u0026lt;\u0026lt; \u0026#34; 的和是 \u0026#34; \u0026lt;\u0026lt; x + y \u0026lt;\u0026lt; endl; 8 cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; 減 \u0026#34; \u0026lt;\u0026lt; y \u0026lt;\u0026lt; \u0026#34; 的差是 \u0026#34; \u0026lt;\u0026lt; x - y \u0026lt;\u0026lt; endl; 9 cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; 乘 \u0026#34; \u0026lt;\u0026lt; y \u0026lt;\u0026lt; \u0026#34; 的積是 \u0026#34; \u0026lt;\u0026lt; x * y \u0026lt;\u0026lt; endl; 10 cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; 除 \u0026#34; \u0026lt;\u0026lt; y \u0026lt;\u0026lt; \u0026#34; 的結果是 \u0026#34; \u0026lt;\u0026lt; 1.0 * x / y \u0026lt;\u0026lt; endl; 11 cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; 除 \u0026#34; \u0026lt;\u0026lt; y \u0026lt;\u0026lt; \u0026#34; 的商是 \u0026#34; \u0026lt;\u0026lt; x / y \u0026lt;\u0026lt; endl; 12 cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; 除 \u0026#34; \u0026lt;\u0026lt; y \u0026lt;\u0026lt; \u0026#34; 的餘數是 \u0026#34; \u0026lt;\u0026lt; x % y \u0026lt;\u0026lt; endl; 13 return 0; 14} 202.成績計算 請製作一個程式，輸入五個成績，計算總和與平均並輸出\n提示筆記 C++換行可以用\u0026lt;\u0026lt;endl，但C語言的\\n明顯短了三倍\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 float sum, a, b; 6 for (int i = 1; i \u0026lt; 6; ++i) { 7 cin \u0026gt;\u0026gt; b; 8 a += b; 9 } 10 cout \u0026lt;\u0026lt; \u0026#34;總和:\u0026#34; \u0026lt;\u0026lt; a; 11 cout \u0026lt;\u0026lt; \u0026#34;\\n平均:\u0026#34; \u0026lt;\u0026lt; a / 5; 12 return 0; 13} 203.矩形周長面積 請製作一個程式，輸入長方形的長 寬，並計算周長與面積\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int x, y; 6 cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y; 7 cout \u0026lt;\u0026lt; \u0026#34;周長=\u0026#34; \u0026lt;\u0026lt; 2 * (x + y); 8 cout \u0026lt;\u0026lt; \u0026#34;\\n面積=\u0026#34; \u0026lt;\u0026lt; x * y; 9 return 0; 10} 204.畢氏定理 請製作一個程式，輸入直角三角形兩邊長，利用畢氏定理求斜邊長\n提示筆記 sqrt(x) 回傳 x 的平方根(Square Root)\n1#include\u0026lt;iostream\u0026gt; 2#include\u0026lt;cmath\u0026gt; 3 4using namespace std; 5int main() { 6 float x, y; 7 cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y; 8 cout \u0026lt;\u0026lt; \u0026#34;斜邊長=\u0026#34; \u0026lt;\u0026lt; sqrt(x * x + y * y); 9 return 0; 10} 205.兩點距離 請製作一個程式，輸入二維中兩點座標，計算出兩點距離\n提示筆記 pow(x, y) 回傳 x 的 y 次方\n1#include\u0026lt;iostream\u0026gt; 2 3#include\u0026lt;cmath\u0026gt; 4 5using namespace std; 6int main() { 7 float x1, x2, y1, y2; 8 cin \u0026gt;\u0026gt; x1 \u0026gt;\u0026gt; y1 \u0026gt;\u0026gt; x2 \u0026gt;\u0026gt; y2; 9 cout \u0026lt;\u0026lt; \u0026#34;兩點距離=\u0026#34; \u0026lt;\u0026lt; sqrt(pow(x1 - x2, 2) + pow(y1 - y2, 2)); 10 return 0; 11} 206.兩點求一線 請製作一個程式，輸入二維中兩點座標，計算出通過兩點的直線方程式\n1#include\u0026lt;iostream\u0026gt; 2#include\u0026lt;cmath\u0026gt; 3 4using namespace std; 5int main(){ 6\tfloat x1,x2,y1,y2,m; 7\tcin\u0026gt;\u0026gt;x1\u0026gt;\u0026gt;y1\u0026gt;\u0026gt;x2\u0026gt;\u0026gt;y2; 8\tcout\u0026lt;\u0026lt;\u0026#34;方程式:y=\u0026#34;\u0026lt;\u0026lt;(y1-y2)/(x1-x2)\u0026lt;\u0026lt;\u0026#34;x+\u0026#34;\u0026lt;\u0026lt;(y1*x2-y2*x1)/(x2-x1); 9} 原本想法 斜率m為y變化量除以x變化量。將一數代數y=mx+b即可求出b並寫出方程式。b只會用一次算出來直接輸出，不用多設一個變數。\n不過浮點數是使用科學記號儲存，有一定的誤差 當斜率本身已經有誤差時，再用來算出截距，誤差將擴大。因此最後一個測資會有誤差。\n1#include\u0026lt;iostream\u0026gt; 2#include\u0026lt;cmath\u0026gt; 3using namespace std; 4int main(){ 5\tfloat x1,x2,y1,y2,m; 6\tcin\u0026gt;\u0026gt;x1\u0026gt;\u0026gt;y1\u0026gt;\u0026gt;x2\u0026gt;\u0026gt;y2; 7\tm=(y1-y2)/(x1-x2); 8\tcout \u0026lt;\u0026lt; \u0026#34;方程式:y=\u0026#34; \u0026lt;\u0026lt; m \u0026lt;\u0026lt; \u0026#34;x+\u0026#34; \u0026lt;\u0026lt; y2-x2*m; 9} Ch.3 301.奇偶同籠? 請製作一個程式，可以讓使用者輸入一個整數，判斷是奇數還是偶數\n提示筆記 如果否則的語法是\n1if (條件式){ 2\t程式區塊; 3} else { 4 程式區塊; 5} 如果大括號裡面只有一行程式可以省略\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int a; 6 cin \u0026gt;\u0026gt; a; 7 if (a % 2 == 0) cout \u0026lt;\u0026lt; \u0026#34;偶數\u0026#34;; 8 else cout \u0026lt;\u0026lt; \u0026#34;奇數\u0026#34;; 9 return 0; 10} 302.及格? 請製作一個程式，讓使用者輸入一個成績，顯示「成績及格」或「成績不及格」\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int a; 6 cin \u0026gt;\u0026gt; a; 7 if (a \u0026gt;= 60) cout \u0026lt;\u0026lt; \u0026#34;成績及格\u0026#34;; 8 else cout \u0026lt;\u0026lt; \u0026#34;成績不及格\u0026#34;; 9 return 0; 10} 303.幾科不及格 請製作一個程式：\n可以輸入五個成績 計算有幾科不及格 1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int a[5], b = 0; 6 cin \u0026gt;\u0026gt; a[0] \u0026gt;\u0026gt; a[1] \u0026gt;\u0026gt; a[2] \u0026gt;\u0026gt; a[3] \u0026gt;\u0026gt; a[4]; 7 for (int y: a) 8 if (y \u0026lt; 60) b++; 9 cout \u0026lt;\u0026lt; \u0026#34;共\u0026#34; \u0026lt;\u0026lt; b \u0026lt;\u0026lt; \u0026#34;科不及格\u0026#34;; 10 return 0; 11} 304.明年當學弟/妹? 請製作一個程式：\n可以輸入五個成績 判斷明年是否當學弟妹(不及格科數達一半) 1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int a[5], b = 0; 6 cin \u0026gt;\u0026gt; a[0] \u0026gt;\u0026gt; a[1] \u0026gt;\u0026gt; a[2] \u0026gt;\u0026gt; a[3] \u0026gt;\u0026gt; a[4]; 7 for (int y: a) 8 if (y \u0026lt; 60) b++; 9 if (b \u0026gt; 2) cout \u0026lt;\u0026lt; \u0026#34;明年當學弟妹\u0026#34;; 10 else cout \u0026lt;\u0026lt; \u0026#34;明年當學長姊\u0026#34;; 11 return 0; 12} 305.比大小 請製作一個程式，輸入兩個正整數，輸出較大者\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int a, b; 6 cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; 7 if (a \u0026gt; b) cout \u0026lt;\u0026lt; a; 8 else cout \u0026lt;\u0026lt; b; 9 return 0; 10} 306.本丸好呷 某數字商店飯糰第二件59折，以低價者計。請製作一個程式，輸入兩個正整數，代表兩顆飯糰的定價，請計算優惠後的總價。\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int a, b, c; 6 cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; 7 if (a \u0026gt; b) c = 0.59 * b + a; 8 else c = 0.59 * a + b; 9 cout \u0026lt;\u0026lt; \u0026#34;優惠價=\u0026#34; \u0026lt;\u0026lt; c; 10 return 0; 11} 307.比仨大 請製作一個程式，輸入三個正整數，輸出最大者\n更新:最大值b如果一開始沒有給定值會被設為0。故先將b設為第一個數再進行比較。\n1#include\u0026lt;iostream\u0026gt; 2using namespace std; 3int main(){ 4 int a[3]; 5 cin\u0026gt;\u0026gt;a[0]\u0026gt;\u0026gt;a[1]\u0026gt;\u0026gt;a[2]; 6 int b = a[0]; 7 for( int y : a ) if(y\u0026gt;b) b=y; 8 cout\u0026lt;\u0026lt;\u0026#34;最大值=\u0026#34;\u0026lt;\u0026lt;b; 9 return 0; 10} 308.比不完 請製作一個程式，輸入五個正整數，輸出最大者\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int a[5], b; 6 cin \u0026gt;\u0026gt; a[0] \u0026gt;\u0026gt; a[1] \u0026gt;\u0026gt; a[2] \u0026gt;\u0026gt; a[3] \u0026gt;\u0026gt; a[4]; 7 for (int y: a) 8 if (y \u0026gt; b) b = y; 9 cout \u0026lt;\u0026lt; \u0026#34;最大值=\u0026#34; \u0026lt;\u0026lt; b; 10 return 0; 11} 309.正負? 請製作一個程式，判斷輸入的數字是正數、負數還是0\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int a; 6 cin \u0026gt;\u0026gt; a; 7 if (a \u0026gt; 0) cout \u0026lt;\u0026lt; \u0026#34;正數\u0026#34;; 8 else if (a == 0) cout \u0026lt;\u0026lt; \u0026#34;零\u0026#34;; 9 else cout \u0026lt;\u0026lt; \u0026#34;負數\u0026#34;; 10 return 0; 11} 310.分級 請製作一個程式，讓使用者輸入成績，並判斷等級：\n90~100分：A 80~89分：B 70~79分：C 60~69分：D 0~59分：F 1#include\u0026lt;iostream\u0026gt; 2using namespace std; 3int main() { 4 int a; 5 cin \u0026gt;\u0026gt; a; 6 switch (a / 10) { 7 case 10: 8 case 9: 9 cout \u0026lt;\u0026lt; \u0026#34;A\u0026#34;; 10 break; 11 case 8: 12 cout \u0026lt;\u0026lt; \u0026#34;B\u0026#34;; 13 break; 14 case 7: 15 cout \u0026lt;\u0026lt; \u0026#34;C\u0026#34;; 16 break; 17 case 6: 18 cout \u0026lt;\u0026lt; \u0026#34;D\u0026#34;; 19 break; 20 default: 21 cout \u0026lt;\u0026lt; \u0026#34;F\u0026#34;; 22 } 23 return 0; 24} 311.電腦教室不能帶飲料進來 某項數字商店飲料定價87元，第二件8折，第三件77折 請製作一個程式可以輸入件數計算價錢\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int a,c; 6 float b[4]={0,1,1.8,2.57}; 7 cin \u0026gt;\u0026gt; a; 8 c=a/3*223.59+b[a%3]*87; 9 cout \u0026lt;\u0026lt; \u0026#34;總價=\u0026#34; \u0026lt;\u0026lt; c; 10 return 0; 11} 312.一塊錢玩兩次 ax2 + bx + c = 0，請製作一個程式，輸入a、b、c，解一元二次方程式。 若a = 0則輸出ERROR\n令d = b2 - 4ac：\n若d = 0，則輸出方程式唯一解x=-b/2a\n若d \u0026gt; 0，則輸出方程式兩解x=(-b±√d)/2a\n若d \u0026lt; 0，則輸出無實數解\n1#include\u0026lt;iostream\u0026gt; 2 3#include\u0026lt;cmath\u0026gt; 4 5using namespace std; 6int main() { 7 float a, b, c; 8 cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b \u0026gt;\u0026gt; c; 9 if (a == 0) cout \u0026lt;\u0026lt; \u0026#34;ERROR\u0026#34;; 10 else { 11 float d = b * b - 4 * a * c; 12 if (d \u0026lt; 0) cout \u0026lt;\u0026lt; \u0026#34;無實數解\u0026#34;; 13 else { 14 if (d == 0) cout \u0026lt;\u0026lt; \u0026#34;唯一解x=\u0026#34; \u0026lt;\u0026lt; 0 - b / (a * 2); 15 else cout \u0026lt;\u0026lt; \u0026#34;兩解:\\nx1=\u0026#34; \u0026lt;\u0026lt; (0 - b + sqrt(d)) / 2 * a \u0026lt;\u0026lt; \u0026#34;\\nx2=\u0026#34; \u0026lt;\u0026lt; (0 - b - sqrt(d)) / 2 * a; 16 } 17 } 18 return 0; 19} 313.三角形 請製作一個程式，輸入三角形三邊長a、b、c，先判斷能否構成三角形，若無法構成三角形則輸出ERROR，然後評定三角形種類，最後計算三角形面積。\n假如𝑎2+𝑏2\u0026gt;𝑐2，為銳角三角形 假如𝑎2+𝑏2=𝑐2，為直角三角形 假如𝑎2+𝑏2\u0026lt;𝑐2，為鈍角三角形 令d=(a+b+c)/2，三角形面積=√(d(d−a)(d−b)(d−c)) 1#include\u0026lt;iostream\u0026gt; 2 3#include\u0026lt;cmath\u0026gt; 4 5using namespace std; 6int main() { 7 float a, b, c, d; 8 cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b \u0026gt;\u0026gt; c; 9 if (a \u0026gt; b) { 10 d = a; 11 a = b; 12 b = d; 13 } 14 if (b \u0026gt; c) { 15 d = b; 16 b = c; 17 c = d; 18 } 19 if (c \u0026gt;= a + b) { 20 cout \u0026lt;\u0026lt; \u0026#34;ERROR\u0026#34;; 21 } else { 22 23 int e = b * b + a * a; 24 int f = c * c; 25 if (e \u0026gt; f) cout \u0026lt;\u0026lt; \u0026#34;銳\u0026#34;; 26 else 27 if (e == f) cout \u0026lt;\u0026lt; \u0026#34;直\u0026#34;; 28 else cout \u0026lt;\u0026lt; \u0026#34;鈍\u0026#34;; 29 float D = (a + b + c) / 2; 30 cout \u0026lt;\u0026lt; \u0026#34;角三角形\\n面積=\u0026#34; \u0026lt;\u0026lt; sqrt(D * (D - a) * (D - b) * (D - c)); 31 } 32 return 0; 33} Ch.4 這一段有點尷尬，沒有人叫你用for迴圈你幹嘛寫那麼多行跑那麼久?測資要什麼複製貼上就好了。\n如果你想用正規的辦法for的原型在這裡相信你會的uwu\n1for(變數設為;如果...; 變數要...){ 2 指令區塊; 3 [break;] //跳出迴圈 4 [continue;] //跳下一次迴圈 5} 比如說這兩個程式都會輸出uwu uwu uwu\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int i; 6 for (i = 0; i \u0026lt; a; i++) { 7 cout \u0026lt;\u0026lt; \u0026#34;uwu \u0026#34;; 8 } 9 return 0; 10} 1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 for (int i = 0; i \u0026lt; a; i++) 6 cout \u0026lt;\u0026lt; \u0026#34;uwu \u0026#34;; 7 return 0; 8} 401 請列印出1 2 3 4 5 6 7 8 ......19\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 cout \u0026lt;\u0026lt; \u0026#34;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\u0026#34;; 6 return 0; 7} 402 請列印出1 3 5 7 9 11 13 15 17 19\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 cout \u0026lt;\u0026lt; \u0026#34;1 3 5 7 9 11 13 15 17 19 \u0026#34;; 6 return 0; 7} 403 請列印出7 6 5 4 3 2 1 0 -1 -2 -3\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 cout \u0026lt;\u0026lt; \u0026#34;7 6 5 4 3 2 1 0 -1 -2 -3 \u0026#34;; 6 return 0; 7} 405 請列印出7 5 3 1 -1 -3 -5 -7 -9 -11\n不要問我404去哪。404找不到此頁面\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 cout \u0026lt;\u0026lt; \u0026#34;7 5 3 1 -1 -3 -5 -7 -9 -11 \u0026#34;; 6 return 0; 7} 406 請製作一個程式計算1~100之和\n國小數學會吧...梯形公式。當然你要直接輸出5050也可以\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 cout \u0026lt;\u0026lt; \u0026#34;5050\u0026#34;; 6 return 0; 7} 407 輸入兩個整數a,b，計算a到b的合(包含a、b)\n例如輸入1跟100，計算1~100之合為5050\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int a, b; 6 cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; 7 cout \u0026lt;\u0026lt; (a + b) * (abs(a - b) + 1) / 2; 8 return 0; 9 10} 408 請製作一個程式，輸入的第一個正整數為班級人數n，代表接下來會有n個正整數，為班上每個人的成績。請計算班級總分。\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int a, b, c = 0, i; 6 cin \u0026gt;\u0026gt; a; 7 for (i = 0; i \u0026lt; a; i++) { 8 cin \u0026gt;\u0026gt; b; 9 c = c + b; 10 } 11 cout \u0026lt;\u0026lt; c; 12 return 0; 13} 409 請製作一個程式，輸入的第一個正整數為班級人數n，代表接下來會有n個正整數，為班上每個人的成績。請計算班級平均。\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int a, b, c = 0, i; 6 cin \u0026gt;\u0026gt; a; 7 for (i = 0; i \u0026lt; a; i++) { 8 cin \u0026gt;\u0026gt; b; 9 c = c + b; 10 } 11 cout \u0026lt;\u0026lt; 1.0 * c / a; 12 return 0; 13} 410 請製作一個程式，輸入的第一個正整數為班級人數n，代表接下來會有n個正整數，為班上每個人的成績。請計算班級中不及格的人數。\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int n,a,b=0,i; 6 cin \u0026gt;\u0026gt; n; 7 for (i = 0; i \u0026lt; n; i++) { 8 cin \u0026gt;\u0026gt; a; 9 if(a\u0026lt;60) b++; 10 } 11 cout \u0026lt;\u0026lt; b; 12 return 0; 13} 411 請製作一個程式，將1~548701487的整數中篩選出94或87的倍數，\n計算有多少個 計算這些數的總和 1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int i, a = 0, b = 0; 6 for (i = 1; i \u0026lt;= 548701487; i++) { 7 if (i % 87 == 0 || i % 94 == 0) { 8 a++; 9 b += i; 10 } 11 } 12 cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; b; 13 return 0; 14} 412 請製作一個程式，輸入一個整數n，計算1~n的整數中(n\u0026lt;10000)，出現過多少次5\n例如2345含有一次5，5555含有四次5\n1#include\u0026lt;iostream\u0026gt; 2 3#include\u0026lt;math.h\u0026gt; 4 5using namespace std; 6int main() { 7 int i, o, a, b = 0, c; 8 cin \u0026gt;\u0026gt; a; 9 for (i = 1; i \u0026lt;= a; i++) { 10 for (o = 0; o \u0026lt;= 5; o++) { 11 c = i / pow(10, o); 12 if (c % 10 == 5) b++; 13 } 14 } 15 cout \u0026lt;\u0026lt; b; 16 return 0; 17} 413 請製作一個程式，輸入一個整數x，再輸入一個整數y，檢查y是否為x的因數，輸出1或0\n1#include\u0026lt;iostream\u0026gt; 2using namespace std; 3int main() { 4 int a,b; 5 cin\u0026gt;\u0026gt;a\u0026gt;\u0026gt;b; 6 if(a%b==0) cout\u0026lt;\u0026lt;1; else cout\u0026lt;\u0026lt;0; 7 return 0; 8} 414 請製作一個程式，輸入一個整數n，求其所有因數\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int i,a; 6 cin\u0026gt;\u0026gt;a; 7 for (i = 1; i \u0026lt;= a; i++) { 8 if(a%i==0) cout \u0026lt;\u0026lt; i\u0026lt;\u0026lt;\u0026#34; \u0026#34;; 9 10 } 11 return 0; 12} 415 請製作一個程式，輸入一個整數，求因數數量\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int i,a,b=0; 6 cin\u0026gt;\u0026gt;a; 7 for (i = 1; i \u0026lt;= a; i++) 8 if(a%i==0) b++; 9 cout\u0026lt;\u0026lt;b; 10 return 0; 11} 416 請製作一個程式，輸入一個整數，判斷其是質數還是合數\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int i,a,b=0; 6 cin\u0026gt;\u0026gt;a; 7 for (i = 1; i \u0026lt;= a; i++) 8 if(a%i==0) b++; 9if(b==2) cout\u0026lt;\u0026lt;\u0026#34;質數\u0026#34;; else 10 cout\u0026lt;\u0026lt;\u0026#34;合數\u0026#34;; 11 return 0; 12} 417 請製作一個程式，輸入一個整數n，列出費式數列n項\n1 1 2 3 5 8 13 21……\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int a, b = 0, x = 0, y = 1, z, o; 6 cin \u0026gt;\u0026gt; a; 7 for (o = 0; o \u0026lt; a; o++) { 8 z = x; 9 x = x + y; 10 y = z; 11 cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; \u0026#34;; 12 } 13 14 return 0; 15} 418 請製作一個程式，使用者輸入兩個數字，使用輾轉相除法，求兩數最大公因數\n1#include\u0026lt;iostream\u0026gt; 2using namespace std; 3 4int main() 5{ 6 int a, b, t; 7 8 while( cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b ) 9 { 10 while( b!=0 ) 11 { 12 t = b; 13 b = a%b; 14 a = t; 15 } 16 cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; endl; 17 } 18 19 return 0; 20} 419 請製作一個程式，使用者輸入一個整數n，求質因數分解\n1#include\u0026lt;iostream\u0026gt; 2using namespace std; 3 4int main() 5{ 6 int n,i; 7 cin \u0026gt;\u0026gt; n; 8 i = 2; 9 while( n \u0026gt; 1 ){ 10 while( n%i == 0 ){ 11 cout \u0026lt;\u0026lt; i; 12 n = n/i; 13 if(n!=1) cout\u0026lt;\u0026lt;\u0026#34;*\u0026#34;; 14 } 15 i = i+1; 16 } 17 cout \u0026lt;\u0026lt; endl; 18 19 return 0; 20} 420 請製作一個程式，輸入一個正整數n，列印出底為n、高為n的星星直角三角形\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4 5int main() { 6 int n; 7 cin \u0026gt;\u0026gt; n; 8 for (int i = 0; i \u0026lt;= n; i++) { 9 for (int o = 0; o \u0026lt; i; o++) cout \u0026lt;\u0026lt; \u0026#34;*\u0026#34;; 10 cout \u0026lt;\u0026lt; endl; 11 } 12 13 return 0; 14} 421 請製作一個程式，輸入一個正整數n，列印出底為n、高為n的反星星直角三角形\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4 5int main() { 6 int n; 7 cin \u0026gt;\u0026gt; n; 8 9 for (int i = 0; i \u0026lt;= n; i++) { 10 for (int a = 0; a \u0026lt; i; a++) cout \u0026lt;\u0026lt; \u0026#34; \u0026#34;; 11 for (int o = 0; o \u0026lt; n - i; o++) cout \u0026lt;\u0026lt; \u0026#34;*\u0026#34;; 12 cout \u0026lt;\u0026lt; endl; 13 } 14 15 return 0; 16} 422 請製作一個程式，輸入一個正整數n，列印出底為n、高為n的數字三角形\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4 5int main() { 6 int n; 7 cin \u0026gt;\u0026gt; n; 8 for (int i = 0; i \u0026lt;= n; i++) { 9 for (int o = 1; o \u0026lt;= i; o++) cout \u0026lt;\u0026lt; o; 10 cout \u0026lt;\u0026lt; endl; 11 } 12 13 return 0; 14} 423 請製作一個程式，輸入一個正整數n，列印出底為n、高為n的數字三角形\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4 5int main() { 6 int n; 7 cin \u0026gt;\u0026gt; n; 8 for (int i = 0; i \u0026lt;= n; i++) { 9 for (int o = n; o \u0026gt; 0; o--) 10 if (o \u0026gt; i) cout \u0026lt;\u0026lt; o; 11 cout \u0026lt;\u0026lt; endl; 12 } 13 14 return 0; 15} 424 請製作一個程式，輸入一個正整數n，列印出底為n、高為n的數字三角形\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4 5int main() { 6 int n; 7 cin \u0026gt;\u0026gt; n; 8 for (int i = 0; i \u0026lt;= n; i++) { 9 for (int o = 1; o \u0026lt;= n; o++) 10 if (o \u0026gt; n - i) cout \u0026lt;\u0026lt; o; 11 cout \u0026lt;\u0026lt; endl; 12 } 13 14 return 0; 15} 425 請製作一個程式，輸入一個正整數n，列印出底為n、高為n的數字三角形\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4 5int main() { 6 int n; 7 cin \u0026gt;\u0026gt; n; 8 for (int i = 0; i \u0026lt;= n; i++) { 9 for (int o = 1; o \u0026lt;= n; o++) 10 if (o \u0026gt; n - i) cout \u0026lt;\u0026lt; o; 11 cout \u0026lt;\u0026lt; endl; 12 } 13 14 return 0; 15} 426 請製作一個程式，輸入一個整數n，列印出2~n之間的所有質數(包含2、n)\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int i, a, b = 0; 6 cin \u0026gt;\u0026gt; a; 7 for (int o = 2; o \u0026lt;= a; o++) { 8 b = 0; 9 for (i = 2; i \u0026lt; o; i++) 10 if (o % i == 0) b = 1; 11 if (b == 0) cout \u0026lt;\u0026lt; o \u0026lt;\u0026lt; \u0026#34; \u0026#34;; 12 } 13 return 0; 14} 這些應該夠你們用幾週了，剩下的有空再繼續更新。\n501 請製作一個程式，輸入一個正整數n，代表接下來共有n個整數，計算其總合\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int i, a, b, c = 0; 6 cin \u0026gt;\u0026gt; a; 7 for (i = 0; i \u0026lt; a; i++) { 8 cin \u0026gt;\u0026gt; b; 9 c += b; 10 } 11 cout \u0026lt;\u0026lt; c; 12 return 0; 13} 502 請製作一個程式，輸入一個正整數n，代表接下來共有n個整數，請輸出最大值\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int i, a, b, c = -100; 6 cin \u0026gt;\u0026gt; a; 7 for (i = 0; i \u0026lt; a; i++) { 8 cin \u0026gt;\u0026gt; b; 9 if (b \u0026gt; c) c = b; 10 } 11 cout \u0026lt;\u0026lt; c; 12 return 0; 13} 503 請製作一個程式，輸入一個正整數n，代表接下來共有n個整數，請輸出最大值的編號\n(如果數字相同以序號小的)\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int i, a, b, c = -99999, d = 0; 6 cin \u0026gt;\u0026gt; a; 7 for (i = 0; i \u0026lt; a; i++) { 8 cin \u0026gt;\u0026gt; b; 9 if (b \u0026gt; c) { 10 c = b; 11 d = i; 12 } 13 } 14 cout \u0026lt;\u0026lt; d; 15 return 0; 16} 504 請製作一個程式，使用者輸入一個正整數n，代表接下來共有n個整數，利用泡沫排序法零式，將最大值移至最後方。\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int a, i, j, b; 6 cin \u0026gt;\u0026gt; a; 7 int A[a]; 8 for (i = 0; i \u0026lt; a; i++) { 9 cin \u0026gt;\u0026gt; j; 10 A[i] = j; 11 } 12 for (i = 0; i \u0026lt; a; i++) { 13 if (A[i] \u0026gt; A[i + 1]) { 14 b = A[i]; 15 A[i] = A[i + 1]; 16 A[i + 1] = b; 17 } 18 cout \u0026lt;\u0026lt; A[i] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; 19 } 20 21 return 0; 22} 505 請製作一個程式，使用者輸入一個正整數n，代表接下來共有n個整數，利用泡沫排序法由小到大排序。\n1#include\u0026lt;iostream\u0026gt; 2 3using namespace std; 4int main() { 5 int a, i, j, b; 6 cin \u0026gt;\u0026gt; a; 7 int A[a]; 8 for (i = 0; i \u0026lt; a; i++) { 9 cin \u0026gt;\u0026gt; j; 10 A[i] = j; 11 } 12 for (j = 0; j \u0026lt; a - 1; j++) { 13 for (i = 0; i \u0026lt; a; i++) { 14 if (A[i] \u0026gt; A[i + 1]) { 15 b = A[i]; 16 A[i] = A[i + 1]; 17 A[i + 1] = b; 18 } 19 } 20 21 } 22 for (j = 0; j \u0026lt; a; j++) cout \u0026lt;\u0026lt; A[j] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; 23 return 0; 24} 506 請製作一個程式，使用者輸入一個正整數n，代表接下來共有n個整數，利用選擇排序法零式，將最小值移至最前方。\n507 請製作一個程式，使用者輸入一個正整數n，代表接下來共有n個整數，利用選擇排序法由小到大排序。\n508 請製作一個程式，使用者輸入一個正整數n，代表接下來共有n個整數，找出中位數。\n509 請製作一個程式，使用者輸入一個正整數n，代表接下來共有n個整數，找出眾數。\n510 請製作一個程式，輸入一個正整數n，代表接下來共有n個整數，請檢查該數列是否等差、等比或都不是\n","link":"https://emtech.cc/post/sysh_cpp/","section":"post","tags":["C++"],"title":"【C++】常見題目解答"},{"body":"","link":"https://emtech.cc/tags/c++/","section":"tags","tags":null,"title":"C++"},{"body":"","link":"https://emtech.cc/categories/development/","section":"categories","tags":null,"title":"Development"},{"body":"用PDF Toolkit (pdftk)一行指令完成各種PDF處裡！\n因為這是一個終端機用指令執行的套件，所以請開啟你的終端機(Terminal/Termux/Command)並用任意一個套件軟體安裝它。\nMac 安裝 比如說mac可以用brew\n1brew install pdftk PDF Toolkit (pdftk) 開發者:pdflabs 軟體類型:終端機套件 網址:www.pdflabs.com 安卓安裝 這裡提供安卓系統的安裝方法。請先到F-Droid下載Termux來模擬終端機。你可以直接下載apk或先下載F-Droid再下載。記得不要去Google Play下載，會有問題。\nTermux 開發者:Termux 軟體類型:安卓應用程式 官網:termux.com 安裝網址:F-Droid 進去後貼上這一串。問你什麼就好好好或 enter就好了。看我多用心給你複製鍵就算了還全部合成一行指令。\n1pkg update \u0026amp;\u0026amp; pkg upgrade \u0026amp;\u0026amp; pkg install pdftk \u0026amp;\u0026amp; termux-setup-storage Windows 安裝 windows使用者可以先安裝Chocolatey。方法是用管理員身分開啟PowerShell，接著輸入這兩串指令。\n1Set-ExecutionPolicy AllSigned 輸入完按enter\n1Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://community.chocolatey.org/install.ps1\u0026#39;)) 輸入完按enter，如果問你要不要繼續就按A然後enter。安裝pdftl請輸入\n1choco install pdftk 輸入完按enter，如果問你要不要繼續就按A然後enter即可。\n使用教學 請先移動到存放檔案的資料夾。比如說你是使用Termux想到你的下載資料夾\n1cd storage/downloads 你就可以開始使用啦！下面列出幾個常用的功能。\n合併多個 PDF 文件 pdftk 可以將多個 PDF 檔案合併成一個檔案。比如下面的例子：\n1pdftk 1.pdf 2.pdf 3.pdf cat output 123.pdf 或者使用檔案控制代碼這樣就能控制順序：\n1pdftk A=1.pdf B=2.pdf cat A B output 12.pdf 下面的例子使用了檔案萬用字元了。*代表所有的意思，比如說*.pdf就是所有.pdf結尾的檔案。\n1pdftk *.pdf cat output combined.pdf 下面的例子將多個檔案的多頁提取出來生成一個新的 PDF 檔案：\n1pdftk A=one.pdf B=two.pdf cat A1-7 B1-5 A8 output combined.pdf 小提醒 注:檔名一定要正確,有時看著一樣確還差個/，最好使用Tab鍵來自動補全。\n將 PDF 檔案中的一部分取出生成一個新檔案 pdftk 可以隨意刪除或旋轉頁面。下面是一個把指定頁碼的頁面移出pdf文件的範例。\n1pdftk new.pdf cat 1-96 98-end output new1.pdf 新生成的 new1.pdf 文件不包含頁碼為 97 的頁面。cat 選項後跟的引數用以指定頁碼範圍和頁面方向的限定條件。1-96 表示從 1 到 96 頁，98-end 表示從 98 頁至文件末尾。所以輸出的新 pdf 文件不包含頁碼為 97 的頁面。\n除了示例中的具體數值，還可使用一些限定字元。odd 和 even 表示奇偶頁碼。N、S、E、W、L、R、D 表示文件版面的旋轉角度（N: 0，E: 90，S: 180，W: 270，L: -90，R: +90，D: +180）。比如說\n1-6odd 表示 1，3，5 1-6even 表示 2，4，6 1-endE 表示整篇文件所有頁面都旋轉 90 度 90 度旋轉 PDF 檔案的第一頁 選轉方向可以選 \u0026quot;north\u0026quot; \u0026quot;south\u0026quot; \u0026quot;east\u0026quot; \u0026quot;west\u0026quot; \u0026quot;left\u0026quot; \u0026quot;right\u0026quot; 或 \u0026quot;down\u0026quot;\n記得要寫旋轉的頁面在關鍵字前\n1pdftk in.pdf cat 1right 2-end output out.pdf 旋轉整個文件 180 度 1pdftk in.pdf cat 1-endS out.pdf 折分文件，將 PDF 檔案的每一頁輸出成一個 PDF 檔案，輸出檔案預設命名為 pg/_0001.pdf pg/_0002.pdf 等等 1pdftk in.pdf burst 也可以指定輸出檔名，比如下面的例子：\n1pdftk in.pdf burst output page_%1d.pdf PDF 檔案加密和解密 pdftk 可以對現有 PDF 檔案進行基於密碼的加解密，也就是說對現有的加密的 PDF 檔案解密需要提供解密密碼，pdftk 不是強力破解工具。\npdftk 可以設定兩種不同的密碼，稱為：owner password 和 user password。owner password 限制了使用者是否可以對 PDF 檔案列印、修改、拷貝等。而如果設定了 user password，使用者就必須提供密碼才能察看 PDF 檔案。\nPDF 檔案可以採用 40 位加密或 128 位加密，通過使用命令選項 encrypt/_40bit 或 encrypt/_128bit 可以指定加密演算法的位數。如果不指定預設採用 128 位加密。\n權限 使用者的許可權可以使用 allow 命令選項設定，可以設定的許可權如下：\nPrinting：允許高質量列印 DegradedPrinting：允許高質量列印 ModifyContents：允許修改檔案內容 CopyContents：允許複製 ModifyAnnotations：允許添加註釋 FillIn：允許填入資料 AllFeatures：允許所有特性 加解密 與加解密相關的命令語法總結如下：\n1pdftk \u0026lt;檔案\u0026gt; 2 3 [請輸入密碼] 4 5 cat 6 7 [output 檔案名] 8 9 [encrypt_40bit | encrypt_128bit] 10 11 [allow 權限] 12 13 [owner_pw 擁有者密碼] 14 15 [user_pw 使用者密碼] 下面是幾個例子：\n1pdftk a.pdf output b.pdf owner_pw foopass 2 3pdftk a.pdf output b.pdf owner_pw foo user_pw baz 4 5pdftk a.pdf output b.pdf owner_pw foo user_pw baz allow printing 6 7pdftk secured.pdf input_pw foopass output unsecured.pdf 合併兩個 PDF 文件，其中有一個是加密的 在合併時要使用控制代碼選項來指定密碼。下面是一個示例，shortsec.pdf 是一個加密過的 PDF 文件，在合併時如果沒有指定密碼，則會出錯：\n1pdftk A=a.pdf B=b.pdf cat output combined.pdf 2 3Error: Failed to open PDF file: 4 5 a.pdf 6 7 OWNER PASSWORD REQUIRED, but not given (or incorrect) 8 9Errors encountered. No output created. 10 11Done. Input errors, so no output created. 下面通過控制代碼選項指定密碼則可以正常合併:\n1pdftk A=a.pdf B=b.pdf input_pw A=foopass cat output combined.pdf 新增 PDF 背景水印或前景圖章 將一個 PDF 檔案的水印新增到另一個 PDF 檔案中。\n1pdftk in.pdf background back.pdf output out.pdf pdftk 只提取有水印的 PDF 檔案的第一頁作為水印。\nstamp 命令選項與 background 類似，只是疊加在輸出檔案的上面（background 是疊加在輸出檔案的下面的）。\n1pdftk in.pdf stamp back.pdf output out.pdf 新增/提取 PDF 檔案附件 可以將任意檔案新增到 PDF 檔案中，比如下面的例子：\n1pdftk in.pdf attach_files 1.html 2.html to_page 6 output out.pdf 下面的例子將附件解壓縮到當前資料夾：\n1pdftk report.pdf unpack_files output . 修復損壞了的 PDF 檔案 下面的例子試圖修復一個損壞了的檔案：\n1pdftk broken.pdf output fixed.pdf 這篇資訊量有點大，建議可以加入書籤需要的時候再來看一下\n參考資料\n","link":"https://emtech.cc/post/pdftk/","section":"post","tags":["Terminal","Windows","Android"],"title":"【pdftk】萬能PDF工具！一行指令合併 旋轉 提取 "},{"body":"","link":"https://emtech.cc/tags/terminal/","section":"tags","tags":null,"title":"Terminal"},{"body":"非常歡迎您光臨毛哥EM資訊密技（以下簡稱本網站），為了讓您能夠安心的使用本網站的各項服務與資訊，特此向您說明本網站的隱私權保護政策，以保障您的權益，請您詳閱下列內容：\n一、隱私權保護政策的適用範圍 隱私權保護政策內容，包括本網站如何處理在您使用網站服務時收集到的個人識別資料。隱私權保護政策不適用於本網站以外的相關連結網站，也不適用於非本網站所委託或參與管理的人員。\n二、個人資料的蒐集、處理及利用方式 當您造訪本網站或使用本網站所提供之功能服務時，我們將視該服務功能性質，請您提供必要的個人資料，並在該特定目的範圍內處理及利用您的個人資料；非經您書面同意，本網站不會將個人資料用於其他用途。 本站使用Google Analytics來蒐集網站的使用者資訊來提供您更優質的內容及服務。 本網站在您使用服務信箱、問卷調查等互動性功能時，會保留您所提供的姓名、電子郵件地址、聯絡方式及使用時間等。 於一般瀏覽時，伺服器會自行記錄相關行徑，包括您使用連線設備的IP位址、使用時間、使用的瀏覽器、瀏覽及點選資料記錄等，做為我們增進網站服務的參考依據，此記錄為內部應用，決不對外公佈。 為提供精確的服務，我們會將收集的問卷調查內容進行統計與分析，分析結果之統計數據或說明文字呈現，除供內部研究外，我們會視需要公佈統計數據及說明文字，但不涉及特定個人之資料。 三、資料之保護 本網站架設於Github，設有防火牆、防毒系統等相關的各項資訊安全設備及必要的安全防護措施，加以保護網站及您的個人資料採用嚴格的保護措施，只由經過授權的人員才能接觸您的個人資料，相關處理人員皆簽有保密合約，如有違反保密義務者，將會受到相關的法律處分。 如因業務需要有必要委託其他單位提供服務時，本網站亦會嚴格要求其遵守保密義務，並且採取必要檢查程序以確定其將確實遵守。 四、網站對外的相關連結 本網站的網頁提供其他網站的網路連結，您也可經由本網站所提供的連結，點選進入其他網站。但該連結網站不適用本網站的隱私權保護政策，您必須參考該連結網站中的隱私權保護政策。\n五、與第三人共用個人資料之政策 本網站絕不會提供、交換、出租或出售任何您的個人資料給其他個人、團體、私人企業或公務機關，但有法律依據或合約義務者，不在此限。\n前項但書之情形包括不限於：\n經由您書面同意。 法律明文規定。 為免除您生命、身體、自由或財產上之危險。 與公務機關或學術研究機構合作，基於公共利益為統計或學術研究而有必要，且資料經過提供者處理或蒐集著依其揭露方式無從識別特定之當事人。 當您在網站的行為，違反服務條款或可能損害或妨礙網站與其他使用者權益或導致任何人遭受損害時，經網站管理單位研析揭露您的個人資料是為了辨識、聯絡或採取法律行動所必要者。 有利於您的權益。 本網站委託廠商協助蒐集、處理或利用您的個人資料時，將對委外廠商或個人善盡監督管理之責。 六、Cookie之使用 為了提供您最佳的服務，本網站會在您的電腦中放置並取用我們的 Cookie，若您不願接受 Cookie 的寫入，您可在您使用的瀏覽器功能項中設定隱私權等級為高，即可拒絕 Cookie 的寫入，但可能會導致網站某些功能無法正常執行。\n七、隱私權保護政策之修正 本網站隱私權保護政策將因應需求隨時進行修正，修正後的條款將刊登於網站上。\n如果有任何問題歡迎透過instagram聯絡：@em.tec.blog\n","link":"https://emtech.cc/policy/","section":"","tags":null,"title":"隱私權政策"},{"body":"這一篇文章我會用簡單好理解的方式讓你學會基本的使用Github和Git。且複製貼上就能成為工程師系列所搭建的網站都可以免費架設在Github\n這篇文章拖很久，8月就在寫了一直沒空更新\nGithub是什麼 Github可以說是程式的雲端硬碟或IG。註冊帳號就可以上傳檔案，可以自己決定要不要讓別人看到。當然也可以留言、按讚（星星）、或轉發改編。 上傳檔案除了可以像社群一樣用網頁版直接傳之外，因為通常一個專案裡面會有很多資料夾和檔案，所以通常會用一個叫做git的技術來實現同步檔案。\nGithub的單位是使用者/倉庫/檔案。我們會在電腦裡放一個資料夾裝一個專案，並透過git來同步 如果你還是有點不懂，實際操作一次就知道了。\nGit是什麼 你也可以想像Github是物流中心，而git就是物流。我們透過物流來傳資料到Github的倉庫合獲取檔案。git厲害的地方是每次上傳或下載時它會比較差異，只傳送不同的檔案。除了節省時間流量之外，因為記錄了每一次的更動，所以可以進行版本控制。包括釋出不同版本，和復原到指定版本。\n註冊Github並建立倉庫 進入github.com點擊Sign Up註冊跟著步驟填入資訊就好了。記得用戶名會變成你的免費網域（用戶名.github.io）所以記得好好取 ಡ ͜ ʖ ಡ\n成功註冊驗證完你可以編輯一下你的個人資訊（自我介紹，頭像之類的）。好了之後點擊New Repo，並命名為用戶名.github.io讓裡面的檔案自動變成網站。一定要一字不漏一樣喔，但如果只是要存檔案而已取什麼名字都可以。 底下有幾個選項\nDescription (optional)：*這個專案是什麼？在你的repo裡顯示，在列表中回顯示為副標題。*有沒有都可以 Add a README file：*添加一個README.md，在你的repo裡顯示，通常會寫一些介紹或使用說明。要寫多長都可以。*有沒有都可以 Add .gitignore：*在下載/上傳的時候忽略特定的檔案。比如說你用一個檔案存放你的私人密碼，你不希望這個上傳到網路上讓每個人都能看到對吧。*選擇None即可 Choose a license：*告訴別人他可以對你的程式做什麼。我是使用Apache License 2.0。你可以閱讀這些條款看哪個符合你的想法，很多人會用MIT的條款。*有沒有都可以 成功建立之後你可以看見有一個剛才系統建立的README.md。這個是別人進入這個專案網頁會看到的這個說明文件，可以先不用管它。每次我們上傳完檔案後它都會需要部署一下。大概等個三十秒就可以進去你的網站了。網站就是使用者.github.io。\n接下來我們來讓這個專案同步到你的裝置裡的某個資料夾吧。\n在開始之前我們來講一下Git的邏輯原理\nGit邏輯 如果要從網上下載下來檔案我們要clone（複製）下來 如果clone之後有更新的版本想下載直接pull就會把新增的東西下載下來。 而要上傳檔案就像剛才說寄包裹一樣。（比較好理解的方式，不寫那些專業術語）\n我們要先填寫寄信人（我們）的資訊，還有收件人的地址（網址）。這個只需要寫一次就可以了 接下來我們要add（選擇）要傳送的資料。通常會選擇傳送所有你編輯過的地方。 選好之後我們到把包裹commit（打包起來），並留下一串訊息（必填，簡單講你做了什麼編輯，之後比較好看） 最後把它push（寄）出去就好囉 底下我們來實際嘗試下載和上傳檔案\n基本設定及clone 使用Github Destop（限電腦，以PC做示範） Gitub Destop 開發者:Github (Microsoft) 軟體類型:免費軟體 網址:Github Github Destop可以讓你有按鈕可以按，不用打指令也可以使用git。多少可以節省一點時間，但看起來就沒有那麼酷（ 下載Github Destop並安裝，原則上就是你也懂的一直下一步。安裝成功後他會叫你輸入剛才講的個人資訊，並且請你登入你的Github帳號。\n登入完後他會請你選擇一個專案來clone。沒錯就是剛才講的複製下載檔案。預設位置會放到你的文件資料夾/Github/專案名裡面。按下Ctrl+Shift+E即可直接打開資料夾。\n使用Git（所有裝置適用） 如果電腦裡沒有git可以上網搜尋git來下載。\n下載完請打開任意終端機（如cmd）並輸入這兩個指令。就是剛才寄包裹所說的寄信人：\n1git config --global user.name \u0026#34;\u0026lt;使用者名字\u0026gt;\u0026#34; 2git config --global user.email \u0026#34;\u0026lt;電子信箱\u0026gt;\u0026#34; 這個指令只需要打一次就可以了。如果需要更改就再輸入一次指令即可。\n使用git來下載檔案非常簡單。只需要輸入git clone \u0026lt;url\u0026gt;就完成了。 比如說我想下載Wiwi官大為做的NICE BASEBALL來用鋼琴玩打棒球：\n1git clone 假設你想要確定是否和Github的內容是一樣的，點擊fetch(git fetch)它就會幫你自動比較。點擊後上面寫的數字就是不同檔案的數量。再次點擊pull(git pull)就會將這兩個版本合併了。\n上傳檔案 接著我們來嘗試建立一個檔案。請在專案資料夾裡面點擊右鍵，建立一個文字檔案，並命名為index.html。當你在網址中沒有指定要讀取那個檔案名時會自動導到那個資料夾的index.html\n如果你看到是一個Chrome或Edge的符號，請點擊右鍵，開啟，並選擇你的文字編輯器如Sublime Text。如果沒有可以直接選擇記事本來打開。你可以在這裡嘗試打點東西或者貼上以上程式碼。\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;head\u0026gt; 3 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; 4 \u0026lt;title\u0026gt;歡迎來到我的網站\u0026lt;/title\u0026gt; 5\u0026lt;/head\u0026gt; 6\u0026lt;body\u0026gt; 7 \u0026lt;h1\u0026gt;歡迎來到我的網站\u0026lt;/h1\u0026gt; 8 \u0026lt;h2\u0026gt;我很開心\u0026lt;/h2\u0026gt; 9 \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;https://emtech.cc/\u0026#34;\u0026gt;毛哥EM資訊密技\u0026lt;/a\u0026gt;的範例程式\u0026lt;/p\u0026gt; 10\u0026lt;/body\u0026gt; 相信你一定把最後一行文字刪了。你可以用瀏覽器打開看看這個網站（HTML檔），你會發現HTML只不過是一個要用瀏覽器打開的word檔而已！\n上傳到Github 現在我們來將它上傳到Github吧。回到Github Destop或你的終端機（確認是在你的專案），Github Destop上你會發現它知道你新增了一個檔案。而git需要先輸入git add .才會比較你有沒有更動檔案。那個.代表所有的檔案。而如果你只要打包某些檔案可以直接輸入檔名如git add index.html或指定副檔名如git add .html。\n我們在左下角那個小的輸入框打入這次你做的事（使用git請打指令git commit -m '\u0026lt;訊息\u0026gt;），或是你可以發現它預設給你打了一個訊息，懶得打直接按Commit也可以。\n打包完之後我們可以上傳囉。點擊push就好了（指令為git push），是不是超級簡單w。如果使用終端機且沒有設定SSH會叫你輸入Github的帳號密碼。且如果你輸入你真的密碼可能會有兩步驟驗證的問題，所以在這裡我們有兩個辦法解決。\nGit - 辦一個密碼 到Github的設定生成一個看起來像亂碼的密碼。大概長這樣\n1ghp_5xcCouSaccQcDw87FRFL6B0IaX0nzJ4MdWaK 在每次需要輸入密碼時請貼上這串密碼\n密碼好麻煩 用SSH SSH像是一個信物。我們生成一個SSH，並告訴Github說只要有拿這個東西就有權限做哪些事。如果你是使用Github Destop的話上傳時不用輸入密碼。因為Github自動幫你生成了SSH並存在你的帳號。\n如何設定可以先參考這篇文章或是官方文件\n衝突！？ 假如你編輯了檔案，但是在你還沒上傳時別人已經改了內容（新增/編輯/刪除檔案）這個時候你就沒辦法上傳（push）了。我們會看到這串訊息\n1! [rejected] main -\u0026gt; main (fetch first) 2error: failed to push some refs to \u0026#39;github.com:EM-Tec/emtech.cc.git\u0026#39; 3hint: Updates were rejected because the remote contains work that you do 4hint: not have locally. This is usually caused by another repository pushing 5hint: to the same ref. You may want to first integrate the remote changes 6hint: (e.g., \u0026#39;git pull ...\u0026#39;) before pushing again. 7hint: See the \u0026#39;Note about fast-forwards\u0026#39; in \u0026#39;git push --help\u0026#39; for details. 我們必須要先pull最新的版本下來。不過在我們使用git pull指令前我們需要告訴git要怎麼處理檔案\n合併：git config pull.rebase false 不管那個版本：git config pull.rebase true 放棄剛才編輯的：git config pull.ff only 我們可以用git config --global而不是git config來告訴git不管哪個專案都要這樣處理。\n","link":"https://emtech.cc/post/github-and-git/","section":"post","tags":["終端機","Git","Github"],"title":"【Github Git】超白話簡單入門"},{"body":"SSH是一種簡單的登入方式。以我來說在使用git來上傳檔案到Github時，因為我在手機生成並設定好了ssh，不用每次上傳都需要輸入帳號和全是亂碼的驗證密碼。 不過也可以設定在使用SSH登入的時候需要輸入一組passpharase，來保障你的安全。不過如果你想要更改或取消密碼怎麼辦呢\ncd到ssh資料夾 這裡以Android的Termux為例。ssh資料夾在~/.ssh（其他作業系統也大同小異）\n1cd .ssh 更改密碼 如果你在建立的時候沒有自訂名稱（直接按enter，預設為id_rsa），可直接打下面這串指令\n1change-ssh-passpharase 如果你要指定ssh的話後面要加一小串\n1ssh-keygen -p -f \u0026lt;檔名\u0026gt; 如果你之前設定過密碼會看到Enter old passphrase:，需要先輸入一次之前的密碼。不然直接輸入新密碼兩次就好了。如果不想要設定就直接按enter就好了。\n如果看到以下這一串\n1Failed to load key id_rsa: incorrect passphrase supplied to decrypt private key 代表你剛才輸錯密碼，請重新輸入一次。\n","link":"https://emtech.cc/post/change-ssh-passphrase/","section":"post","tags":["終端機","Termux"],"title":"【終端機】輕鬆更改SSH的驗證碼passpharase"},{"body":"","link":"https://emtech.cc/tags/termux/","section":"tags","tags":null,"title":"Termux"},{"body":"使用多個螢幕可以使工作效率大幅提升。不過如果使用Win+D來隱藏視窗、會一次隱藏所有螢幕的所有的視窗。 不過透過ShowDesktopPerMonitor可以模擬Win+D的隱藏視窗。除了可以分開螢幕控制以外，它的隱藏視窗是連工作列都看不到...（要怎麼使用就看你了！）\n安裝 這個專案是開源在Github上的，基本上可以安心使用。雖然已經很久沒有更新了，但目前沒有任何問題。\nShowDesktopPerMonitor 開發者:CryptKat 類型:免費開源軟體 網址:Github 下載連結 設定 請先到上面下載連結下載ShowDesktopPerMonitor_1.0.zip並解壓縮。解壓縮後雙擊直接打開就可以了。\n如果你是使用Windows 10可以將“Xbox Game Monitoring”關閉（原Win+G）,，預防你的G會沒辦法按。 請到註冊表的HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\xbgm\\Start並將數值改成4\n多個桌面 如果你會使用多個桌面（Ctrl+Win+D)的話你會發現當你按下Win+D要顯示的時候，不只這個桌面，所有這個螢幕的桌面視窗都會跳出來。\n可以說這是一個Bug，也可以說是一個特別的功能\n關閉軟體 如果要讓它停止運行，請點擊螢幕右下角往上的箭頭，對ShowDesktopPerMonitor圖示點擊右鍵，並結束它\n","link":"https://emtech.cc/post/showdesktoppermonitor/","section":"post","tags":["Windows"],"title":"【ShowDesktopPerMonitor】進化Win+D！多螢幕不互相干擾/所有桌面視窗一鍵顯示"},{"body":"每次寫完文章還要打指令生成網站，麻煩死了！讓Github Action幫你自動部署，寫完文章直角上傳就好了！\n在開始之前 請先建立好部落格，並且將整個檔案的資料夾上傳到Github的用戶名/用戶名.github.iorepository 記住不是裡面的public子資料夾，是整個資料夾喔\n要解決的問題 平常我們寫完一篇文章，要先打指令生成靜態網站（生成在public資料夾裡面），再把它上傳到Github上面。 除了過程十分的麻煩以外，因為網站資料是儲存在你自己的電腦裡面，所以假設你更變工作環境（比如說在手機上）你就沒辦法進行編輯。\n既然每次生成網站的指令都是一樣的，不如我們來建立一個Github Action來讓它自動部署吧\n設定 Github 設定 Access Token 首先我們要先建立一個Repository 的 Access Token。這是一把鑰匙，我們要把鑰匙給Github Action的程式它才可以部署我們的網站\n請先到Settings/Developer Settings下的Personal access tokens生成一組Access Token。建議scope直接選repo的所有權限。\n添加 Secrets 因為我們的Github Action程式碼是公開的，但是我們不想要讓其他人看到剛才的那組Access Token，所以我們要建立一組Secret。當我們在程式說要「那個東西」的時候，他就會知道要來這裡找這組密碼。\n請到Settings/Secrets新增一組 Secrets，我這邊叫做 ACCESS_TOKEN，之後在腳本上會用到。\n新增Workflow 依序點擊Action，New，set up a workflow yourself，並貼上以下程式。名稱可以自己取，貼上完之後點擊Start Commit。\n程式意思是當main分支有push操作時（就是你上傳或更變檔案），會生成靜態網頁。剛才不是說會生成在public這個資料夾，我們把它推送到 gh-pages 這個分支（當然你也可以自己取名）\n1name: create 2 3on: 4 push: 5 branches: 6 - main # 當main分支有push操作時 7 8jobs: 9 deploy: 10 runs-on: ubuntu-latest 11 steps: 12 - uses: actions/checkout@v2 13 with: 14 submodules: true # 找尋Hugo主題(true OR recursive) 15 fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod 16 17 - name: Setup Hugo 18 uses: peaceiris/actions-hugo@v2 19 with: 20 hugo-version: \u0026#39;0.89.4\u0026#39; # hugo 版本 21 extended: true 22 23 - name: Build 24 run: hugo --minify 25 26 - name: Deploy 27 uses: peaceiris/actions-gh-pages@v3 28 with: 29 github_token: ${{ secrets.HUGO_DEPLOY_TOKEN }} 30 PUBLISH_BRANCH: gh-pages # 推送到 gh-pages 分支 31 PUBLISH_DIR: ./public # hugo 生成的目錄 32 commit_message: ${{github.event.head_commit.message }} 新增完成後它會自己跑一次。不過我們還需要做一個設定。生成的網站是放在gh-pages這個分支，我們要輸入網址時，去讀取這個分支而不是main。所以請到Settings/Pages/Branch更改\n這樣就大公告成囉！記得每次更新完部落格Github Action都需要大約30秒的執行時間才會完成部署。如果你想要查看它的進度狀態可以點擊最新紀錄的橘點看目前的即時狀態。如果變成綠色就是部署成功，如果是鴻森代表有問題（通常是文章中的語法有語法錯誤）。\n","link":"https://emtech.cc/post/hugo-githubaction/","section":"post","tags":["Github","Hugo"],"title":"【Github Action】自動部署你的Hugo網站"},{"body":"","link":"https://emtech.cc/tags/hugo/","section":"tags","tags":null,"title":"Hugo"},{"body":"直接把整個試算表連結發給別人除了要載入很久且會出現一堆不需要的按鍵，整個畫面很醜很沒有質感。而且如果你把其他隱私的資料也放在裡面，都會被一次看光光。那我們就來幫試算表包個糖衣吧\n當你要分享表格給其他人看時，使用Google試算表把連結貼給別人是一個簡單快速的方法。除了可以套各種公式，修改資料會馬上同步，也可以開設權限讓其他人一起編輯。\n罷特如果只是要給別人看資料比如說客戶名單、訂單資訊、直接把整個試算表連結發給別人除了要載入很久且會出現一堆不需要的按鍵，整個畫面很醜很沒有質感。而且如果你把其他隱私的資料也放在裡面，都會被一次看光光。 怎麼辦？幫它抹上一層糖衣！ 我們來做一個超簡單的小網頁讓它自己去表格抓你要的資料來顯示。我們會寫一些程式(HTML,CSS,Js）不過如果你不會也沒關系w只要跟著步驟複製貼上就可以了。今天我要來幫我的畫家朋友薩波來做一個網站讓他的委託人可以查看他畫圖的進度，還要讓電腦排序讓已經完成的委託排在下面。\n薩波委託進度 開發者:毛哥EM(我) 類型:網站 網址:毛哥EM的基地\n架一個網站！ 你可以使用任何一個可以給你存放網站代碼的地方，比如說Github。\n我從Codepen上找到了一個很好看的表格模板來做修改。它在螢幕尺寸太窄的時候會用不同的版面來顯示，保持使用者體驗。你也可以找其他的模板或者是自己建立一個。\nSee the Pen Responsive Tables using LI by Faiz Ahmed (@faaezahmd) on CodePen. 我在網站上增加了一點文字、顏色(CSS)、超連結(\u0026lt;a\u0026gt;)、還有圖片、縮圖。以及簡單的出場動畫(animate.css)來炫技。\n1\u0026lt;!DOCTYPE html\u0026gt; 2 \u0026lt;head\u0026gt; 3 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; 4 \u0026lt;!--下面這行是標題--\u0026gt; 5 \u0026lt;title\u0026gt;薩波進度查詢表\u0026lt;/title\u0026gt; 6 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34; /\u0026gt; 7 \u0026lt;!--下面這行是縮圖，可以換網址--\u0026gt; 8 \u0026lt;link href=\u0026#34;https://Edit-Mr.github.io/code/sabooo/thumbnail.png\u0026#34; rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/x-icon\u0026#34;\u0026gt; 9 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;https://Edit-Mr.github.io/css/Animate.css\u0026#34; media=\u0026#34;screen\u0026#34;\u0026gt; 10 \u0026lt;!--下面這行是主題顏色，可以自由更換（支援HEX）--\u0026gt; 11 \u0026lt;meta name=\u0026#34;theme-color\u0026#34; content=\u0026#34;orange\u0026#34; /\u0026gt; 12 \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/jquery/1.11.1/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 13 \u0026lt;!--下面這些是樣式，可以自由更換顏色之類的--\u0026gt; 14 \u0026lt;style\u0026gt; 15 @import url(https://fonts.googleapis.com/earlyaccess/cwtexyen.css); 16 17 body { 18 font-family: \u0026#34;Arial\u0026#34;,\u0026#34;cwTeXYen\u0026#34;,\u0026#34;微軟正黑體\u0026#34;; 19 background-color: #fee5bd; 20 } 21 22 .container { 23 max-width: 1000px; 24 margin-left: auto; 25 margin-right: auto; 26 padding-left: 10px; 27 padding-right: 10px; 28 font-size: 25px; 29 } 30 31 h2 { 32 font-size: 23px; 33 margin: 0; 34 text-align: center; 35 font-weight: 150; 36 color: #e69137; 37 animation: fadeIn; 38 animation-duration: 1.5s; 39 animate-delay: 0.9s; 40 } 41 42 h1 { 43 font-size: 35px; 44 margin: 20px 0 0 0; 45 text-align: center; 46 size: 30px; 47 color: #351c75; 48 animation: zoomIn; 49 animation-duration: 1s; 50 } 51 52 li { 53 border-radius: 3px; 54 padding: 25px 30px; 55 display: flex; 56 justify-content: space-between; 57 margin-bottom: 25px; 58 } 59 60 .responsive-table .table-header, 61 .table-note { 62 background-color: #f9a756; 63 font-size: 30px; 64 margin-top: 0px; 65 padding: 25px 30px 25px 30px; 66 animation: slideInUp; 67 animation-duration: 1.5s; 68 } 69 70 .table-note { 71 font-size: 20px; 72 display: none; 73 } 74 75 .responsive-table { 76 margin: 0; 77 padding: 0; 78 } 79 80 .responsive-table .table-row { 81 background-color: #fff; 82 box-shadow: 0px 0px 9px 0px rgba(0, 0, 0, 0.1); 83 animation: backInLeft; 84 animation-duration: 1.5s; 85 } 86 .table-row{} 87 .responsive-table .col-1 { 88 flex-basis: 25%; 89 } 90 91 .responsive-table .col-2 { 92 flex-basis: 30%; 93 } 94 95 .responsive-table .col-3 { 96 flex-basis: 30%; 97 } 98 99 .responsive-table .col-4 { 100 flex-basis: 15%; 101 } 102 103 @media all and (max-width: 767px) { 104 .responsive-table .table-header { 105 display: none; 106 } 107 108 .table-note { 109 display: block; 110 } 111 112 .responsive-table li { 113 display: block; 114 } 115 116 .responsive-table .col { 117 flex-basis: 100%; 118 } 119 120 .responsive-table .col { 121 display: flex; 122 padding: 10px 0; 123 } 124 125 .responsive-table .col:before { 126 color: #6c7a89; 127 padding-right: 10px; 128 content: attr(data-label); 129 flex-basis: 50%; 130 text-align: right; 131 } 132 } 133 134 .header { 135 width: 150px; 136 display: block; 137 margin: auto; 138 animation: slideInUp; 139 animation-duration: 1.5s; 140 } 141 142 .finished { 143 color: green; 144 } 145 146 p, 147 a { 148 text-align: center; 149 font-size: 15px; 150 color: #6c7a89; 151 text-decoration: none; 152 animation: fadeIn; 153 animation-duration: 1.5s; 154 } 155 \u0026lt;/style\u0026gt; 156 \u0026lt;/head\u0026gt; 157 158 \u0026lt;body\u0026gt; 159 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 160 \u0026lt;h1\u0026gt;薩波2022委託與贈圖表\u0026lt;/h1\u0026gt; 161 \u0026lt;h2\u0026gt;這些不代表畫的順序 會跳著畫\u0026lt;/h2\u0026gt; 162 \u0026lt;img src=\u0026#34;header.png\u0026#34; class=\u0026#34;header\u0026#34; /\u0026gt; 163 \u0026lt;li class=\u0026#34;table-note\u0026#34;\u0026gt; 164 如果要一次看完整表格請切換到電腦版網頁喔 165 \u0026lt;/li\u0026gt; 166 \u0026lt;ul class=\u0026#34;responsive-table\u0026#34;\u0026gt; 167 \u0026lt;li class=\u0026#34;table-header\u0026#34;\u0026gt; 168 \u0026lt;div class=\u0026#34;col col-1\u0026#34;\u0026gt;委託人姓名\u0026lt;/div\u0026gt; 169 \u0026lt;div class=\u0026#34;col col-2\u0026#34;\u0026gt;委託項目\u0026lt;/div\u0026gt; 170 \u0026lt;div class=\u0026#34;col col-3\u0026#34;\u0026gt;付款狀態\u0026lt;/div\u0026gt; 171 \u0026lt;div class=\u0026#34;col col-4\u0026#34;\u0026gt;進度狀態\u0026lt;/div\u0026gt; 172 \u0026lt;/li\u0026gt; 173 資料載入中 174 \u0026lt;/ul\u0026gt; 175 \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; · Facebook\u0026lt;a href=\u0026#34;https://instagram.com/\u0026#34;\u0026gt;Instagram\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;Made by \u0026lt;a href=\u0026#34;https://github.com/Edit-Mr\u0026#34;\u0026gt;Edit Mr.\u0026lt;/a\u0026gt; with❤\u0026lt;/p\u0026gt; 176 \u0026lt;/div\u0026gt; 177 \u0026lt;/body\u0026gt; 後端 GAS! GAS! 好了前端做好了接下來我們來建另一個網站讓剛才那個網站來這裡讀取資料。為了方便起見我們在給資料的時候直接給一個做好的表格讓網站貼上。\n我們先看一下試算表。在這裡我們可以看到每一行資料有5項，其中我希望第5項的資料可以放在付款狀態後面。現在請你先請你複製這個試算表的ID，也就是網址https://docs.google.com/spreadsheets/d/和/之間那一串(如1fjX-prGu0hfb65LCQkrktWa-JavvjSz7tWMmYWAb7RA)。等一下會用到。\n我們會使用GAS(Google App Script)來建立網頁應用程式來讀取表格資料。\nGoogle App Script 開發者:Google 類型:免費網站（可付費升級） 網址:script.google.com\n請建立一個新的專案並貼上以下內容。記得貼上Google Sheet那段ID，並修改自己要的範圍，程式碼裡有詳細的註解。原理是讀取一行行的資料並轉成HTML表格，其中如果狀態是完成的加上一個class讓顏色變綠色。在排序方面我是把完成的和未完成的分成兩個陣列（清單）儲存，在把完成的接在未完成的後面合併。\n小叮嚀 為避免程式碼站太多空間，可能會部分隱藏。請記得展開或直接複製。 1function doGet(){ 2 var spreadsheet = SpreadsheetApp.openById(\u0026#39;1U-Q2XXXXXXXRsrh-QYCXXXXXXXXXQmGQ\u0026#39;); // Sheet id 3 var sheet = spreadsheet.getSheets()[0]; 4 var rowLength = sheet.getLastRow(); 5 var columnLength = sheet.getLastColumn(); 6 var data = sheet.getRange(3,1,rowLength,columnLength).getValues(); 7 var dataExport = [\u0026#39;\u0026lt;li class=\u0026#34;table-header\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;col col-1\u0026#34;\u0026gt;委託人姓名\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;col col-2\u0026#34;++\u0026gt;委託項目\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;col col-3\u0026#34;\u0026gt;付款狀態\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;col col-4\u0026#34;\u0026gt;進度狀態\u0026lt;/div\u0026gt;\u0026lt;/li\u0026gt;\u0026#39;]; 8 var stat, ed=[]; 9 // 一個個加入json 10 for(i in data){ 11 if(data[i][0] != \u0026#34;\u0026#34;){ 12 if (data[i][3]==\u0026#34;完成\u0026#34;){ 13 ed.push(\u0026#39;\u0026lt;li class=\u0026#34;table-row\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;col col-1\u0026#34; data-label=\u0026#34;委託人姓名\u0026#34;\u0026gt;\u0026#39;+data[i][0] 14+\u0026#39;\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;col col-2\u0026#34; data-label=\u0026#34;委託項目\u0026#34;\u0026gt;\u0026#39;+data[i][1] 15+\u0026#39;\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;col col-3\u0026#34; data-label=\u0026#34;付款狀態\u0026#34;\u0026gt;\u0026#39;+data[i][2]+\u0026#34; \u0026#34;+data[i][4] 16+\u0026#39;\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;col col-4 finished\u0026#34; data-label=\u0026#34;進度狀態\u0026#34;\u0026gt;\u0026#39;+data[i][3]+\u0026#39;\u0026lt;/div\u0026gt;\u0026lt;/li\u0026gt;\u0026#39;) 17 }else{ 18 dataExport.push(\u0026#39;\u0026lt;li class=\u0026#34;table-row\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;col col-1\u0026#34; data-label=\u0026#34;委託人姓名\u0026#34;\u0026gt;\u0026#39;+data[i][0] 19+\u0026#39;\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;col col-2\u0026#34; data-label=\u0026#34;委託項目\u0026#34;\u0026gt;\u0026#39;+data[i][1] 20+\u0026#39;\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;col col-3\u0026#34; data-label=\u0026#34;付款狀態\u0026#34;\u0026gt;\u0026#39;+data[i][2]+\u0026#34; \u0026#34;+data[i][4] 21+\u0026#39;\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;col col-4\u0026#34; data-label=\u0026#34;進度狀態\u0026#34;\u0026gt;\u0026#39;+data[i][3]+\u0026#39;\u0026lt;/div\u0026gt;\u0026lt;/li\u0026gt;\u0026#39;) 22 } 23 24 }; 25 }; 26 dataExport=dataExport.concat(ed); 27 // 回傳JSON 28 console.log(dataExport.join(\u0026#34;\u0026#34;)); 29 return ContentService.createTextOutput(dataExport.join(\u0026#34;\u0026#34;)); 30 } 為什麼要分兩個陣列？不要讓未完成的直接插入到最前面？ 我們可以用push()將資料插入到最後面，也可以用unshift()插入到最前面。但是如果用這個方式未完成的清單順序會整個便相反 如順序1234567排序後不會變124589367，而是985421367。\n你可以根據自己的需求決定排法\n做好了之後點擊執行▶️，你會需要授予你的程式讀取資料的權限。因為你寫的程式沒有被Google驗證過所以會顯示不安全，但我相信你不會把你的帳號搞爆，對吧\n接下來我們要部署它，讓它成為一個網站來讓我們抓。這裡選擇網頁應用程式，所有人都以你的身份讀取。按下部署就可以囉\n這裡我們把部署的網址複製起來。如果要做修改除了按儲存之外要記得重新部署成新版本才會更新喔\n接下來我們回到Github的網頁讓他來讀這個表格\n等等，不是做好表格網頁了，直接讓它顯示就好了啊幹嘛那麼麻煩？ 可以當然是可以，姑且不論網址有多長多醜，如果使用Google App Script建設的網站會出現橫幅很醜的一個警告，而且他超長讓你的版面整個跑掉。為了更好的使用者體驗既然都做了就做到底吧！\n前端 讀取資料 最後一步了！我們回到程式碼的head裡面，加入jQuery這個套件讓我們可以少寫幾行\n然後我們修改一下body。程式讀到表格之後會用表格取代class裡面的所有內容。我已在這裡可以寫一些表格讀取到之前會顯示的訊息比如說「資料讀取中...」之類的。\n最後在我們在\u0026lt;/body\u0026gt;前面貼上以下的JavaScript來讀取並顯示表格。記得把網址換成剛剛表格資料的網址喔~\n1\u0026lt;script\u0026gt; 2 //請把下面按這串改成剛才的網址 3 let requestURL = \u0026#34;https://script.google.com/macros/s/AKfycbxq942U9fZK5tR6Vi1OZkr5Hq0Bv_qPSm1rOOYFFZUS_vyrTu60QuW7xmU-d09UpI1XLQ/exec\u0026#34;; 4 let request = new XMLHttpRequest(); 5 request.open(\u0026#34;GET\u0026#34;, requestURL); 6 request.responseType = \u0026#34;text\u0026#34;; 7 request.send(); 8 request.onload = function () { 9 console.log(\u0026#34;載入成功\u0026#34;); 10 $(\u0026#34;p\u0026#34;).addClass(\u0026#39;animate_animated\u0026#39;,\u0026#39;animate_fadeOut\u0026#39;) //動畫 11 $(\u0026#34;.responsive-table\u0026#34;).html(request.response); //用表格取代.responsive-table 12 }; 13 \u0026lt;/script\u0026gt; 最終程式碼 最終的程式碼如下，有沒有超有成就感？\n顯示網站 1\u0026lt;!DOCTYPE html\u0026gt; 2 \u0026lt;head\u0026gt; 3 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; 4 \u0026lt;!--下面這行是標題--\u0026gt; 5 \u0026lt;title\u0026gt;薩波進度查詢表\u0026lt;/title\u0026gt; 6 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34; /\u0026gt; 7 \u0026lt;!--下面這行是縮圖，可以換網址--\u0026gt; 8 \u0026lt;link href=\u0026#34;https://Edit-Mr.github.io/code/sabooo/thumbnail.png\u0026#34; rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/x-icon\u0026#34;\u0026gt; 9 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;https://Edit-Mr.github.io/css/Animate.css\u0026#34; media=\u0026#34;screen\u0026#34;\u0026gt; 10 \u0026lt;!--下面這行是主題顏色，可以自由更換（支援HEX）--\u0026gt; 11 \u0026lt;meta name=\u0026#34;theme-color\u0026#34; content=\u0026#34;orange\u0026#34; /\u0026gt; 12 \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/jquery/1.11.1/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 13 \u0026lt;!--下面這些是樣式，可以自由更換顏色之類的--\u0026gt; 14 \u0026lt;style\u0026gt; 15 @import url(https://fonts.googleapis.com/earlyaccess/cwtexyen.css); 16 17 body { 18 font-family: \u0026#34;Arial\u0026#34;,\u0026#34;cwTeXYen\u0026#34;,\u0026#34;微軟正黑體\u0026#34;; 19 background-color: #fee5bd; 20 } 21 22 .container { 23 max-width: 1000px; 24 margin-left: auto; 25 margin-right: auto; 26 padding-left: 10px; 27 padding-right: 10px; 28 font-size: 25px; 29 } 30 31 h2 { 32 font-size: 23px; 33 margin: 0; 34 text-align: center; 35 font-weight: 150; 36 color: #e69137; 37 animation: fadeIn; 38 animation-duration: 1.5s; 39 animate-delay: 0.9s; 40 } 41 42 h1 { 43 font-size: 35px; 44 margin: 20px 0 0 0; 45 text-align: center; 46 size: 30px; 47 color: #351c75; 48 animation: zoomIn; 49 animation-duration: 1s; 50 } 51 52 li { 53 border-radius: 3px; 54 padding: 25px 30px; 55 display: flex; 56 justify-content: space-between; 57 margin-bottom: 25px; 58 } 59 60 .responsive-table .table-header, 61 .table-note { 62 background-color: #f9a756; 63 font-size: 30px; 64 margin-top: 0px; 65 padding: 25px 30px 25px 30px; 66 animation: slideInUp; 67 animation-duration: 1.5s; 68 } 69 70 .table-note { 71 font-size: 20px; 72 display: none; 73 } 74 75 .responsive-table { 76 margin: 0; 77 padding: 0; 78 } 79 80 .responsive-table .table-row { 81 background-color: #fff; 82 box-shadow: 0px 0px 9px 0px rgba(0, 0, 0, 0.1); 83 animation: backInLeft; 84 animation-duration: 1.5s; 85 } 86 .table-row{} 87 .responsive-table .col-1 { 88 flex-basis: 25%; 89 } 90 91 .responsive-table .col-2 { 92 flex-basis: 30%; 93 } 94 95 .responsive-table .col-3 { 96 flex-basis: 30%; 97 } 98 99 .responsive-table .col-4 { 100 flex-basis: 15%; 101 } 102 103 @media all and (max-width: 767px) { 104 .responsive-table .table-header { 105 display: none; 106 } 107 108 .table-note { 109 display: block; 110 } 111 112 .responsive-table li { 113 display: block; 114 } 115 116 .responsive-table .col { 117 flex-basis: 100%; 118 } 119 120 .responsive-table .col { 121 display: flex; 122 padding: 10px 0; 123 } 124 125 .responsive-table .col:before { 126 color: #6c7a89; 127 padding-right: 10px; 128 content: attr(data-label); 129 flex-basis: 50%; 130 text-align: right; 131 } 132 } 133 134 .header { 135 width: 150px; 136 display: block; 137 margin: auto; 138 animation: slideInUp; 139 animation-duration: 1.5s; 140 } 141 142 .finished { 143 color: green; 144 } 145 146 p, 147 a { 148 text-align: center; 149 font-size: 15px; 150 color: #6c7a89; 151 text-decoration: none; 152 animation: fadeIn; 153 animation-duration: 1.5s; 154 } 155 \u0026lt;/style\u0026gt; 156 \u0026lt;/head\u0026gt; 157 158 \u0026lt;body\u0026gt; 159 \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; 160 \u0026lt;h1\u0026gt;薩波2022委託與贈圖表\u0026lt;/h1\u0026gt; 161 \u0026lt;h2\u0026gt;這些不代表畫的順序 會跳著畫\u0026lt;/h2\u0026gt; 162 \u0026lt;img src=\u0026#34;header.png\u0026#34; class=\u0026#34;header\u0026#34; /\u0026gt; 163 \u0026lt;li class=\u0026#34;table-note\u0026#34;\u0026gt; 164 如果要一次看完整表格請切換到電腦版網頁喔 165 \u0026lt;/li\u0026gt; 166 \u0026lt;ul class=\u0026#34;responsive-table\u0026#34;\u0026gt; 167 \u0026lt;li class=\u0026#34;table-header\u0026#34;\u0026gt; 168 \u0026lt;div class=\u0026#34;col col-1\u0026#34;\u0026gt;委託人姓名\u0026lt;/div\u0026gt; 169 \u0026lt;div class=\u0026#34;col col-2\u0026#34;\u0026gt;委託項目\u0026lt;/div\u0026gt; 170 \u0026lt;div class=\u0026#34;col col-3\u0026#34;\u0026gt;付款狀態\u0026lt;/div\u0026gt; 171 \u0026lt;div class=\u0026#34;col col-4\u0026#34;\u0026gt;進度狀態\u0026lt;/div\u0026gt; 172 \u0026lt;/li\u0026gt; 173 資料載入中 174 \u0026lt;/ul\u0026gt; 175 \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;https://www.facebook.com/Sabo9335\u0026#34;\u0026gt;薩波FB\u0026lt;/a\u0026gt; · \u0026lt;a 176 href=\u0026#34;https://instagram.com/sabooo_9335?igshid=YmMyMTA2M2Y=\u0026#34;\u0026gt;薩波IG\u0026lt;/a\u0026gt; · \u0026lt;a 177 href=\u0026#34;https://discord.gg/ve9ERWVEPR\u0026#34;\u0026gt;橘子牌太空船\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;Made by \u0026lt;a href=\u0026#34;https://github.com/Edit-Mr\u0026#34;\u0026gt;EDM\u0026lt;/a\u0026gt; with❤\u0026lt;/p\u0026gt; 178 \u0026lt;/div\u0026gt; 179 \u0026lt;script\u0026gt; 180 //請把下面按這串改成剛才的網址 181 let requestURL = \u0026#34;https://script.google.com/macros/s/xxxxxxxx/exec\u0026#34;; 182 let request = new XMLHttpRequest(); 183 request.open(\u0026#34;GET\u0026#34;, requestURL); 184 request.responseType = \u0026#34;text\u0026#34;; 185 request.send(); 186 request.onload = function () { 187 console.log(\u0026#34;載入成功\u0026#34;); 188 $(\u0026#34;p\u0026#34;).addClass(\u0026#39;animate_animated\u0026#39;,\u0026#39;animate_fadeOut\u0026#39;) //動畫 189 $(\u0026#34;.responsive-table\u0026#34;).html(request.response); //用表格取代.responsive-table 190 }; 191 \u0026lt;/script\u0026gt; 192 \u0026lt;/body\u0026gt; 表格資料網站 1function doGet(){ 2 var spreadsheet = SpreadsheetApp.openById(\u0026#39;1U-Q2t9RI6Uce787RASQIRsrh-QYCvhCgn_UyOnrQmGQ\u0026#39;); // Sheet id 3 var sheet = spreadsheet.getSheets()[0]; 4 var rowLength = sheet.getLastRow(); 5 var columnLength = sheet.getLastColumn(); 6 var data = sheet.getRange(3,1,rowLength,columnLength).getValues(); 7 var dataExport = [\u0026#39;\u0026lt;li class=\u0026#34;table-header\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;col col-1\u0026#34;\u0026gt;委託人姓名\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;col col-2\u0026#34;++\u0026gt;委託項目\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;col col-3\u0026#34;\u0026gt;付款狀態\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;col col-4\u0026#34;\u0026gt;進度狀態\u0026lt;/div\u0026gt;\u0026lt;/li\u0026gt;\u0026#39;]; 8 var stat, ed=[]; 9 // 一個個加入json 10 for(i in data){ 11 if(data[i][0] != \u0026#34;\u0026#34;){ 12 if (data[i][3]==\u0026#34;完成\u0026#34;){ 13 ed.push(\u0026#39;\u0026lt;li class=\u0026#34;table-row\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;col col-1\u0026#34; data-label=\u0026#34;委託人姓名\u0026#34;\u0026gt;\u0026#39;+data[i][0] 14+\u0026#39;\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;col col-2\u0026#34; data-label=\u0026#34;委託項目\u0026#34;\u0026gt;\u0026#39;+data[i][1] 15+\u0026#39;\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;col col-3\u0026#34; data-label=\u0026#34;付款狀態\u0026#34;\u0026gt;\u0026#39;+data[i][2]+\u0026#34; \u0026#34;+data[i][4] 16+\u0026#39;\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;col col-4 finished\u0026#34; data-label=\u0026#34;進度狀態\u0026#34;\u0026gt;\u0026#39;+data[i][3]+\u0026#39;\u0026lt;/div\u0026gt;\u0026lt;/li\u0026gt;\u0026#39;) 17 }else{ 18 dataExport.push(\u0026#39;\u0026lt;li class=\u0026#34;table-row\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;col col-1\u0026#34; data-label=\u0026#34;委託人姓名\u0026#34;\u0026gt;\u0026#39;+data[i][0] 19+\u0026#39;\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;col col-2\u0026#34; data-label=\u0026#34;委託項目\u0026#34;\u0026gt;\u0026#39;+data[i][1] 20+\u0026#39;\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;col col-3\u0026#34; data-label=\u0026#34;付款狀態\u0026#34;\u0026gt;\u0026#39;+data[i][2]+\u0026#34; \u0026#34;+data[i][4] 21+\u0026#39;\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;col col-4\u0026#34; data-label=\u0026#34;進度狀態\u0026#34;\u0026gt;\u0026#39;+data[i][3]+\u0026#39;\u0026lt;/div\u0026gt;\u0026lt;/li\u0026gt;\u0026#39;) 22 } 23 24 }; 25 }; 26 dataExport=dataExport.concat(ed); 27 // 回傳JSON 28 console.log(dataExport.join(\u0026#34;\u0026#34;)); 29 return ContentService.createTextOutput(dataExport.join(\u0026#34;\u0026#34;)); 30 } ","link":"https://emtech.cc/post/create-site-for-sheet/","section":"post","tags":["自製","HTML","CSS","JavaScript","Github","GAS"],"title":"【GAS】複製貼上讓試算表變身成網頁表格 秀爆你的客戶朋友！"},{"body":"這是我自己學習的筆記，紀錄一些準備考試的重點，不適合新手閱讀\n好久不見! 因為要準備會考已經非常久沒有發文了，不過這一篇是我自己寫的一些重點整理筆記，且會持續更新。程式語言教學只會寫C與其他語言不同的語法，適合已經對程式有概念的人閱讀。如果你對C語言有興趣可以參考這個系列文章，我覺得寫得不錯w\nC規則 只寫和javascript不同的地方，或我自己覺得重要或會忘記的部分\n函式Cool 通常會加入stdio.h和stdlib.h\nstdio.h puts(char) - 將字串顯示到視窗上，自動換行 gets(char) - 透過鍵盤輸入字串 stdlib.h abs(int x) - 回傳整數 x 的絕對值 atoi(char) - 回傳字串轉整數的結果 strtof(char) - 回傳字串轉 float 的結果 math.h string.h strlen(s) - 回傳一個整數，是字串 s 的長度，長度的計算不包含字串結尾的 '\\0' 輸出 1printf(\u0026#34;字串\u0026#34;); 2printf(\u0026#34;字串或格式代碼\u0026#34;,var1,var2,var3); 3puts(\u0026#34;ABC\u0026#34;);//自動換行，但沒有格式化字串的功能。只能顯示字串 \\n:換行 \\t:自動對齊 \\a: 鈴聲 \\b: 游標(下個文字開始顯示的位置)倒退一格 \\r: 游標倒退到這行的開頭 預留位置(Format placehold) 整數用 %d，浮點數用 %f，字元用 %c，字串用 %s\n%hd, %d, %lld 都是將資料轉換成整數\n能處理的位數 %hd \u0026lt; %d \u0026lt; %lld\n格式化字串 最小長度 在 % 的後面加上數字，可以設定變數顯示的最小長度，如果長度不足會自動補空格，以達到對其的目的如printf(\u0026quot;%4d\\n\u0026quot;, a)；在最小位數的前面加上0，會變成用0補齊長度如printf(\u0026quot;%07d\\n\u0026quot;, b);\n變數 型態 加上 unsigned，會變成只能表示正數和0，但範圍 大小 不變。如unsigned char的範圍是0~2^8\n型態 說明 範圍 long int 長整數 ±21億 int 整數 ±21億 short int 短整數 ±32768 char 字元 0~255 float 浮點數 1.2~3.4e±38 double 倍精度浮點數 1.2~1.8e±308 你有沒有發現可悲的C語言中，並沒有 String 這個型別。需要使用字元的陣列 (character Array) 作為字串，而空字元('\\0')代表字串結束 所以 \u0026quot;123\u0026quot;，其實是一個長度為四的一維字元陣列，它的元依序是 '1', '2', '3', '\\0'\n宣告 以下4種方式都可以\n1int x 2int x=1 3//一次多個 4int x=1, y=10, z=100; 5int x=y=z=100; 雖然沒有硬性規定，但C語言中可以用 f, F 標示數值是浮點數，整數時可以用 . 標示\n指派/指定 運算子(Assignment Operator) 前面用過的 = 就是其中一種，執行時會先將等號右邊的值算出來，再指派給左邊的變數 a=a+1等效a+=1等效a++ a=a-1等效a-=1等效a-- a=a*2等效a*=2 a=a/2等效a/=2 a=a%2等效a%=2\n輸入 1//輸入整數、字元、浮點到變數x、y、z 2scanf(\u0026#34;%d%c%d\u0026#34;, \u0026amp;x, \u0026amp;y, \u0026amp;z); 邏輯判斷 if、switch、while、for 和js大同小異\n1//if 2if(ture){ 3\tprintf(\u0026#34;yes\u0026#34;); 4} 5else{ 6\tprintf(\u0026#34;no\u0026#34;); 7} 8//大括號內只有一行可省略大括號 9if(x\u0026gt;100) 10\tprintf(\u0026#34;x is greater than 100.\u0026#34;); 11 12//switch 13switch(x){ 14\tcase 0: case 7: 15\tprintf(\u0026#34;A\\n\u0026#34;); 16\t//x=0或是7都會印出A 17\tbreak; 18\tcase 2: case 5: 19\tprintf(\u0026#34;B\\n\u0026#34;); 20\tbreak; 21\tcase 4: case 3: 22\tprintf(\u0026#34;C\\n\u0026#34;); 23\tbreak; 24\tcase 6: case 1: 25\tprintf(\u0026#34;D\\n\u0026#34;); 26\tbreak; 27} 28 29//while 30while(ture){ 31\tprintf(\u0026#34;forever printing\u0026#34;); 32} 33 34//for 大括號內只有一行一樣可省略大括號 35int i; 36for(i=0; i!=5; i++) 37\tprintf(\u0026#34;%d\u0026#34;, i);//輸出12345 38\t程式碼縮排 和js一樣沒有規定，不縮也可以\n通常以一個 Tab 鍵(在鍵盤左邊) 為單位，每多一個大括號，就多空一個單位。如果大括號被省略還是要縮排\nbreak \u0026amp; continue break: 強制結束迴圈 continue: 跳過這次的區塊，但迴圈不會結束 陣列 以下是一些合法使用的例子\n1int arrA[5]; 2int arr[]={12,22,3}; 3arr[2]=4; 4arr[x]=y; 5printf(\u0026#34;%d\\n\u0026#34;, arr[0]); 字元陣列 (character Array) AKA字串。可悲C\n字元常數是用單引號括起來的一個字元，如'a'、'b'、'='、'+'、'?' 字串常數是由一對雙引號括起的字元序列，如\u0026quot;EM\u0026quot; ， “Oh yeah!” ， \u0026quot;$12.5\u0026quot; 字元常數'a'和字串常數\u0026quot;a\u0026quot;雖然都只有一個字元，但在記憶體中的情況是不同的。\n輸入 記憶體 'a' a \u0026quot;a\u0026quot; a \\0 宣告 1//可以用和陣列一樣的方法初始化字串的內容 2char s[100]={\u0026#39;H\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;!\u0026#39;, \u0026#39;\\0\u0026#39;}; 3//或是用雙引號代表字串，但一樣只能在宣告時用這個方法指派 4char s[100]=\u0026#34;Hello!\u0026#34;; 5//可把字串作為printf()的引數來印出字串 6char s[100]=\u0026#34;Hello!\u0026#34;; 7printf(s); 輸出 1char s[100]=\u0026#34;PJ\u0026#34;; 2printf(\u0026#34;My name is %s.\u0026#34;, s); 3return 0; 輸入 1char name[100]; 2scanf(\u0026#34;%s\u0026#34;, name); 3printf(\u0026#34;My name is %s.\\n\u0026#34;, name); 如果輸入的字串包含空格必須用 %[^\\n]\n1char name[100]; 2scanf(\u0026#34;%[^\\n]\u0026#34;, name); 3printf(\u0026#34;My name is %s.\\n\u0026#34;, name); ####　常見字串處理\n字串長度 可用loop\n1#include\u0026lt;stdio.h\u0026gt; 2 3int main(){ 4\tchar s[100]=\u0026#34;Hello!\u0026#34;; 5\tint len=0; 6\tfor(int i=0; s[i]!=\u0026#39;\\0\u0026#39;; i++) 7\tlen++; 8\tprintf(\u0026#34;%d\\n\u0026#34;, len); 9\treturn 0; 10} 或透過函式庫string.h\n定義 語法是:#define \u0026lt;目標文字\u0026gt; \u0026lt;替換文字\u0026gt;\n用 #define 定義的函式，執行速度會比自訂函式還快，但函式功能複雜時不好編寫，且容易造成執行結果錯誤\n1#include\u0026lt;stdio.h\u0026gt; 2#define plus + //定義函式 3#define x 1 //定義變數 4#define y 2 //定義變數 5#define say printf 6 7int main(){ 8\tsay(\u0026#34;%d\\n\u0026#34;, x plus y); 9\treturn 0; 10} 函式 1#include\u0026lt;stdio.h\u0026gt; 2#include\u0026lt;stdlib.h\u0026gt; 3 4int pi(){ 5 char say[3]=\u0026#34;hi\u0026#34;; 6 showMessage(say); 7 return 666; 8} 9void showMessage(a){ 10 printf(a); 11} 12int main(){ 13 printf(\u0026#34;\\n%d\u0026#34;, pi());//輸出12345 14 return 0; 15} 建構式 struct 1#include\u0026lt;stdio.h\u0026gt; 2#include\u0026lt;stdlib.h\u0026gt; 3 4struct STUDENT{ 5 int number; 6 int age; 7}; 8 9int main(){ 10\tstruct STUDENT student_1={87, 19}; 11\tprintf(\u0026#34;I am %d,I\u0026#39;m %d years old\u0026#34;,student_1.number,student_1.age); 12 //I am 87,I\u0026#39;m 19 years old 13} union 太廢了我也不知道拿來幹嘛\n和 struct 一樣可以由多個不同型別的成員組成，但 同一時間只能儲存一個資料，或者可以說雖然可以用不同的成員名稱取得其中的資料，但實際上不管用哪個名稱都會得到同一個數值\n1#include\u0026lt;stdio.h\u0026gt; 2#include\u0026lt;stdlib.h\u0026gt; 3 4union Data{ 5\tint n; 6\tfloat f; 7}; 8 9int main(){ 10\tunion Data data={5}; 11\tprintf(\u0026#34;%d %f\\n\u0026#34;, data.n, data.f); 12 //5 0.000000 13} enum 1#include\u0026lt;stdio.h\u0026gt; 2#include\u0026lt;stdlib.h\u0026gt; 3 4enum week{A=1, B, C, D=1, E, F}; 5 6int main(){ 7\tprintf(\u0026#34;%d %d %d %d %d %d\u0026#34;, A, B, C, D, E, F); 8 //1 2 3 1 2 3 9\treturn 0; 10} 關鍵字 以下這些字不能作為變數名稱\nauto, do, goto, signed, break, double, if, sizeof, case, else, int, static, char, enum, long, struct, const, extern, register, switch, continue, float, return, typedef, default, for, short, union\n科學記號 123=1.23E+2 0.00041=4.1e-4 數學\u0026lt;math.h\u0026gt; M_E 回傳自然常數 e M_PI 回傳圓周率 π M_SQRT2 回傳根號2 sin(x) cos(x) tan(x) asin(x) acos(x) atan(x) BJ4 exp(x) 回傳自然常數 e 的 x 次方 pow(x, y) 回傳 x 的 y 次方 pow(x) 回傳10的 x 次方 sqrt(x) 回傳 x 的根號 log(x) 回傳以 e 為底的對數 log10(x) 回傳以10為底的對數 abs(x) 回傳整數 x 的絕對值 fabs(x) 回傳實數 x 的絕對值 ","link":"https://emtech.cc/post/apcs_note/","section":"post","tags":null,"title":"【重點整理】C語言"},{"body":"","link":"https://emtech.cc/categories/syntax/","section":"categories","tags":null,"title":"syntax"},{"body":"","link":"https://emtech.cc/series/themes-guide/","section":"series","tags":null,"title":"Themes Guide"},{"body":"Page bundles are an optional way to organize page resources within Hugo.\nYou can opt-in to using page bundles in Hugo Clarity with usePageBundles in your site configuration or in a page's front matter. Read more about usePageBundles.\nWith page bundles, resources for a page or section, like images or attached files, live in the same directory as the content itself rather than in your static directory.\nHugo Clarity supports the use of leaf bundles, which are any directories within the content directory that contain an index.md file. Hugo's documentation gives this example:\n1content 2├── about 3│ ├── index.md 4├── posts 5│ ├── my-post 6│ │ ├── content1.md 7│ │ ├── content2.md 8│ │ ├── image1.jpg 9│ │ ├── image2.png 10│ │ └── index.md 11│ └── my-other-post 12│ └── index.md 13│ 14└── another-section 15 ├── .. 16 └── not-a-leaf-bundle 17 ├── .. 18 └── another-leaf-bundle 19 └── index.md In the above example `content` directory, there are four leaf bundles: about: This leaf bundle is at the root level (directly under content directory) and has only the index.md.\nmy-post: This leaf bundle has the index.md, two other content Markdown files and two image files. image1 is a page resource of my-post and only available in my-post/index.md resources. image2 is a page resource of my-post and only available in my-post/index.md resources.\nmy-other-post: This leaf bundle has only the index.md.\nanother-leaf-bundle: This leaf bundle is nested under couple of directories. This bundle also has only the index.md.\nThe hierarchy depth at which a leaf bundle is created does not matter, as long as it is not inside another leaf bundle.\nAdvantages to using page bundles The image below is part of the bundle of this page, and is located at content/post/bundle/building.png. Because it's within this page's bundle, the markup for the image only has to specify the image's filename, building.png.\nIf you ever change the name of the directory in which this Markdown file and the image reside, the reference to the image would not need to be updated.\nIn addition to more cleanly organizing your content and related assets, when using page bundles, Hugo Clarity will automatically generate markup for modern image formats, which are smaller in file size.\nFor instance, when you reference an image like building.png, Hugo Clarity will check to see if the same image (based on filename) exists in WebP, AVIF or JXL formats. If you inspect the image above, you'll see a \u0026lt;source\u0026gt; element for building.webp, because that file is also present. Hugo Clarity will only include the markup if these images exist.\nBrowsers that support these formats and the \u0026lt;picture\u0026gt; element will load them, while browsers that do not will fall-back to the default image. Read more about this process.\nFinally, note that page assets can be further managed and refined within the page's front matter if you wish, and are not limited to images alone.\nDisadvantages to using page bundles Page resources in a bundle are only available to the page with which they are bundled — that means you can't include an image with one page and then reference it from another.\nImages that are being used in multiple places are more appropriate for your Hugo assets directory. Unlike files in the Hugo static directory, files in the assets directory can be run through Hugo Pipes, which includes image processing.\n","link":"https://emtech.cc/post/bundle/","section":"post","tags":["Hugo"],"title":"Using Hugo page bundles"},{"body":"在這篇文章我要介紹Remove.bg這個超讚的去被網站，並講解如何使用它提供的Api來製作捷徑，使你能夠一鍵去被\n去背對於影音創作者來說是十分重要的技能。除了可以凸顯主題之外，也可以對背景空間進行利用，不過如果要對沒有使用綠幕的圖片進行去背通常是一件十分痛苦的一件事。好在有一個線上的網站可以透過AI來去背，且效果十分不錯。 Remove.bg 開發者:Kaleido 類型:網站/網路應用程式 連結:Remove.bg 進入到網站後可以直接上傳照片。上傳完成後可以直接下載，也可以做一些編輯如手動去背（如果AI沒去好）、添加濾鏡、背景顏色等。\nios捷徑（API） 每次去背都要打卡網頁操作，如果量多的話十分不方便。好在他們有提供API，可以讓我們用捷徑腳本來簡化步驟。\nAPI是什麼 API(Application Programming Interface)，中文叫做應用程式介面。你可以想像有一台飲料機，上面的按鈕就是 API ，當你投入錢並按下按鈕時飲料機就收到了你的需求，並將飲料從取物口送出，而投入的方式可以是硬幣、鈔票、或刷卡。\n以下是一個簡單的捷徑示範，你可以直接下載來使用。後面會提供簡單的製作教學。有多簡單呢，只有兩個方塊！ Remove.bg一鍵去背 開發者:毛哥EM(我) 軟體類型:ios捷徑 下載位置:iCloud 使用方法 要使用Remove.bg的API你需要一個用來辨識你是誰的API Key（仗權）。請先到這裡註冊一個帳號，你可以直接使用Google登入，並複製你的API Key。\nRemove.bg提供每個帳號每個月50次的免費使用。對一般人來說已經很足夠了，但如果還需要更多的話可以升級方案或再註冊一個帳號\n加入捷徑後請輸入剛才得到的API Key。\n要使用時只需要分享圖片，並點選捷徑即可。是不是超方便的！\n製作教學 從官方文件可以看出我們呼叫API至少需要提供API Key、大小、圖片，並以Post的方式傳遞到https://api.remove.bg/v1.0/removebg。所以捷徑只需要照著填入並儲存把回傳的圖片即可。實際設定如下\n","link":"https://emtech.cc/post/remove-bg/","section":"post","tags":["ios捷徑"],"title":"【Remove.bg】讓AI幫你一鍵去背"},{"body":"","link":"https://emtech.cc/categories/api%E5%88%86%E4%BA%AB/","section":"categories","tags":null,"title":"API分享"},{"body":"","link":"https://emtech.cc/tags/ios%E6%8D%B7%E5%BE%91/","section":"tags","tags":null,"title":"ios捷徑"},{"body":"","link":"https://emtech.cc/categories/%E6%8D%B7%E5%BE%91%E5%88%86%E4%BA%AB/","section":"categories","tags":null,"title":"捷徑分享"},{"body":"QR Code是分享網站連結常用的方法。適合在印刷上面方便用讀者進入網頁，不用一個一個字照著打。 而製作一個好看的QR Code不但可以讓畫面更好看，還可以增進使用者掃描的意願。而其中我覺得最好看的QR Code生成器就是LINK to QR。\nlink-to-qr 開發者:posterilove 類型:免費網站工具 連結:link-to-qr.com https://www.google.com.tw\nhttps://m.youtube.com\nhttps://cn.pornhub.com\n進入網站後可以先在文字框裡輸入網址。我以我製作的旌旗青年週報下載器做為示範\n這裡建議可以先使用is.gd縮短網址(推薦設為小寫，可閱讀的-Lower case pronounceable)，而網址前面不用加https://這樣可以讓QR Code更簡略。不只好看也可以更方便掃描。\n而你也可以設定QR Code的邊框、文字、顏色、還有是否要去背等等。\n而我自己習慣設成白色/黑色QR Code、加邊框、不加文字、並且去背，方便應用於各種版面。以下為最終效果\n","link":"https://emtech.cc/post/link-to-qr/","section":"post","tags":[],"title":"【link-to-qr】超好看QRCode生成器"},{"body":"當時在製作的時候正是疫情爆發的時間，教會聚會全面改成線上，且只有提供週報的圖片檔，因此製作了一個可以下載週報的網站。即使現在疫情已經過去，我還是習慣使用這它\n好久沒有寫部落格文章了～最近都在忙著 認真讀書 、更新毛哥EM的基地及製作Line機器人。最近編程編到有點頭痛，想說把欠了很久的文章寫完，休息一下\n旌旗教會週報下載器 開發者:毛哥EM(我) 類型:網站 連結:iCloud 當週週報連結 如果你平常只需要獲取當周週報，可直接到以下網址，永久有效。歡迎設為書籤。\n周間時當週週報教會可能還未釋出，若無法下載（出現404）請過一陣子再試。\nhttps://edit-mr.github.io/code/weekly/redirect/\nios捷徑（稍後更新連結） 若你使用的是ios裝置，你可以使用我製作的捷徑腳本來快速獲取當天、上一次、或指定日期的週報。 小提醒 如果手機說無法加入不受信任的捷徑，請參考這篇文章提供的方法。 此網站及捷徑皆為開源項目，歡迎到GitHub查看。 你也可以用Siri執行這個捷徑。 ","link":"https://emtech.cc/post/banner_weekly_downloader/","section":"post","tags":["自製","Github","JSON","ios捷徑"],"title":"【網頁\u0026捷徑】旌旗教會週報下載器"},{"body":"","link":"https://emtech.cc/tags/json/","section":"tags","tags":null,"title":"JSON"},{"body":"大眼蛙教練的課程是以堂數做計算，也就是來一次算一次，而不是一段時間。因此每次學生上課都需要簽到，最後還需要人工來統計。因此我做了一個簡單的點名系統，讓電腦來做統計和計算的工作。\n大眼蛙教練點名系統 這篇文章出乎意料地幫助到許多人，因此我在2023年重新寫了一次，比上次更容易製作和操作，也更好看一些(我覺得啦)。\n建議閱讀這篇文章: https://emtech.cc/post/rol-call/\n大眼蛙教練點名系統 開發者:毛哥EM(我) 類型:網站 網址:EM's Base 功能 新增學生 輸入名稱並按新增即可。\n電腦會自動在Google Sheet建立好欄位。教練只需要到試算表設定學生的課程數就好了。如果沒有課了會用紅色表示，而未設定會被判斷為沒有課程。 超重要提醒 學生姓名不可以有空格，如果有空格會自動刪除 要刪除學生請刪除整列，不可留一整列空白 點名 網站會從表單取得學生名單並顯示。只需要點擊名稱即可完成報到。\n完成報到後會使用Line Notify通知完成報到的學生和報到時間到指定的群組。\n提醒 為了配合不同螢幕大小，沒有限制每行出現的學生數。盡可能多顯示一些，比較容易找到。 為避免重複點名，報到後學生會隱藏。重新整理頁面即可顯現 下方方框會顯示自開啟網頁後已完成報到的學生。 在試算表的「紀錄」可以看到之前學生的報到紀錄。當天的會以綠色做標記。 超重要提醒 如果要刪除記錄（如誤按到）請務必要「刪除整列」。不可留空 查詢記錄 如果要查詢之前報到的紀錄，請到查詢頁面並輸入姓名。\n教學 我們分成三個步驟:\n建立試算表(Google Sheet) 生成Line Notify仗權(若不需要Line通知可省略) 創建API(Google App Script)來處理資料、發送訊息、以及更新試算表 建立一個漂亮的網站方便操作 建立試算表(Google Sheet) 我分成兩個表格，分別叫做紀錄和統計。為了方便辨識第一排插入標題\n紀錄 編號 姓名 時間 剩餘課堂數 統計 學生 上課次數 剩餘課堂數 總課堂數 接著請你複製這個試算表的ID，也就是網址https://docs.google.com/spreadsheets/d/和/之間那一串(如1fjX-prGu0hfb65LCQkrktWa-JavvjSz7tWMmYWAb7RA)。等一下會用到。\n生成Line Notify仗權 Line Notify是個比較冷門但是非常好用的工具。我們可以透過他來從第三方(如你的網站、或是ios捷徑)無限量的廣播訊息到指定的群組，或是單獨發給你。我們會在報到成功後請Line用Line Notify來在群組裡廣播提醒。\n請依照圖片步驟建立一個仗權，要給Line看這一串他才知道要傳送信息到哪裡。使用Line Lontify而不是Line機器人的原因是免費版的官方帳號一個月只能傳送500則訊息，但老師的學生數量大，可能會吃不消；且Line Notify設定較簡單。\n建立API(Google App Script) 想要讓網站編輯試算表需要透過Google App Script(GAS)來完成。我們要建立四個API，分別用來:\n紀錄出缺席 獲取學生列表(以進行報到) 查詢紀錄 新增學生 到時候我們建立的網站會向這四個API發送請求來更新試算表或獲取資料\n提示 google 官方文件 spreadsheet method，裡面有非常詳盡的介紹，包括可以讀取欄位、讀取資料、排序資料、插入資料等等的功能，其實某方面來說算是功能齊全的類資料庫了。有興趣可以點開來看裡面文件。\n文件裡面 method 一大堆，還是直接實作比較快。\n出缺席紀錄 請建立一個新的專案並貼上以下內容。記得貼上excel那段ID 小叮嚀 為避免程式碼站太多空間，可能會部分隱藏。請記得展開或直接複製。\n1function doGet(e) { 2 var params = e.parameter; 3 // 可以針對你帶入的資料變化 params.xxxxxx xxxxx = 你帶進來的key值 4 var name = params.name; 5 var time = params.time; 6 var remain = params.remain; 7 //將Sheet指定為\u0026#34;資料庫\u0026#34;試算表 SpreadSheet = 試算表 ，貼上excel那段參數 8 var SpreadSheet = SpreadsheetApp.openById(\u0026#34;XXXXXXXXXXXXXXXXXXX\u0026#34;); 9 //取得頁籤:\u0026#34;工作表1\u0026#34; Sheet = 頁籤 10 var Sheet = SpreadSheet.getSheets()[0]; 11 //取得有資料的最後一行的\u0026#34;行數\u0026#34;(目的要在最後一行插入新資料) 12 var LastRow = Sheet.getLastRow(); 13 // 編號為行數(如要輸入編號2時裡面已經有2行了) 14 var orderNum = LastRow; 15 16 //開始寫入資料 擋住沒填時間 不給寫入資料，防止被亂撞api 17 if(time !== undefined){ 18 //在最後一行的下一行寫入資料 19 Sheet.getRange(LastRow+1, 1).setValue(orderNum); 20 Sheet.getRange(LastRow+1, 2).setValue(name); 21 Sheet.getRange(LastRow+1, 3).setValue(time); 22 Sheet.getRange(LastRow+1, 4).setValue(remain); 23 return ContentService.createTextOutput(true); 24 } 25 // 被亂撞 會回吐這段文字給前端 26 return ContentService.createTextOutput(\u0026#39;別亂撞我～ :)\u0026#39;); 27} 在這個程式當中，我們說當我們拿著資料到這個應用程式時，將我們給的姓名、時間、剩餘課堂數、以及編號寫入到試算表第一頁最後一行的下一行。但是這樣還沒結束，會後我們還要請Line Notify幫我們廣播。請在return ContentService.createTextOutput(true);之前插入以下程式碼。記得填入剛才生成的仗權。\n編輯完成後請按執行。第一次執行時系統會要求你登入Google，請登入現在使用的帳號並提供編輯試算表的權限。Google會告訴你不安全因為這是是你自己製作的應用程式，沒有經過Google審查。直接點選進階，並繼續前往即可。成功部署後請保存應用程式的網址，之後網站就會傳送資料到這個網站來寫入和讀取資料。\n完成後可能會看到紅色警告說無法執行，因為我們直接執行了程式，沒有給資料（學生名稱）。因此請建立一個程式碼檔案叫做debug，並貼上以下內容：\n1//呼叫 2function debug() { 3 var Result = doGet({ 4 parameter: { 5 name: \u0026#39;測試先生\u0026#39;, 6 time: \u0026#39;2021/10/10 22:46:00\u0026#39;, 7 remain: 10 8 } 9 }); 10 Logger.log(\u0026#39;Result: %s\u0026#39;, Result); 11} 執行後你應該會看到底下顯示執行完畢，且表單多出了一列如下\n編號 姓名 時間 剩餘課堂數 1 測試先生 2021/10/10 22:46:00 10 做好了之後點擊執行▶️，你會需要授予你的程式讀取資料的權限。因為你寫的程式沒有被Google驗證過所以會顯示不安全，但我相信你不會把你的帳號搞爆，對吧\n接下來我們要部署它，讓它成為一個網站來讓我們抓。這裡選擇網頁應用程式，所有人都以你的身份讀取。按下部署就可以囉\n這裡我們把部署的網址複製起來。如果要做修改除了按儲存之外要記得重新部署成新版本才會更新喔 小叮嚀 若發布後還有做修改，既得要再次發布且要發布為新版本。\n學生列表 學生列表不需要輸入，直接讀取內容就好了。這裡使用的輸出格式是JSON。JSON就是ios捷徑APP裡的辭典，簡單來說就是一個對照表。比如說你想要紀錄一個人的基本資料如下\n1{ 2 \u0026#34;姓\u0026#34;: \u0026#34;毛\u0026#34;, 3 \u0026#34;名\u0026#34;: \u0026#34;宥鈞\u0026#34;, 4 \u0026#34;性別\u0026#34;: \u0026#34;男\u0026#34;, 5 \u0026#34;年齡\u0026#34;: 15, 6 \u0026#34;住址\u0026#34;: 7 { 8 \u0026#34;路名\u0026#34;: \u0026#34;大馬路\u0026#34;, 9 \u0026#34;city\u0026#34;: \u0026#34;台中市\u0026#34;, 10 \u0026#34;國家\u0026#34;: \u0026#34;台灣\u0026#34;, 11 \u0026#34;郵遞區號\u0026#34;: \u0026#34;40763\u0026#34; 12 } 13} 我們可以輕鬆的讓JavaScript讀懂它。請以相同方式建立以下API\n1function doGet(e){ 2 var id = \u0026#39;XXXXXXXXXXXXXXXXXXX\u0026#39;; //抓取表單 3 var spreadsheet = SpreadsheetApp.openById(id); // Sheet id 4 var sheet = spreadsheet.getSheets()[1]; // 要第幾個sheet？ 1 就是第2個 5 var rowLength = sheet.getLastRow()-1; //取行長度 6 var columnLength = sheet.getLastColumn(); //取列長度 7 var data = sheet.getRange(2,1,rowLength,columnLength).getValues(); // 取得的資料 8 var dataExport = {}; 9 // 一個個加入json 10 for(i in data){ 11 if(data[i][0] != \u0026#34;\u0026#34;){ 12 dataExport[i] = { 13 name: data[i][0], 14 left: data[i][2], 15 }; 16 }; 17 }; 18 // 回傳JSON 19 var dataExportFormat = JSON.stringify(dataExport); 20 return ContentService.createTextOutput(dataExportFormat).setMimeType(ContentService.MimeType.JSON); 21 } 在這段程式當中，我們一列一列的把試算表的資料塞進JSON裡，最後再回傳給我們。\n查詢紀錄 這裡使用Post來傳送而不是Get。其實都可以，只是想說換一個方式。差別在於使用Get時資料是存在網址當中，而Post像是還有一個附件。因為資料量很小，所以都可以使用。\n1function doPost(e) { 2 var params = e.parameter; 3 // 可以針對你帶入的資料變化 params.xxxxxx xxxxx = 你帶進來的key值 4 var name = params.name; 5 var SpreadSheet = SpreadsheetApp.openById(\u0026#39;XXXXXXXXXXXXXXXXXXX\u0026#39;); //抓取表單 6 var Sheet = SpreadSheet.getSheets()[0]; 7 var LastRow = Sheet.getLastRow(); 8 var data = []; 9 var listAll = Sheet.getSheetValues(1, 2, LastRow, 4); 10 // 把符合的抓出來 11 for (var i = 0; i \u0026lt; listAll.length; i++) { 12 if (listAll[i].indexOf(name) === 0) { 13 data.push({ data: listAll[i], index: i + 1 }); 14 } 15 } 16 // 回傳JSON 17 return ContentService.createTextOutput(JSON.stringify(data)).setMimeType( 18 ContentService.MimeType.JSON 19 ); 20} 在這段程式當中雖然一樣是回傳資料，但是在塞進JSON前先判斷一下姓名是否符合。直得注意的是我們是從第2欄開始抓，因為使用者不需要知道這是所有資料當中的第幾筆資料。\n新增學生 1function doGet(e) { 2 var params = e.parameter; 3 // 可以針對你帶入的資料變化 params.xxxxxx xxxxx = 你帶進來的key值 4 var name = params.name; 5 //將Sheet指定為\u0026#34;資料庫\u0026#34;試算表 SpreadSheet = 試算表 ，貼上excel那段參數 6 var SpreadSheet = SpreadsheetApp.openById(\u0026#34;XXXXXXXXXXXXXXXXXXX\u0026#34;); 7 //取得頁籤:\u0026#34;工作表1\u0026#34; Sheet = 頁籤 8 var Sheet = SpreadSheet.getSheets()[1]; 9 //取得有資料的最後一行的\u0026#34;行數\u0026#34;(目的要在最後一行插入新資料) 10 var LastRow = Sheet.getLastRow(); 11 var now = LastRow+1; 12 //格字內加入函式統計課程數 13 var his=\u0026#34;=COUNTIF(\u0026#39;紀錄\u0026#39;!B:B,A\u0026#34;+now+\u0026#34;)\u0026#34;; 14 //格字內加入函式計算剩餘課程數 15 var less=\u0026#39;=D\u0026#39;+now+\u0026#39;-B\u0026#39;+now; 16 if(name !== undefined){ 17 //在最後一行的下一行寫入資料 18 Sheet.getRange(LastRow+1, 1).setValue(name); 19 Sheet.getRange(LastRow+1, 2).setValue(his); 20 Sheet.getRange(LastRow+1, 3).setValue(less); 21 return ContentService.createTextOutput(true); 22 } 23 // 被亂撞 會回吐這段文字給前端 24 return ContentService.createTextOutput(\u0026#39;別亂撞我～ :)\u0026#39;); 25} 我們在其中一個儲存格中插入了一個叫做COUNTIF的函式。他會統計在紀錄當中有幾筆資料的姓名和他左邊的姓名一樣。而剩餘課堂數就是全部課堂數減統計出來已經上的課堂數。\n建立網站 最後，讓我們來做一個的簡單漂亮的網站吧。 請選一個地方建立以下幾個純文字檔案\ncheck-in.html search.html sign-up.html index.html style.css HTML是網頁的檔案，有點像Word檔，而CSS是用來裝飾HTML的。你可以用它來決定字要多大、什麼顏色、間距要多少等。\n而我們在HTML檔中還插入了一些JavaScript來傳送和讀取資料和顯示資料。我使用了一個叫做jQuery的JavaScript函式庫，它可以讓程式變得更簡略。記得把傳送到的網址改成你剛才建的Google App Script的網址，其他你可以直接複製貼上。\nindex.html 1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;head\u0026gt; 3 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; 4 \u0026lt;title\u0026gt;點名系統\u0026lt;/title\u0026gt; 5 \u0026lt;!-- 網站資訊 --\u0026gt; 6 \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;使用Google sheet的api紀錄出缺席\u0026#34; /\u0026gt; 7 \u0026lt;meta name=\u0026#34;author\u0026#34; content=\u0026#34;毛哥EM\u0026#34; /\u0026gt; 8 \u0026lt;!-- 讓網址正常顯示以及裝飾 --\u0026gt; 9 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34; /\u0026gt; 10 \u0026lt;meta name=\u0026#34;theme-color\u0026#34; content=\u0026#34;00BFFF\u0026#34; /\u0026gt; 11 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;style.css\u0026#34; media=\u0026#34;screen\u0026#34; /\u0026gt; 12\u0026lt;/head\u0026gt; 13\u0026lt;body\u0026gt; 14 \u0026lt;main\u0026gt; 15 \u0026lt;h1\u0026gt;點名系統\u0026lt;/h1\u0026gt; 16 \u0026lt;p\u0026gt;主選單\u0026lt;/p\u0026gt; 17 \u0026lt;button onclick=\u0026#34;window.location=\u0026#39;check-in.html\u0026#39;;\u0026#34;\u0026gt;報到\u0026lt;/button\u0026gt; 18 \u0026lt;button onclick=\u0026#34;window.location=\u0026#39;search.html\u0026#39;;\u0026#34;\u0026gt;查詢紀錄\u0026lt;/button\u0026gt; 19 \u0026lt;button onclick=\u0026#34;window.location=\u0026#39;sign-up.html\u0026#39;;\u0026#34;\u0026gt;新增學生\u0026lt;/button\u0026gt; 20 \u0026lt;p\u0026gt; 21 \u0026lt;a href=\u0026#34;https://Edit-Mr.github.io\u0026#34;\u0026gt;毛哥EM\u0026lt;/a\u0026gt;製作 22 \u0026lt;/p\u0026gt; 23 \u0026lt;/main\u0026gt; 24\u0026lt;/body\u0026gt; sign-up.html 1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;head\u0026gt; 3 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; 4 \u0026lt;title\u0026gt;新增學生 - 點名系統\u0026lt;/title\u0026gt; 5 \u0026lt;!-- 網站資訊 --\u0026gt; 6 \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;使用Google sheet的api紀錄出缺席\u0026#34; /\u0026gt; 7 \u0026lt;meta name=\u0026#34;author\u0026#34; content=\u0026#34;毛哥EM\u0026#34; /\u0026gt; 8 \u0026lt;!-- 讓網址正常顯示以及裝飾 --\u0026gt; 9 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34; /\u0026gt; 10 \u0026lt;meta name=\u0026#34;theme-color\u0026#34; content=\u0026#34;00BFFF\u0026#34; /\u0026gt; 11 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;style.css\u0026#34; media=\u0026#34;screen\u0026#34; /\u0026gt; 12 \u0026lt;!-- 載入jQuery --\u0026gt; 13 \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/jquery/1.11.1/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 14\u0026lt;/head\u0026gt; 15\u0026lt;body\u0026gt; 16 \u0026lt;main\u0026gt; 17 \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;index.html\u0026#34;\u0026gt;點名系統\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; 18 \u0026lt;p\u0026gt;新增學生\u0026lt;/p\u0026gt; 19 \u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;form-control\u0026#34; id=\u0026#34;name\u0026#34; /\u0026gt; 20 \u0026lt;button type=\u0026#34;button\u0026#34; id=\u0026#34;sendOrder\u0026#34;\u0026gt;新增\u0026lt;/button\u0026gt; 21 \u0026lt;p\u0026gt; 22 \u0026lt;a href=\u0026#34;https://Edit-Mr.github.io\u0026#34;\u0026gt;毛哥EM\u0026lt;/a\u0026gt;製作\u0026lt;br /\u0026gt; 23 送出後請稍等數秒 勿重複新增 24 \u0026lt;/p\u0026gt; 25 \u0026lt;/main\u0026gt; 26 \u0026lt;script\u0026gt; 27 $(function () { 28 // 監聽 按鈕點擊 29 30 $(\u0026#34;#sendOrder\u0026#34;).click(function (e) { 31 // 姓名 32 33 var name = $(\u0026#34;#name\u0026#34;).val(); 34 35 $(\u0026#34;input\u0026#34;).focus(function () { 36 $(this).css(\u0026#34;border\u0026#34;, \u0026#34;\u0026#34;); 37 }); 38 39 // 擋住不填資料 40 41 if (name == \u0026#34;\u0026#34;) { 42 $(\u0026#34;#name\u0026#34;).css(\u0026#34;border\u0026#34;, \u0026#34;1px solid #ff0000\u0026#34;); 43 } else { 44 var name = name.replace(\u0026#34; \u0026#34;, \u0026#34;\u0026#34;); 45 46 var data = { 47 name: name, 48 }; 49 50 $.ajax({ 51 // 這邊用get type 52 53 type: \u0026#34;get\u0026#34;, 54 55 // api url - google appscript 產出的 url 56 57 url: \u0026#34;https://script.google.com/............\u0026#34;, 58 59 // 剛剛整理好的資料帶入 60 61 data: data, 62 63 // 資料格式是JSON 64 65 dataType: \u0026#34;JSON\u0026#34;, 66 67 // 成功送出 會回頭觸發下面這塊 68 69 success: function (response) { 70 console.log(response); 71 72 alert(\u0026#34;新增成功!!\u0026#34;); 73 }, 74 }); 75 } 76 }); 77 }); 78 \u0026lt;/script\u0026gt; 79\u0026lt;/body\u0026gt; check-in.html 1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;head\u0026gt; 3 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; 4 \u0026lt;title\u0026gt;報到 - 點名系統\u0026lt;/title\u0026gt; 5 \u0026lt;!-- 網站資訊 --\u0026gt; 6 \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;使用Google sheet的api紀錄出缺席\u0026#34; /\u0026gt; 7 \u0026lt;meta name=\u0026#34;author\u0026#34; content=\u0026#34;毛哥EM\u0026#34; /\u0026gt; 8 \u0026lt;!-- 讓網址正常顯示已經裝飾 --\u0026gt; 9 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34; /\u0026gt; 10 \u0026lt;meta name=\u0026#34;theme-color\u0026#34; content=\u0026#34;00BFFF\u0026#34; /\u0026gt; 11 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;style.css\u0026#34; media=\u0026#34;screen\u0026#34; /\u0026gt; 12 \u0026lt;!-- 載入jQuery和學生列表 --\u0026gt; 13 \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/jquery/1.11.1/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 14\u0026lt;/head\u0026gt; 15\u0026lt;script\u0026gt; 16 //用Get讀取資料 17 window.onload = () =\u0026gt; { 18 // api url - google appscript 產出的 url 19 let requestURL = \u0026#34;https://script.google.com/.........\u0026#34;; 20 let request = new XMLHttpRequest(); 21 request.open(\u0026#34;GET\u0026#34;, requestURL); 22 request.responseType = \u0026#34;json\u0026#34;; 23 request.send(); 24 //收到資料後輪流做成按鈕 25 request.onload = function () { 26 let student = request.response; 27 for (var i in student) { 28 var now = student[i]; 29 var stu = now.name; 30 var left = now.left; 31 --left; 32 var but = \u0026#39;\u0026lt;button id=\u0026#34;\u0026#39; + stu + \u0026#39;\u0026#34;\u0026gt;\u0026#39; + stu + \u0026#34;\u0026lt;/button\u0026gt;\u0026#34;; 33 console.log(but); 34 $(\u0026#34;#students\u0026#34;).append(but); 35 var iden = \u0026#34;#\u0026#34; + stu; 36 var click = \u0026#39;to(\u0026#34;\u0026#39; + stu + \u0026#39;\u0026#34;, \u0026#39; + left + \u0026#34;);\u0026#34;; 37 $(iden).attr(\u0026#34;onclick\u0026#34;, click); 38 } 39 //載入完成後更改副標題 40 $(\u0026#34;#header\u0026#34;).text(\u0026#34;點擊姓名即可完成報到\u0026#34;); 41 }; 42 }; 43 function to(name, have) { 44 var currentdate = new Date(); 45 var filltime = currentdate.getFullYear() + \u0026#34;/\u0026#34; + (currentdate.getMonth() + 1) + \u0026#34;/\u0026#34; + currentdate.getDate() + \u0026#34; \u0026#34; + currentdate.getHours() + \u0026#34;:\u0026#34; + currentdate.getMinutes() + \u0026#34;:\u0026#34; + currentdate.getSeconds(); 46 // 打包 要的資料 47 var course = have; 48 console.log(course); 49 var data = { 50 name: name, 51 time: filltime, 52 remain: course, 53 }; 54 var tag = name; 55 $.ajax({ 56 // 這邊用get type 57 type: \u0026#34;get\u0026#34;, 58 // api url - google appscript 產出的 url 59 url: \u0026#34;https://script.google.com/.........\u0026#34;, 60 // 剛剛整理好的資料帶入 61 data: data, 62 // 資料格式是JSON 63 dataType: \u0026#34;JSON\u0026#34;, 64 // 成功送出 會回頭觸發下面這塊 65 success: function (response) { 66 var msg = response; 67 alert(\u0026#34;報到成功! 還剩\u0026#34; + course + \u0026#34;堂課\u0026#34;); 68 }, 69 }); 70 //報到完成的顯示在下方框框並將按鈕隱藏 71 $(\u0026#34;#ed\u0026#34;).prepend(\u0026#34;\u0026lt;li\u0026gt;\u0026#34; + tag + \u0026#34;\u0026lt;/li\u0026gt;\u0026#34;); 72 var id = \u0026#34;#\u0026#34; + tag; 73 $(id).fadeOut(); 74 } 75\u0026lt;/script\u0026gt; 76\u0026lt;/head\u0026gt; 77\u0026lt;body\u0026gt; 78 \u0026lt;main\u0026gt; 79 \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;index.html\u0026#34;\u0026gt;點名系統\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; 80 \u0026lt;p id=\u0026#34;header\u0026#34;\u0026gt;載入中\u0026lt;/p\u0026gt; 81 \u0026lt;div id=\u0026#34;students\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 82 \u0026lt;h2\u0026gt;已到學生\u0026lt;/h2\u0026gt; 83 \u0026lt;p class=\u0026#34;ed\u0026#34; id=\u0026#34;ed\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; 84 \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;https://Edit-Mr.github.io\u0026#34;\u0026gt;毛哥EM\u0026lt;/a\u0026gt;製作\u0026lt;/p\u0026gt; 85 \u0026lt;/main\u0026gt; 86\u0026lt;/body\u0026gt; search.html 1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;head\u0026gt; 3 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; 4 \u0026lt;title\u0026gt;查詢 - 點名系統\u0026lt;/title\u0026gt; 5 \u0026lt;!-- 網站資訊 --\u0026gt; 6 \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;使用Google sheet的api紀錄出缺席\u0026#34; /\u0026gt; 7 \u0026lt;meta name=\u0026#34;author\u0026#34; content=\u0026#34;毛哥EM\u0026#34; /\u0026gt; 8 \u0026lt;!-- 讓網址正常顯示以及裝飾 --\u0026gt; 9 \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34; /\u0026gt; 10 \u0026lt;meta name=\u0026#34;theme-color\u0026#34; content=\u0026#34;00BFFF\u0026#34; /\u0026gt; 11 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;style.css\u0026#34; media=\u0026#34;screen\u0026#34; /\u0026gt; 12 \u0026lt;!-- 載入jQuery --\u0026gt; 13 \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/jquery/1.11.1/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 14\u0026lt;/head\u0026gt; 15\u0026lt;body\u0026gt; 16 \u0026lt;main\u0026gt; 17 \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;index.html\u0026#34;\u0026gt;點名系統\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; 18 \u0026lt;p\u0026gt;紀錄查詢\u0026lt;/p\u0026gt; 19 \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;name\u0026#34; /\u0026gt; 20 \u0026lt;button type=\u0026#34;button\u0026#34; id=\u0026#34;send\u0026#34;\u0026gt;查詢\u0026lt;/button\u0026gt; 21 \u0026lt;!-- 顯示查詢結果的表格 先隱藏 --\u0026gt; 22 \u0026lt;table class=\u0026#34;table table-striped\u0026#34; style=\u0026#34;display: none;\u0026#34;\u0026gt; 23 \u0026lt;thead\u0026gt; 24 \u0026lt;tr\u0026gt; 25 \u0026lt;th\u0026gt;姓名\u0026lt;/th\u0026gt; 26 \u0026lt;th\u0026gt;報到時間\u0026lt;/th\u0026gt; 27 \u0026lt;th\u0026gt;剩下課堂\u0026lt;/th\u0026gt; 28 \u0026lt;/tr\u0026gt; 29 \u0026lt;/thead\u0026gt; 30 \u0026lt;tbody id=\u0026#34;dataView\u0026#34;\u0026gt; 31 \u0026lt;!-- 查詢到的資料會插入到這裡 --\u0026gt; 32 \u0026lt;/tbody\u0026gt; 33 \u0026lt;/table\u0026gt; 34 \u0026lt;p\u0026gt; 35 \u0026lt;a href=\u0026#34;https://Edit-Mr.github.io\u0026#34;\u0026gt;毛哥EM\u0026lt;/a\u0026gt;製作\u0026lt;br /\u0026gt; 36 送出後請稍等數秒 37 \u0026lt;/p\u0026gt; 38 \u0026lt;/main\u0026gt; 39 \u0026lt;script\u0026gt; 40 //當傳送按鈕被點擊 41 $(function () { 42 $(\u0026#34;#send\u0026#34;).click(function (e) { 43 var status = true; 44 var name = $(\u0026#34;#name\u0026#34;).val(); 45 $(\u0026#34;input\u0026#34;).focus(function () { 46 $(this).css(\u0026#34;border\u0026#34;, \u0026#34;\u0026#34;); 47 }); 48 //擋住沒有輸入姓名 49 if (name == \u0026#34;\u0026#34;) { 50 $(\u0026#34;#name\u0026#34;).css(\u0026#34;border\u0026#34;, \u0026#34;1px solid #ff0000\u0026#34;); 51 } else { 52 var data = { 53 name: name, 54 }; 55 //Post到前面做的API，記得更改網址 56 $.ajax({ 57 // 這邊用post type 58 type: \u0026#34;post\u0026#34;, 59 // api url - google appscript 產出的 url 60 url: \u0026#34;https://script.google.com/...........\u0026#34;, 61 data: data, 62 dataType: \u0026#34;JSON\u0026#34;, 63 success: function (response) { 64 var content = \u0026#34;\u0026#34;; 65 //把資料一行行做出表格 66 response.forEach((element) =\u0026gt; { 67 var [name, time, remain] = element.data; 68 var index = element.index; 69 content += `\u0026lt;tr\u0026gt; 70 \u0026lt;td\u0026gt;${name}\u0026lt;/td\u0026gt; 71 \u0026lt;td\u0026gt;${new Date(time)}\u0026lt;/td\u0026gt; 72 \u0026lt;td\u0026gt;${remain}\u0026lt;/td\u0026gt; 73 \u0026lt;/tr\u0026gt;`; 74 }); 75 //如果有資料的話顯示表格，否則提示查無資料 76 if (content) { 77 document.getElementsByClassName(\u0026#34;table-striped\u0026#34;)[0].style.display = \u0026#34;table\u0026#34;; 78 } else { 79 alert(\u0026#34;查無資料\u0026#34;); 80 } 81 var dataView = document.getElementById(\u0026#34;dataView\u0026#34;); 82 dataView.innerHTML = content; 83 $(\u0026#34;#name\u0026#34;).val(\u0026#34;\u0026#34;); 84 }, 85 }); 86 } 87 }); 88 }); 89 \u0026lt;/script\u0026gt; 90\u0026lt;/body\u0026gt; style.css 1@charset \u0026#34;utf-8\u0026#34;; 2/*按鈕 3-----------------*/ 4button { 5 outline: 0; 6 font-size: 1.5em; 7 font-weight: 600; 8 background: #fff; 9 border: none; 10 margin: 5px; 11 padding: 0.5em; 12 transition: all 0.3s ease-out; 13 box-shadow: inset 0 -8px 0 0 rgba(0, 0, 0, 0.2), 1px 1px 0 0 deepskyblue, 2px 2px 0 0 deepskyblue, 3px 3px 0 0 deepskyblue, 4px 4px 0 0 deepskyblue, 5px 5px 0 0 deepskyblue, 6px 6px 0 0 deepskyblue, 7px 7px 0 0 deepskyblue, 14 8px 8px 0 0 deepskyblue, 9px 9px 0 0 deepskyblue, 10px 10px 0 0 deepskyblue, 11px 11px 0 0 deepskyblue, 12px 12px 0 0 deepskyblue; 15} 16button:hover { 17 color: #444; 18 box-shadow: inset 0 -4px 0 0 rgba(0, 0, 0, 0.2), 1px 1px 0 0 deepskyblue, 2px 2px 0 0 deepskyblue, 3px 3px 0 0 deepskyblue, 4px 4px 0 0 deepskyblue, 5px 5px 0 0 deepskyblue; 19} 20button:active { 21 color: #222; 22} 23/*其他 24-----------------*/ 25a { 26 color: white; 27 text-decoration: none; 28} 29a:hover { 30 text-decoration: underline; 31} 32.ed { 33 padding: 5px; 34 border: 5px white solid; 35 border-radius: 10px; 36} 37input { 38 outline: 0; 39 font-size: 1.5em; 40 font-weight: 600; 41 background: #fff; 42 border: none; 43 box-shadow: inset 0 -4px 0 0 rgba(0, 0, 0, 0.2), 1px 1px 0 0 deepskyblue, 2px 2px 0 0 deepskyblue, 3px 3px 0 0 deepskyblue, 4px 4px 0 0 deepskyblue, 5px 5px 0 0 deepskyblue; 44 margin: 5px; 45 padding: 0.5em; 46 transition: all 0.3s ease-out; 47 box-shadow: inset 0 -8px 0 0 rgba(0, 0, 0, 0.2), 1px 1px 0 0 deepskyblue, 2px 2px 0 0 deepskyblue, 3px 3px 0 0 deepskyblue, 4px 4px 0 0 deepskyblue, 5px 5px 0 0 deepskyblue, 6px 6px 0 0 deepskyblue, 7px 7px 0 0 deepskyblue, 48 8px 8px 0 0 deepskyblue, 9px 9px 0 0 deepskyblue, 10px 10px 0 0 deepskyblue, 11px 11px 0 0 deepskyblue, 12px 12px 0 0 deepskyblue; 49} 50body { 51 background-color: lightskyblue; 52 color: white; 53} 54main { 55 position: relative; 56 margin: auto; 57 width: 100%; 58 height: 100%; 59 text-align: center; 60} 61h1 { 62 margin-bottom: -10px; 63} 64 65table { 66 margin-top: 30px; 67 color: black; 68 border-spacing: 1; 69 border-collapse: collapse; 70 background: white; 71 border-radius: 6px; 72 max-width: 100%; 73 width: 100%; 74} 75table * { 76 position: relative; 77} 78table td, 79table th { 80 padding-left: 8px; 81} 82table thead tr { 83 height: 60px; 84 background: deepskyblue; 85 font-size: 16px; 86} 87table tbody tr { 88 height: 48px; 89 border-bottom: 1px solid #e3f1d5; 90} 這樣就完成囉\n","link":"https://emtech.cc/post/frog_check_in/","section":"post","tags":["自製","HTML","CSS","JavaScript","Github","GAS"],"title":"【GAS】自製點名系統"},{"body":"關於此網站 從小開始涉獵3C產品，我積累了許多個人技能和創作作品。許多優秀的軟體和工具缺乏中文資源，英文資料大多來自官方文件，並不適合一般讀者。因此，我決定開設一個部落格，用平易近人的語言與大家分享如何輕鬆使用這些工具，即使不懂程式設計也能掌握。這個部落格從我國中時期開始，一直持續更新至今。\n版權宣告 寫技術性文章十分不易，因此如果有引用我的文章或作品的話希望能標明出處，不勝感激。\n關於我 哈囉，我是毛哥EM，一位數位創作者。 我喜歡用科技進行各種各樣的創作，比如電繪、音樂、平面設計和網頁設計等。\n我的Github狀態 聯絡資訊 歡迎合作、共筆。如果有任何問題或建議，歡迎聯絡我。\nEmail: info@elvismao.com Instergram: @emtech.cc ","link":"https://emtech.cc/about/","section":"","tags":null,"title":"關於"},{"body":"使用多個螢幕可以大大的增加工作效率。比如說在開直播時可以在遊戲全螢幕時同時做OBS畫面切換或是查看聊天室。 但是你是否有發現所有螢幕的桌布都只能設定一樣的。而如果你像我一樣兩個螢幕比例不同的話，其中一張比例會直接跑掉，十分的影響美觀。\n但是有了MultiWall，你不但可以幫不同的螢幕設定不同的桌布，還可以讓一張背景橫跨多個桌布來達到延伸的效果。\nMultiWall 開發者:is.gd 軟體類型:免費軟體 網址:官網 使用教學 下載 從官網下載MultiWall並安裝\n設定桌布 建議開啟軟體之後先按下Detect來偵測桌面 接著選擇模式:延伸圖片或分別用不同的圖片 接著選取你電腦上的桌布或示範例圖庫 你可以給圖片加上各種濾鏡或特效，但是我建議在導入軟體之前就先編輯好\n最後按下apply即可 ","link":"https://emtech.cc/post/multiwall/","section":"post","tags":["Windows"],"title":"【MultiWall】讓不同螢幕放不同桌布"},{"body":"太長的網址常除了不好看占版面之外，也難以令人記住。因此所短網址是一個不錯的做法。而其中我最常用的就是is.gd，因為它is good~\n其實主要的原因是因為它很短，比bit.ly短了一個字母，而且頁面超簡單，載入速度快。而它也有可以API可以使用(Apple官方的縮短網址ios捷徑就是使用is.gd)\nis.gd 開發者:is.gd 網站類型:免費網站 網址:is.gd 前往is.gd並在方框輸入你要縮短的URL(我以EM's Base為例為例) 這時你可以直接按下Shorten來縮短，但是我們可以做更進一步的自訂。包括Lower case(全部小寫)，或Lower case pronounceable(可讀的小寫單字)。我通常會選擇Lower case pronounceable，我比較記得下來。最厲害的是你也可以自訂後面的網址！且完全免費！在輸入框填入想要的文字（六個字母以上）並按shorten即可。如果已經被使用過或不符合規定會提醒你。\n按下Shorten後即可得到一個連結。進到那個網址就會直接重新導向道你指定的網址。\nis.gd因為非常簡單所以深得我心，在必須手記網址時真的非常實用。功能強大，真心推薦給大家。順帶一提，is.gd的姊妹網站v.gd也是一樣的功能。但是因為我覺得頁面沒那麼好看所以還是習慣用 is.gd\n","link":"https://emtech.cc/post/is-gd/","section":"post","tags":null,"title":"【is.gd】超好用網址縮短！連Apple都在用"},{"body":"綠幕是拍片直播或視訊常用到的好幫手，因為它可以讓你輕鬆地去除掉背景。只需要在軟體中選擇綠幕顏色，並調整各種數據即可。但是如果沒有綠幕怎麼辦?這時可以使用電腦免費的視訊會議軟體Zoom達到一樣的效果。 toc = true\n步驟 製作背景 我們需要一張只有一個顏色的圖片來作為Zoom的背景。以和人物最不相關為原則(通常使用綠色)。你可以使用小畫家來繪製。\n用油漆塗滿你選的顏色\n設定Zoom 請先到到官網下載並安裝。安裝方式和其他軟體差不多 Zoom 開發者:Zoom Video Communications 軟體類型:商業軟體 下載位置:官網 登入Zoom 根據你的習慣選擇登入方式，我是使用Google登入，其他也都可以。\n開啟一個新的視訊會議 在應用程式點選新會議\n不用讓程式獲取音訊 點X就好了\n設定 點擊左上方的會議資訊，並進入設定。我們需要改兩個項目：\n取消勾選視訊下的一律在視訊上顯示參與者名稱(需要下滾)\n更改背景成剛才製作的圖片。\n縮小畫面 回到視訊，點選最小化。視窗會小到你只能看到自己。 小提醒 如果縮小畫面還是有名字的話，可以把視窗放大再縮小一次。\nOBS設定 進入OBS並攝取這個Zoom小視窗。我個人是使用Streamlabs OBS，因為介面好看。這裡提供我的作法。\n打開OBS，新增Scene 增加Window Capture 命名 可依你自己喜好。記得選擇新來源再按Add Source\n設定攝取來源 圖片內為推薦設定，不同可能造成攝取失敗。\n放到最大 可視情況調整 小提醒 要放到最大記得選「Fit to screen」而不是「Stretch to screen」，否則你的臉會變形。\n6.新增色鍵 色鍵(Color Key)可以去除指定的顏色。你可以根據情況調整參數，自己試試看\n最後你也可以根據需求增加其他畫面。\n","link":"https://emtech.cc/post/vb-cable/","section":"post","tags":["OBS","Windows"],"title":"【Zoom】是個超讚綠幕!輕鬆去背到OBS"},{"body":"","link":"https://emtech.cc/tags/obs/","section":"tags","tags":null,"title":"OBS"},{"body":"只要透過這個捷徑即可一鍵下載網頁中的指定或所有照片。只需要分享網頁並選擇此捷徑即會自動下載並詢問要儲存的照片，選擇後會儲存到相簿。\n儲存影像 開發者:毛哥EM(我) 軟體類型:ios捷徑 下載位置: iCloud 捷徑有兩個不同模式，分別是「Safari網頁」和「網址下載」。原理不太一樣，詳細差異如下。\nSafari網頁 只適用於Safari。\n這個版本是直接下載當前網頁中所有包含圖像標籤''的元素並一一下載。\n網址下載 此版本適用於任何瀏覽器，甚至是複製網址即可。\n這個版本的原理是用捷徑重新讀取輸入的網址的網頁並抓取中所有能被捷徑判斷為圖片的影像。\n我該使用哪個 如果網站不是打開連結就能看到圖片（如需要登入、或是當場生成的影像），請使用Safari網頁版。其他網站（如維基百科、毛哥EM資訊密技）兩者皆可。\n如果你是Safari的使用者我推薦你使用Safari網頁版，讀取到的機率較高，且速度較快。\n使用方法 請在任意網頁按下分享鍵並選取捷徑，以及模式即可。下載的內容會直接儲存到相簿\n小提醒 如果手機說無法加入不受信任的捷徑，請參考這篇文章提供的方法。 ","link":"https://emtech.cc/post/shortcut-save_images/","section":"post","tags":["自製","ios捷徑"],"title":"【捷徑】一鍵下載網頁所有照片"},{"body":"我保證這是史上最快的簡訊實名制方法\n簡訊實名制 開發者:毛哥EM(我) 軟體類型:ios捷徑 下載位置:iCloud 多人實名制 開發者:毛哥EM(我) 軟體類型:ios捷徑 下載位置:iCloud 建議將它訂選在主畫面。要使用它只需要點一下，掃描，就結束了。重頭到尾之需點一下開啟，連傳送都不用點。有沒有超方便~\n多人怎麼辦？ 我有設計一個多人版的，但建議兩個都下載。因為如果只有一個人的話就不用再輸入人數了。 小提醒 如果手機說無法加入不受信任的捷徑，請參考這篇文章提供的方法。 你也可以用Siri執行這個捷徑。 ","link":"https://emtech.cc/post/shortcut-real_name_system/","section":"post","tags":["自製","ios捷徑"],"title":"【捷徑】史上最快簡訊實名制"},{"body":"想要加快工作效率，減少滑鼠的使用是個最直接的方法。這裡我提供了一些我常用但是很少人知道的快捷鍵供大家參考。\nWin+數字 - 快速開啟應用 Windows的工作列可以訂選軟體。使你快速找到並執行應用程式。但是你知道嗎，你可以使用快捷鍵Windows+數字鍵來快速開啟程式。像我是將調整各個音量比例的音量混音程式放在第一個。因此我只需要按下Windows+1就可以開啟，十分方便。\nWin+V - 查看剪貼版歷史 使用這個快捷鍵即可教出之前複製過的項目。只需點選要使用的項目就可以直接貼上。對我來說常用於需要複製大量位置不同的文字時非常方便。 需要注意的是，電腦第一次按下Windows+V之後才會開始記錄。因此不妨現在就按下吧。\nCrl+B Crl+I Crl+U 如果你正在進行文書處裡。想要將文字進行粗體必須要點又見或著是找上方的工作列。但是你知道嗎，你只需要反白文字後按下Crl+B就可以啦。同樣的，Crl+I是斜體(incline)，Crl+U是底線(Underline)。 Shift+方向鍵 如果你想要選取文字時，比起使用游標或著是手，使用快捷鍵Shift+方向鍵會方便精確許多。\nCrl+Shift+方向鍵 與快捷鍵Shift+方向鍵不同的是他會直接選取整個段落\n以上就是幾個我常用但很多人不知道的快捷鍵。若你知道其他快捷鍵也歡迎在下方分享\n","link":"https://emtech.cc/post/windows-hotkey/","section":"post","tags":["Windows"],"title":"【Windows】賭你不知道的必記快捷鍵"},{"body":"透過這個捷徑快速進入當節課堂的Meet，再也不用怕忘記課表\n記得在國二在家上課的時候常常忘記記課表及找不到Meet代碼，或著是來不及再去Classroom找，因此我做了這個捷徑。\n203 Meet 開發者:毛哥EM(我) 軟體類型:ios捷徑 下載位置:iCloud 設定 當成功將捷徑加入裝置後，他會請你設定幾個變數。\n注意事項:直接按下一部即可 英會班級:衛道中學的英語會話課分成兩班，所以要在這裡輸入是A班還是B班。 使用者編號:如果沒有當堂課的Google Meet代碼，會連結到Classroom的畫面。如果這個裝置有多個帳號的話可以指定開啟哪一個帳號的Classroom。 原理 原理其實也很簡單，就是先Get一個我預先放在Github的JSON檔案來查看那一節是什麼課，再用Safari來打開它。Safari會自動開啟Google Meet並加入會議。有趣的是用Chrome開啟Google Meet連結並不會打開Google Meet 我覺得以我當時的設計得不錯，所以把檔案保留下來。 小提醒 但是這是當時的課程所以現在無法運作，但你可以下載下來做修改。 如果手機說無法加入不受信任的捷徑，請參考這篇文章提供的方法。 你也可以用Siri執行這個捷徑。 ","link":"https://emtech.cc/post/shortcut-joinmeetdirectly/","section":"post","tags":["自製","衛道中學","Github","JSON","ios捷徑"],"title":"【捷徑】快速進入當節課堂的Meet（備份）"},{"body":"不少人要下載Siri捷徑腳本時，都會因為捷徑的安全設定不允許不受信任的捷徑，導致無法順利下載此捷徑」\u0008那為什麼會變成這樣呢？難道都不能下載網頁上的捷徑腳本了嗎？\n其實這只是一個官方的安全性調整，在本站下載的Siri捷徑腳本是完全，不用擔心有安全疑慮。不過如果碰見這問題，可以透過以下方法來解決。\n解決方法 之需要到「設定」\u0026gt;「捷徑」內，將「允許不受信任的捷徑」開啟即可。 小提醒 如果手機有設定密碼可能會要求輸入 通常好用的捷徑腳本，是不會出現在官方捷徑資料庫內，這些都是由網友或我所製作而成，且本站所介紹過的捷徑腳本，也都會進行審核才會推薦分享，也歡迎大家可以分享，讓更多人看見。\n","link":"https://emtech.cc/post/shortcut-untrusted_shortcut/","section":"post","tags":["ios捷徑"],"title":"【捷徑】怎麼加入不受信任的捷徑?"},{"body":"只須點一下即可快速連結到衛道的網頁或檔案\n生為衛道的學生，不得不抱怨一下:頁面真的非常難找，都藏在非常深的目錄之下。因此我做了這個捷徑，讓你可以快速導航到你要的頁面。頁面也會隨時間進行更變，非常方便 衛道網頁書籤 開發者:毛哥EM(我) 軟體類型:ios捷徑 下載位置:iCloud 原理 原理其實也很簡單，就是先Get一個我預先放在Github的JSON檔案來查看我設定好的連結，再用選單讓你選。如果你選擇的是網頁的話會用Chrome來打開它；如果是檔案的話會直接下再並開啟預覽。 小提醒 如果手機說無法加入不受信任的捷徑，請參考這篇文章提供的方法。 你也可以用Siri執行這個捷徑。 ","link":"https://emtech.cc/post/shortcut-viatorbookmark/","section":"post","tags":["自製","ios捷徑","衛道中學","Github","JSON"],"title":"【捷徑】衛道網頁書籤"},{"body":"","link":"https://emtech.cc/tags/%E8%A1%9B%E9%81%93%E4%B8%AD%E5%AD%B8/","section":"tags","tags":null,"title":"衛道中學"},{"body":"","link":"https://emtech.cc/archives/","section":"","tags":null,"title":""},{"body":"","link":"https://emtech.cc/tags/index/","section":"tags","tags":null,"title":"index"}]