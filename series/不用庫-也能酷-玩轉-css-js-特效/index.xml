<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>不用庫 也能酷 - 玩轉 CSS &amp; Js 特效 on 毛哥EM資訊密技</title><link>https://EM-Tec.github.io/series/%E4%B8%8D%E7%94%A8%E5%BA%AB-%E4%B9%9F%E8%83%BD%E9%85%B7-%E7%8E%A9%E8%BD%89-css-js-%E7%89%B9%E6%95%88/</link><description>Recent content in 不用庫 也能酷 - 玩轉 CSS &amp; Js 特效 on 毛哥EM資訊密技</description><generator>Hugo -- gohugo.io</generator><copyright>毛哥EM</copyright><lastBuildDate>Mon, 16 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://EM-Tec.github.io/series/%E4%B8%8D%E7%94%A8%E5%BA%AB-%E4%B9%9F%E8%83%BD%E9%85%B7-%E7%8E%A9%E8%BD%89-css-js-%E7%89%B9%E6%95%88/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://EM-Tec.github.io/post/2023ironman-/</link><pubDate>Mon, 16 Oct 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-/</guid><description>
以上就是我今天的分享，歡迎在 Instagram 和 Google 新聞追蹤毛哥EM資訊密技，也歡迎訂閱我新開的YouTube頻道：網棧。
我是毛哥EM，讓我們明天再見。</description></item><item><title>Day30 三十天的血與淚 - 密技</title><link>https://EM-Tec.github.io/post/2023ironman-30/</link><pubDate>Sat, 14 Oct 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-30/</guid><description>
不知不覺，三十天的鐵人賽就要結束了。一開始還覺得時間很漫長，但到了二十幾天之後我開始發現時間不多了，十分珍惜每一次能夠和大家分享的機會。
這三十天我們做了什麼？ 在前面九天的文章中，我們直擊了許多人不敢去碰，但是對於要做出許多效果又是必備的技術。我們先複習 Flex 讓我們能隨心所欲切出任何我們想要的版面，用 @keyframes 與 transition 做出動畫效果，並認識開啟顏色新世界的 filter、color:color()、以及 mix-blend-mode 等等屬性。
在接下來的十幾天，我們製作了許多令人驚豔的效果。每一天專案的背後都會放入一些實用的思維，語法的應用，以及一些小技巧。希望用效果的視覺包裝可以讓大家更容易理解與覺得有趣，並且能夠在未來的開發中運用。
而到了第二十天的【Day20 GPU! 啟動! - 淺談 CSS3 硬體加速】 我們開始探討在技術上的選擇，以及如何讓網頁的動畫更加順暢，並帶出更多較為複雜的效果。
Day 22 JavaScript 乱薍覼釠亂碼效果
而到了最後五天，我們談到了一些網站最常見的效果，像是漢堡選單，滑動到特定位置時，會有動畫效果的 Animate On Scroll，以及網站最常見的輪播效果等。應用我們所學的語法讓這一些效果製作起來變得簡單但又十分獨一無二。
而到昨天我們回到了鐵人賽的頁面，並用我們所學的語法重現了 header 的太空效果。
身為一個高二的普通學生，平常能寫文章的時間真的有限，但是我還是盡量讓每一天的文章可以新鮮有趣，並且能夠讓新手容易閱讀，但老手又不會覺得無聊，保留一點深度。雖然這三十天裡沒有人留言或是 Like，但希望路過的你們能夠找到點你要的東西，或至少得到些快樂。
礙於時間和篇幅，我們沒有辦法把每一天的語法都探討得很深入，如果你有任何問題都可以留言告訴我，我會盡量回答。而如果有幸這個系列出成書，我會把每一天的效果和語法都做更詳細的介紹，並且加入更多的實用技巧。
背後的血與淚 這三十天的內容可以說是我對於我這一年來做的大小專案的回顧。有一些最後有成功發布，有一些效果在計畫在過程中就被捨棄了。每一個特效的背後都有一個故事，可能是數天燒腦的 Debug，或著是我和甲方溝通的血與淚。比如說【Day5 載入中… Animation-delay】的鍵盤特效是今年 DaptKey 團隊送我的快捷鍵盤，我回禮的使用心得文章加上這個載入特效。
平常寫文章的流程 在開始前其實我有先備幾篇半成的文章打在 Notion，原本想說都是 Markdown 語法，直接貼到iT邦就可以了，但是後來發現 Notion 的 Markdown 語法和iT邦的不太一樣，而且圖片也是一個很大的問題，所以最後我是用 VSCode 寫完文章，上傳到我的部落格，最後再貼到iT邦上。
因為開賽才注意到這個問題，所以重新整理文章花了我一點時間。基本上前二十天都是每天用下課、午休、和等公車的時間用學校的筆電撰寫。一天可以寫一篇左右，假日吃一點之前的庫存。但到後面基本上就是每天和12點賽跑，因為我還是希望每篇文章能夠完整的呈現，盡量把容易不懂的地方都解釋清楚。
在這三十天我有好幾天晚上做夢夢到忘記發文章被淘汰。
背後的朋友 在這三十天裡，有幾個朋友一直在背後幫助我。我一直都沒有機會提到他們，因此我希望在這裡能夠感謝他們。
第一個是剛才提到的 VSCode，我在寫文章的時候都是用 VSCode。他要插入圖片還蠻方便的，只需要複製圖片，在文中間貼上就會自動複製到資料夾並用 Markdown 插入。
截圖有的時候我會使用 Windows 內建的 Win + Shift + S，但大多數是使用 Firefox 內建的截圖工具，因為他在截圖時可以完美的擷取某個元素。</description></item><item><title>Day 29 鐵人賽太空粒子的例子</title><link>https://EM-Tec.github.io/post/2023ironman-29/</link><pubDate>Fri, 13 Oct 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-29/</guid><description>
相信大家對於這個頁面都不陌生吧。這是我們2023 iThome 鐵人賽的首頁。我覺得他的粒子特效和地球很酷，所以我們今天就來看看怎麼做吧。
以下是今天我們的目標。為了版面乾淨我省略了上面的文字，只留下熊俠、標題、粒子特效、和地球。且為了讓他不要太長我有稍微縮小了一點。
HTML 架構 上面 header 我們放了兩張圖片，一個是熊俠，一個是標題。下面的 section 我們放了五個 div，它們分別是
粒子特效 粒子特效 粒子特效 光線 地球 1&amp;lt;header&amp;gt; 2 &amp;lt;img src=&amp;#34;https://ithelp.ithome.com.tw/static/2023ironman/img/event/kv_deco_front.png&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt; 3 &amp;lt;img src=&amp;#34;https://ithelp.ithome.com.tw/static/2023ironman/img/event/logo-ironmankv.svg&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt; 4&amp;lt;/header&amp;gt; 5&amp;lt;section class=&amp;#34;sec_eff&amp;#34;&amp;gt; 6 &amp;lt;div class=&amp;#34;stars&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 7 &amp;lt;div class=&amp;#34;stars2&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 8 &amp;lt;div class=&amp;#34;stars3&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 9 &amp;lt;div class=&amp;#34;horizon&amp;#34;&amp;gt; 10 &amp;lt;div class=&amp;#34;glow&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 11 &amp;lt;/div&amp;gt; 12 &amp;lt;div class=&amp;#34;earth&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 13 &amp;lt;/div&amp;gt; 14&amp;lt;/section&amp;gt; header 版面 裡面兩張圖片用 flex 置中。背景放圖片上面疊上一層漸層。大小設為 cover 確保圖片有填滿。最後再調整一下上方的 padding 讓它看起來比較好看。
背景圖片寫前面的會疊在上面，寫後面的會疊在下面。
官網在背景圖片設定 background-size 時因為被 background 屬性預設的 auto 值影響，所以使用了 !important，不過其實只需要打在後面就可以了。</description></item><item><title>Day28 純 JavaScript Slider (ft. CSS scroll-snap-type)</title><link>https://EM-Tec.github.io/post/2023ironman-28/</link><pubDate>Thu, 12 Oct 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-28/</guid><description>
今天我們要來製作Slider效果。不過要用一個你應該沒有看過有人這樣做但卻很簡單的方法。
應用應該不用我多說，不管是公司網站展示產品，學校輪播榮譽榜，還是業界案例輪播介紹都會使用到slider。而我今天忙到晚上九點半才開始寫文章是因為白天在做這個心理測驗，左右滑動效果也是使用slider。
不過想到要定位、還要偵測各種滑鼠點擊、移動、手機點擊就十分麻煩。你寫 code 累 debug 累瀏覽器也累要一直監聽…歸剛欸…
這時 CSS 又出現了。向你介紹： scroll-snap-type。
scroll-snap-type 這個屬性可以讓元素上下或左右滑動時一滑就是整頁。我覺得最讚的是可以在筆電上面的觸控板直接往右滾，而且因為是內建語法所以非常順暢。使用用法如下:
1/* 不開 */ 2scroll-snap-type: none; 3 4/* 開 */ 5scroll-snap-type: x; 6scroll-snap-type: y; 7scroll-snap-type: block; 8scroll-snap-type: inline; 9scroll-snap-type: both; 10 11/* 縮寫，加上 強制 | 接近 設定 */ 12/* mandatory | proximity */ 13scroll-snap-type: x mandatory; 14scroll-snap-type: y proximity; 15scroll-snap-type: both mandatory; 建議設定成 mandatory比較能確保有被吸附到。
我的用法如下，外元素設定scroll-snap-type: x mandatory，內元素設定對齊位置 scroll-snap-align: center置中。完整版面如下:
1&amp;lt;section&amp;gt; 2 &amp;lt;div class=&amp;#34;items&amp;#34;&amp;gt; 3 &amp;lt;button onclick=&amp;#34;backward()&amp;#34;&amp;gt;❮&amp;lt;/button&amp;gt; 4 &amp;lt;div&amp;gt;1&amp;lt;/div&amp;gt; 5 &amp;lt;div&amp;gt;2&amp;lt;/div&amp;gt; 6 &amp;lt;div&amp;gt;3&amp;lt;/div&amp;gt; 7 &amp;lt;div&amp;gt;4&amp;lt;/div&amp;gt; 8 &amp;lt;/div&amp;gt; 9 &amp;lt;button onclick=&amp;#34;foward()&amp;#34;&amp;gt;❯&amp;lt;/button&amp;gt; 10&amp;lt;/section&amp;gt; 1* { 2 padding: 0; 3 margin: 0; 4 box-sizing: border-box; 5} 6body { 7 overflow: hidden; 8} 9section { 10 position: relative; 11} 12.</description></item><item><title>Day 27 iT 邦幫忙::一起幫忙製作導覽列，拯救第27天</title><link>https://EM-Tec.github.io/post/2023ironman-27/</link><pubDate>Wed, 11 Oct 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-27/</guid><description>
今天我們要來製作 iT 邦幫忙首頁的導覽列。我們先來看看原本的網站。
呃好喔...晚點再看看...
沒事我有先截圖。
你有注意到嗎?第二排的導覽列在往下滾之後會固定在上方，並顯示出縮小版的 Logo。我覺得蠻可愛的，一個好的 UI 就事要有這種平常不會注意但讓體驗很順暢舒服的小巧思。我們來搭配昨天的 Animate On Scroll 原理來製作吧。
複習: Day26 不要躲在下面動! Animate On Scroll 自己做
基本版面 首先我們先做一個類似於 iT 邦幫忙首頁的版面。這應該是這個系列最多的 HTML 了。
1&amp;lt;main&amp;gt; 2 &amp;lt;header class=&amp;#34;header&amp;#34;&amp;gt; 3 &amp;lt;div&amp;gt; 4 &amp;lt;img src=&amp;#34;https://ithelp.ithome.com.tw/storage/image/logo.svg&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt; 5 &amp;lt;/div&amp;gt; 6 &amp;lt;/header&amp;gt; 7 &amp;lt;nav&amp;gt; 8 &amp;lt;div&amp;gt; 9 &amp;lt;li&amp;gt;技術問答&amp;lt;/li&amp;gt; 10 &amp;lt;li&amp;gt;技術文章&amp;lt;/li&amp;gt; 11 &amp;lt;li&amp;gt;iT 徵才&amp;lt;/li&amp;gt; 12 &amp;lt;li&amp;gt;Tag&amp;lt;/li&amp;gt; 13 &amp;lt;li&amp;gt;聊天室&amp;lt;/li&amp;gt; 14 &amp;lt;li&amp;gt;2023 鐵人賽&amp;lt;/li&amp;gt; 15 &amp;lt;/ul&amp;gt; 16 &amp;lt;ul class=&amp;#34;right&amp;#34;&amp;gt; 17 &amp;lt;li&amp;gt;&amp;lt;i class=&amp;#34;fa-solid fa-magnifying-glass&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/li&amp;gt; 18 &amp;lt;li&amp;gt;&amp;lt;button&amp;gt;鐵人發文&amp;lt;/button&amp;gt;&amp;lt;/li&amp;gt; 19 &amp;lt;li&amp;gt;發問&amp;lt;/li&amp;gt; 20 &amp;lt;li&amp;gt;發文 &amp;lt;span class=&amp;#34;caret&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt; 21 &amp;lt;li&amp;gt;&amp;lt;i class=&amp;#34;fa fa-commenting fa-fw button&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/li&amp;gt; 22 &amp;lt;li&amp;gt;&amp;lt;i class=&amp;#34;fa fa-bell fa-fw button&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/li&amp;gt; 23 &amp;lt;li class=&amp;#34;pro&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;https://member.</description></item><item><title>Day26 不要躲在下面動! Animate On Scroll 自己做</title><link>https://EM-Tec.github.io/post/2023ironman-26/</link><pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-26/</guid><description>
我們都知道 CSS 動畫可以用 @keyframes 來做，但是他們都是馬上就觸發的。就算元素還沒有出現在畫面上，動畫也已經開始了。
如果要做出滾動到某個位置才觸發的動畫，就需要用到 JavaScript 來偵測滾動位置，然後再加上 CSS 動畫。沒錯，JavaScript 回來了。
原理 我們要做的是當元素出現在畫面上時，才觸發動畫。所以我們要偵測元素是否出現在畫面上。
我們可以用 getBoundingClientRect() 來取得元素相對於螢幕的位置，然後再用 window.innerHeight 來取得畫面的高度，就可以知道元素是否出現在畫面上了。
這裡是一個我做的範例。你可以看到當元素的上方超出畫面時top就會變負值。當元素的下方超出畫面時bottom的值會大於螢幕高度。那麼我們只需要有任何一部分有顯示在畫面上就可以觸發動畫了。
https://codepen.io/edit-mr/pen/ExGrxjX
為甚麼不要等整個元素顯示出來在觸發動畫?
因為如果元素很長，可能到半個畫面都空白之後他才出現會很奇怪。所以我們只要有任何一部分有顯示在畫面上就可以觸發動畫了，這樣滾動起來會比較順暢。
如果你想要的話可以自己改成等整個元素顯示出來再觸發動畫，或是設置一些延遲時間以及增加動畫長度。後者我比較推薦。
實作 先打點簡單的內容。我們幫需要動畫的內容加上 aos 這個 class。這樣我們只要偵測這些元素是否出現在畫面上。如果有的話就加上 ed 這個 class。這樣我們就可以用 CSS 來做動畫了。
叫做 ed 是因為英文過去式常常加上 ed，想說蠻直覺野蠻短的。如果你有更好的主意也可以改成其他名字。
1&amp;lt;h1 class=&amp;#34;aos&amp;#34;&amp;gt;Animate On Scroll&amp;lt;/h1&amp;gt; 2&amp;lt;p class=&amp;#34;aos&amp;#34;&amp;gt; 3 Lorem ipsum dolor sit amet consectetur adipisicing elit. Ad, mollitia magni nemo eius obcaecati aliquam ex nisi maiores. Autem hic illo quas amet ipsam. Eos tempore repellat sint illum tenetur!</description></item><item><title>Day25 有料的 CSS 漢堡選單</title><link>https://EM-Tec.github.io/post/2023ironman-25/</link><pubDate>Mon, 09 Oct 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-25/</guid><description>
我們今天要來做幾份漢堡選單。
原理和 Day14 今天我想來點… 純 CSS 的開關 一樣，都是用 input 的 checkbox 來儲存狀態好讓其他元素可以抓到。而他本身的狀態使用 label 來遠端遙控。
我先不要一次跳太多步驟。這是一個基本還未完成的版面。
1&amp;lt;input type=&amp;#34;checkbox&amp;#34; id=&amp;#34;menu&amp;#34;&amp;gt; 2&amp;lt;label for=&amp;#34;menu&amp;#34;&amp;gt; 3 &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; 4 &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; 5 &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; 6 &amp;lt;span class=&amp;#34;cover&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; 7&amp;lt;/label&amp;gt; 1label { 2 width: 3rem; 3 height: 3rem; 4 background: #00c3ff; 5 display: block; 6 border-radius: 50%; 7 display: flex; 8 flex-direction: column; 9 align-items: center; 10 justify-content: center; 11 gap: 0.25em; 12 position: relative; 13} 14 15label div { 16 width: 1.</description></item><item><title>Day24 CSS 相融黏滯效果</title><link>https://EM-Tec.github.io/post/2023ironman-24/</link><pubDate>Sun, 08 Oct 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-24/</guid><description>
今天我們要來做這個紓壓的效果:
https://codepen.io/edit-mr/pen/poqqoLr
然後你可以應用做出一些很酷的效果:
原理 原理其實很簡單。要讓兩個東西之間相連只需要模糊就會糊在一起了。
1&amp;lt;div class=&amp;#34;box&amp;#34;&amp;gt; 2 &amp;lt;div class=&amp;#34;circle-small&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 3 &amp;lt;div class=&amp;#34;circle-big&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 4&amp;lt;/div&amp;gt; 1.box { 2 position: relative; 3 height: 100vh; 4 background-color: #fff; 5} 6.circle-big, 7.circle-small { 8 filter: blur(10px); 9 border-radius: 50%; 10 width: 80px; 11 height: 80px; 12 background-color: red; 13 position: absolute; 14 left: 50%; 15 top: 50%; 16 transform: translate(-50%, -50%); 17} 18.circle-big { 19 width: 100px; 20 height: 100px; 21 background-color: black; 22 transform: translate(0, -50%); 23} 然後增加對比讓中間模糊的部分更明顯:</description></item><item><title>Day23 優雅的漸層動畫 - 隨機而有秩序</title><link>https://EM-Tec.github.io/post/2023ironman-23/</link><pubDate>Sat, 07 Oct 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-23/</guid><description>
今天我們會提到幾個不同的原理。你可以像生菜沙拉一樣自己條配。
漸層動畫有甚麼難的? 我阿嬤...不會 CSS
1body { 2 background: linear-gradient(90deg, red, yellow); 3 animation: gradientChange 1s infinite; 4} 5 6@keyframes gradientChange { 7 to { 8 background: linear-gradient(90deg, yellow, green); 9 } 10} 額，只有層，沒有漸。這是因為漸層是屬於 background-image，你要他怎麼漸圖片?
自己動 我們今天要用到的第一個方式是放大縮小，以及移動一個漸層，這樣就能做出類似於漸層的動畫。
background-position 我們先把圖片拉長到兩倍，然後移動 background-position 來做出動畫。
1body { 2 background: linear-gradient(90deg, red, yellow); 3 background-size: 200% 100%; 4 background-position: 0 0; 5 animation: gradientChange 2s infinite linear alternate; 6} 7 8@keyframes gradientChange { 9 from { 10 background-position: 0 0; 11 } 12 to { 13 background-position: 100% 0; 14 } 15} background-size background-size 如果不搭配 background-position 的會可以做出這種左邊維持不動，右邊比例不同漸層的效果。</description></item><item><title>Day 22 JavaScript 乱薍覼釠亂碼效果</title><link>https://EM-Tec.github.io/post/2023ironman-22/</link><pubDate>Fri, 06 Oct 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-22/</guid><description>
&lt;p>今天我們要來做一些乱薍覼釠亂碼效果。&lt;/p></description></item><item><title>Day21 就是要對決 - CSS 和 JS 動畫，哪個更絲滑？</title><link>https://EM-Tec.github.io/post/2023ironman-21/</link><pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-21/</guid><description>
今天是第二十一天，已經走完2/3的路程，我媽還以為我早被淘汰了。這個系列明明是叫【不用庫 也能酷 - 玩轉 CSS &amp;amp; Js 特效】，但 Js 出現了幾篇?有五篇嗎?難道 JavaScript 是來湊關鍵字的嗎?今天就來聊聊為甚麼使用純 CSS 做效果如此吸引人。
對手進場 CSS transition 和 @keyframes 就性能上來說兩者基本上沒有區別，所以我們都歸於 CSS 動畫。你可以根據使用情境來選擇使用哪一種。比如說滑鼠互動可以使用 transition，出場動畫可以使用 @keyframes。
複習：Day4 自己動! @keyframes 與 Transition
JavaScript requestAnimationFrame() requestAnimationFrame() 會在瀏覽器畫下一幀繪制之前調用。因此比設定固定時間重繪的 setTimeout() 或 setInterval()效率高得多。開發人員可以通過簡單地改變元素的樣式（或者更新畫布繪制等等）來創建動畫。
備註: 不管是 CSS 動畫還是 JavaScript 動畫，如果你離開當前頁面，動畫就會停止。比如說 Day10 永無止境跑馬燈 - 不同螢幕 相同速度 的跑馬燈就是如此。
如果你想要在背景執行動畫，可以使用 Web Worker。
就是要對決 我這裡使用 FireFox Developer Edition 來測試，因為它在 CSS Debug 有很多很棒的功能。而今天我們要讓他幫助我們看到動畫的 FPS。
用 Firefox 還有一個原因是他在隱私權保護方面抓得很緊，所以在 Firefox 上面能用基本上 Chromium 都不會有太大問題。
首先請你先到about:config，他很貼心請你要小心，選擇接受風險並繼續即可。
請你搜尋gfx.webrender.debug.profiler-ui</description></item><item><title>Day20 GPU! 啟動! - 淺談 CSS3 硬體加速</title><link>https://EM-Tec.github.io/post/2023ironman-20/</link><pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-20/</guid><description>
今天我們要來探討如何善用使用者的 GPU 資源，讓網頁的動畫更加順暢。我盡量讓內容簡單易懂，可以當一篇科普文章閱讀。
瀏覽器的渲染流程 在我們討論之前，我們先來看看瀏覽器的渲染流程。這裡我畫了一張可愛的小圖
JavaScript: JavaScript 實現動畫效果，DOM 元素操作等。 Style（計算樣式）: 決定每個 DOM 元素應該套用什麼 CSS 規則。 Layout（佈局）: 計算每個 DOM 元素在最終畫面上顯示的大小和位置。 由於 web 頁面的元素佈局是相對的，所以其中任一個元素的位置發生變化，都會聯動的引起其他元素發生變化，這個過程叫做 reflow。 Paint（繪製）: 在多個圖層上繪製 DOM 元素的文字、顏色、圖像、邊框和陰影等。 Composite（渲染圖層合併）: 依照合理的順序合併圖層然後顯示到螢幕上。 在這裡你可以看到每次你的動畫在跑， CPU 都會需要重新計算一次佈局，然後重新繪製，最後再合併圖層。這個過程會造成 CPU 的負擔，導致電腦發熱，耗電量增加，然後全台停電等等。這時候 CSS3 硬體加速就派上用場了。
啊 GPU 買你那麼貴你在那裡爽啊 其實 GPU 也不是一直在爽，它有時候也有在做事情。我們先來談談 GPU 厲害的點在哪裡。
GPU 厲害的是他會把在改變的元素獨立抽出來一個圖層，修改完再插回去。這樣就不用每次都重新繪製整個畫面，只需要繪製這個塗層就好了。這樣就可以大大減少 CPU 的負擔，讓動畫更加順暢。
如何使用 CSS3 硬體加速 但由此你也可以看出，一定要瀏覽器建立獨立圖層才能使用 GPU 加速。
自動建立條件 以下這些情況瀏覽器會自動幫你建立獨立圖層：
使用某些特定的3D或透視效果的CSS屬性。 在顯示視頻時，使用支援硬體加速的video元素。 在畫布上繪製圖像時，使用3D(WebGL)技術或硬體加速的2D畫布(canvas)元素。 如果你的網頁使用了Flash等外掛程式。 當改變元素的透明度（opacity）時，使用CSS動畫，或者對元素應用webkit 畫變換。 使用支援硬體加速的CSS濾鏡效果的元素。 當一個元素包含其他子元素，這些子元素在自己的圖層中。 當一個元素有一個兄弟元素，並且這個兄弟元素在一個特別的圖層中，同時這個兄弟元素的顯示順序比較低（z-index較小）。 GPU! 啟動! 這幾個 CSS 屬性會觸發建立獨立圖層：</description></item><item><title>Day19 純 CSS 做出彈出式 Lightbox</title><link>https://EM-Tec.github.io/post/2023ironman-19/</link><pubDate>Tue, 03 Oct 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-19/</guid><description>
最討厭的廣告就是彈出式 Lightbox 廣告了，他會突然跳出來，然後你要去找那個超小的叉叉關掉他。今天我們不是要重現煩人的廣告，而是要來認識 CSS 選擇器 :target 並做出以下效果。
我們來用 Lightbox 看貓貓
認識 :taget :target 是一個虛擬類別（pseudo-class） 選擇器。他選擇的是超連結連結到的錨點（anchor）。直接上範例你就懂了。
1&amp;lt;a href=&amp;#34;#one&amp;#34;&amp;gt;One&amp;lt;/a&amp;gt; 2&amp;lt;a href=&amp;#34;#two&amp;#34;&amp;gt;Two&amp;lt;/a&amp;gt; 3&amp;lt;a href=&amp;#34;#&amp;#34;&amp;gt;no&amp;lt;/a&amp;gt; 4&amp;lt;div id=&amp;#34;one&amp;#34;&amp;gt;One&amp;lt;/div&amp;gt; 5&amp;lt;div id=&amp;#34;two&amp;#34;&amp;gt;Two&amp;lt;/div&amp;gt; 1div:target{ 2 background: yellow; 3} 實作 那我們就裝飾一下這個版面和 Lightbox 就好啦!先從維基共享資源抓幾張圖片。
1&amp;lt;div id=&amp;#34;one&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;https://upload.wikimedia.org/wikipedia/commons/thumb/5/5e/Domestic_cat_in_the_grass.JPG/640px-Domestic_cat_in_the_grass.JPG&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 2&amp;lt;div id=&amp;#34;two&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;https://upload.wikimedia.org/wikipedia/commons/thumb/1/15/Cat_August_2010-4.jpg/640px-Cat_August_2010-4.jpg&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 3&amp;lt;div id=&amp;#34;three&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;https://upload.wikimedia.org/wikipedia/commons/thumb/4/4d/Cat_November_2010-1a.jpg/640px-Cat_November_2010-1a.jpg&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 4&amp;lt;section&amp;gt; 5 &amp;lt;a href=&amp;#34;#one&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;https://upload.wikimedia.org/wikipedia/commons/thumb/5/5e/Domestic_cat_in_the_grass.JPG/640px-Domestic_cat_in_the_grass.JPG&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt;&amp;lt;/a&amp;gt; 6 &amp;lt;a href=&amp;#34;#two&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;https://upload.wikimedia.org/wikipedia/commons/thumb/1/15/Cat_August_2010-4.jpg/640px-Cat_August_2010-4.jpg&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt;&amp;lt;/a&amp;gt; 7 &amp;lt;a href=&amp;#34;#three&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;https://upload.wikimedia.org/wikipedia/commons/thumb/4/4d/Cat_November_2010-1a.jpg/640px-Cat_November_2010-1a.jpg&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt;&amp;lt;/a&amp;gt; 8&amp;lt;/section&amp;gt; 9&amp;lt;a href=&amp;#34;#&amp;#34; id=&amp;#34;close&amp;#34;&amp;gt;✖&amp;lt;/a&amp;gt; 連結有點亂我簡化一下，架構長這樣。
1&amp;lt;div id=&amp;#34;one&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 2&amp;lt;div id=&amp;#34;two&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 3&amp;lt;div id=&amp;#34;three&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 4&amp;lt;section&amp;gt; 5 &amp;lt;a href=&amp;#34;#one&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt;&amp;lt;/a&amp;gt; 6 &amp;lt;a href=&amp;#34;#two&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt;&amp;lt;/a&amp;gt; 7 &amp;lt;a href=&amp;#34;#three&amp;#34;&amp;gt;&amp;lt;img src=&amp;#34;&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt;&amp;lt;/a&amp;gt; 8&amp;lt;/section&amp;gt; 9&amp;lt;a href=&amp;#34;#&amp;#34; id=&amp;#34;close&amp;#34;&amp;gt;✖&amp;lt;/a&amp;gt; 簡單 CSS 裝飾，顏色使用 Nord 的 Polar Night 配色</description></item><item><title>Day18 純 CSS DVD 反彈動畫</title><link>https://EM-Tec.github.io/post/2023ironman-18/</link><pubDate>Mon, 02 Oct 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-18/</guid><description>
&lt;p>今天我們要使用純 CSS 實現 DVD 反彈動畫，讓大家認識 &lt;code>steps()&lt;/code> 以及 &lt;code>animation-composition&lt;/code> 屬性的使用方式，並提供這個實用的應用。(應該吧...)&lt;/p></description></item><item><title>Day17 css.wav 純CSS波浪進度條</title><link>https://EM-Tec.github.io/post/2023ironman-17/</link><pubDate>Sun, 01 Oct 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-17/</guid><description>
&lt;p>以往製作波浪效果不是使用 GIF 就是借助貝茲曲線。貝茲曲線就是 Ai 或是 Vectornator (現在叫做Curve) 裡面的鋼筆工具。隨便拉都會有波浪的感覺，且使用 SVG或 JavaScript Canvas 都不難實現。&lt;/p></description></item><item><title>Day16 今天我想來...欸現在幾點? - CSS畫出 iOS 時鐘</title><link>https://EM-Tec.github.io/post/2023ironman-16/</link><pubDate>Sat, 30 Sep 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-16/</guid><description>
&lt;p>今天我們要來製作一個時鐘。不使用圖片，只使用 CSS 來繪製。我的目標是可以做出類似於 Apple iOS17 StandBy 的時鐘效果。&lt;/p></description></item><item><title>Day15 今天我想來點...純CSS的並排選單</title><link>https://EM-Tec.github.io/post/2023ironman-15/</link><pubDate>Fri, 29 Sep 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-15/</guid><description>
&lt;p>昨天我們做了一個開關，那麼我們今天就來做一個選單吧！&lt;/p></description></item><item><title>Day14 今天我想來點… 純 CSS 的開關</title><link>https://EM-Tec.github.io/post/2023ironman-14/</link><pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-14/</guid><description>
在手機開關的設定裡面通常不是 checkbox ，而是這種 toggle 開關。因為比較好看，且更有開關的感覺。
廢話不多說，今天就來把它做出來吧
原理 開關本身還是 checkbox 勾選框，但是我們把原本勾勾的隱藏起來，然後用圓形開關代替。當被勾選時白色的圓形移動到右邊，而背景顏色漸變成綠色。
寫 checkbox 的 CSS 時因為
input 是插入一個元素，而不是一個範圍，所以不能使用 ::before 和 ::after 來做。 checkbox 顯示一定是正方形，如果設置為其他長寬比塊白的地方還是可以點擊。 checkbox 無法設定背景顏色 問題那麼多，因此我們只需要input幫我們掛名存狀態，然後把它藏在角落裡面就好了。
我們需要用其他元素來做開關的外觀。可以讓 checkbox 隱藏在 HTML 較前面的部分，然後用其他元素來控制 checkbox 的狀態。而能夠遠端遙控 checkbox 的元素叫做 label 。我們可以用 label 來控制 checkbox 的狀態。只需要點擊 label checkbox 也會感覺到。
開始製作 HTML 如下，我想用這個開關來控制背景顏色。
1&amp;lt;input type=&amp;#34;checkbox&amp;#34; id=&amp;#34;switch&amp;#34;&amp;gt; 2&amp;lt;label class=&amp;#34;toggle&amp;#34; for=&amp;#34;switch&amp;#34;&amp;gt;&amp;lt;/label&amp;gt; 3&amp;lt;div class=&amp;#34;light&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; 先簡單切版
1*, 2label::after { 3 margin: 0; 4 padding: 0; 5 transition: all 0.3s; 6} 7#switch { 8 display: none; 9} 10label { 11 width: 3.</description></item><item><title>Day13 今天我想來點… 顏色選單</title><link>https://EM-Tec.github.io/post/2023ironman-13/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-13/</guid><description>
&lt;p>昨天的內容是不是有一點燒腦?沒關係，今天來點輕鬆的，只有一行 JavaScript。不管是在線上的文書軟體、製作網站的網站、或甚至是 iOS StandBy 都會有顏色選單。今天我們就來做一個極簡的吧，還要加上自訂顏色的功能。&lt;/p></description></item><item><title>Day12 Js 滾動視差 甚麼都能滾(ft. 國中數學)</title><link>https://EM-Tec.github.io/post/2023ironman-12/</link><pubDate>Tue, 26 Sep 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-12/</guid><description>
&lt;blockquote>
&lt;p>以下內容是我高一在上公民課時體悟的數學大道理，和網路上大多的做法都不太一樣。這篇文章假設你已學會國中直線方程式。如果不會的話…我也沒辦法。&lt;/p>
&lt;/blockquote>
&lt;p>你有逛過 Apple 產品介紹的網頁嗎？這應該是我最早接觸滾動視差的地方。也是到現在我都覺得做的數一數二好的網站。你會發現在滾動的時候並不是單純的往下滑而已，螢幕上的元素常常會以出乎你意料的方式移動、或者是變化。&lt;/p></description></item><item><title>Day11 說滾不是真的要你滾 - 背景滾動視差</title><link>https://EM-Tec.github.io/post/2023ironman-11/</link><pubDate>Mon, 25 Sep 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-11/</guid><description>
&lt;p>你有看過這種頁面往下滾，但圖片位置沒有往下的效果嗎？&lt;/p></description></item><item><title>Day10 永無止境跑馬燈 - 不同螢幕 相同速度</title><link>https://EM-Tec.github.io/post/2023ironman-10/</link><pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-10/</guid><description>
&lt;blockquote>
&lt;p>這是我高一在學校吃肉蛋吐司時想到的做法，因此此篇文章假設你已熟悉國小數學。&lt;/p>
&lt;/blockquote></description></item><item><title>Day9 給你五彩斑斕的黑: mix-blend-mode</title><link>https://EM-Tec.github.io/post/2023ironman-9/</link><pubDate>Sat, 23 Sep 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-9/</guid><description>
&lt;blockquote>
&lt;p>昨天我們只是一個人的色而已，今天疊在一起更刺激。&lt;/p>
&lt;/blockquote></description></item><item><title>Day8 滿足你的色域! color: color</title><link>https://EM-Tec.github.io/post/2023ironman-8/</link><pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-8/</guid><description>
&lt;blockquote>
&lt;p>今天這一篇是一個很色的冷知識分享。可以讓你調出很冷的顏色。&lt;/p>
&lt;/blockquote></description></item><item><title>Day7 幫我開濾鏡 filter</title><link>https://EM-Tec.github.io/post/2023ironman-7/</link><pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-7/</guid><description>
&lt;p>CSS 的濾鏡屬性是一個非常實用且可以瞬間讓一個網頁看起來很厲害的功能。讓你可以以各種方式修改和調整圖像和元素的呈現方式，也可以讓元素模糊，或者是直接改變圖示顏色等等。今天我們將深入探討CSS filter 屬性，解釋其各種功能以及如何使用它來創建引人注目的效果。&lt;/p></description></item><item><title>Day6 你怎在這? 攻克 Position</title><link>https://EM-Tec.github.io/post/2023ironman-6/</link><pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-6/</guid><description>
&lt;p>在使用 CSS 做網站時幾乎一定會使用到 position 屬性，不過你真的知道它的原理和使用方式嗎？雖然乍看之下感覺很複雜但其實超簡單，你只需要幾分鐘就能完全理解了。&lt;/p></description></item><item><title>Day5 載入中… Animation-delay</title><link>https://EM-Tec.github.io/post/2023ironman-5/</link><pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-5/</guid><description>
&lt;p>假設你今天想製作這個載入動畫…&lt;/p></description></item><item><title>Day4 自己動! @keyframes 與 Transition</title><link>https://EM-Tec.github.io/post/2023ironman-4/</link><pubDate>Mon, 18 Sep 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-4/</guid><description>
&lt;p>今天我們要來玩玩 CSS 動畫。CSS動畫有兩種:&lt;/p>
&lt;ul>
&lt;li>@keyframes - 動作效果&lt;/li>
&lt;li>transition - 轉場效果&lt;/li>
&lt;/ul></description></item><item><title>Day3 用 Flex 切遍天下</title><link>https://EM-Tec.github.io/post/2023ironman-3/</link><pubDate>Sun, 17 Sep 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-3/</guid><description>
&lt;p>當你拿到一張設計圖要照著做出來你的第一反應是什麼呢？是直接套 bootstrap 再說嗎？但我幾乎所有的切版**只要是整齊能畫出網格的，我都會使用flex。**而這個網格也不一定是正方形，只要是矩形就可以了。&lt;/p></description></item><item><title>Day2 如何打的更快 | Emmet &amp; 預測輸入</title><link>https://EM-Tec.github.io/post/2023ironman-2/</link><pubDate>Sat, 16 Sep 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-2/</guid><description>
&lt;p>記得我在國一寫HTML的時候，傻傻的在那裡打小於、h1、大於、標題、小於、斜線、大於。我的朋友甚至發現了一個偷吃步就是先打好一堆大於小於，然後再填空。&lt;/p>
&lt;p>既然HTML 和 CSS 都長那樣，這種繁瑣的操作早就可以交給電腦來解決。所以今天我要和你分享如何使用 &lt;strong>Emmet 快速的打 HTML 以及&lt;/strong> &lt;strong>CSS&lt;/strong>&lt;/p></description></item><item><title>Day1 相見歡 - 庫就不酷嗎？</title><link>https://EM-Tec.github.io/post/2023ironman-1/</link><pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate><guid>https://EM-Tec.github.io/post/2023ironman-1/</guid><description>
&lt;p>哈囉大家好我是毛哥EM，歡迎來到 &lt;strong>【不用庫 也能酷 - 玩'轉 CSS &amp;amp; Js 特效 】&lt;/strong>&lt;/p>
&lt;p>在這30天裡面我會先帶大家複習一些許多人搞不懂但很重要的語法，接者將揭開如何以最精簡的代碼，實現從簡單到複雜的特效，讓元素變得生動有趣。同時，我們也將挑戰自己，使用純JavaScript實現無需依賴庫的互動，從而提高網站效能和速度。&lt;/p></description></item></channel></rss>